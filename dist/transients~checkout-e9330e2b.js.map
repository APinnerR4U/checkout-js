{"version":3,"sources":["webpack://checkout/../src/index.ts","webpack://checkout/../src/is-observable-action-like.ts","webpack://checkout/../src/noop-action-transformer.ts","webpack://checkout/../src/noop-state-transformer.ts","webpack://checkout/../src/compose-reducers.ts","webpack://checkout/../src/create-data-store.ts","webpack://checkout/../src/create-error-action.ts","webpack://checkout/../src/create-request-sender.ts","webpack://checkout/../src/payload-transformer.ts","webpack://checkout/../src/to-form-url-encoded.ts","webpack://checkout/../src/request-factory.ts","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/query-string/index.js","webpack://checkout/../src/is-promise.ts","webpack://checkout/../src/create-timeout.ts","webpack://checkout/../src/get-script-loader.ts","webpack://checkout/../src/create-form-poster.ts","webpack://checkout/webpack://checkoutKit/webpack/bootstrap","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-actions.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/missing-data-error.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/standard-error.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/set-prototype-of.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-actions.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/order-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-actions.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-actions.ts","webpack://checkout/webpack:/checkoutKit/external \"rxjs/operators\"","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-actions.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout-events.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/request-error.ts","webpack://checkout/webpack://checkoutKit/src/config/config-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-plain-object.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-actions.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkout/webpack://checkoutKit/src/payment/payment-status-types.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkout/webpack://checkoutKit/src/common/http-request/content-type.ts","webpack://checkout/webpack:/checkoutKit/external \"shallowequal\"","webpack://checkout/webpack://checkoutKit/src/payment/payment-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/invalid-argument-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-types.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/is-iframe-event.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-equal.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-poster.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/with-memoized-combiner.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-listener.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-default-includes.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-items.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/internal-api-headers.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-maps.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-resolver.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/memoize.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-item.ts","webpack://checkout/webpack:/checkoutKit/external \"iframe-resizer\"","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-initialized-error.ts","webpack://checkout/webpack://checkoutKit/src/common/error/throw-error-action.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/amount-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/url/parse-url.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cachable-action-decorator.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/is-action-options.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cache-action.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/bind-decorator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-deep.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkout/webpack://checkoutKit/src/shipping/map-to-internal-shipping-option.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-private.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unrecoverable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-internal-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-payment-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/clear-error-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-set.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-state.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/array-replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-merge.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-state.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-reducer.ts","webpack://checkout/webpack://checkoutKit/src/config/config-state.ts","webpack://checkout/webpack://checkoutKit/src/config/config-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-state.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/order/order-state.ts","webpack://checkout/webpack://checkoutKit/src/order/order-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/merge-or-push.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-reducer.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/create-freeze-proxy.ts","webpack://checkout/webpack://checkoutKit/src/form/form-selector.ts","webpack://checkout/webpack://checkoutKit/src/address/is-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-internal-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-selector.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-selector.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-selector.ts","webpack://checkout/webpack://checkoutKit/src/config/config-selector.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/order/order-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-action-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/create-request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/errors/checkout-not-available-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-coupon.ts","webpack://checkout/webpack://checkoutKit/src/address/map-to-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/billing/is-billing-address-like.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/selector-decorator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/is-element-id.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/set-unique-element-id.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/storage/browser-storage.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/loading-indicator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embed-checkout.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkout/webpack://checkoutKit/src/common/error/errors/timeout-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/join-includes.ts","webpack://checkout/webpack://checkoutKit/src/config/config-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/config/config-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/registry/registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkout/webpack://checkoutKit/src/customer/map-to-internal-customer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-gift-certificate.ts","webpack://checkout/webpack://checkoutKit/src/order/map-to-internal-order.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/get-environment.ts","webpack://checkout/webpack://checkoutKit/src/common/log/console-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/create-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/noop-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/get-default-logger.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-implemented-error.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/default/default-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/square/square-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/mutation-observer.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/order/errors/order-finalization-not-required-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-comparator.ts","webpack://checkout/webpack://checkoutKit/src/cart/errors/cart-changed-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-validator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-vaulted-instrument.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-transformer.ts","webpack://checkout/webpack://checkoutKit/src/order/order-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-argument-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-cancelled-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirmJs.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/address/is-internal-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-private.ts","webpack://checkout/webpack://checkoutKit/src/address/map-from-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/overlay/overlay.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cancellable-promise.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-credit-card-like.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-form.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unsupported-browser-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-declined-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/create-data-store-projection.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/is-future.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/add-minutes.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-response-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/clone-result.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-shallow-equal-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-message-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/to-single-line.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service-error-transformer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/create-spam-protection.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-client.ts","webpack://checkout/webpack://checkoutKit/src/customer/create-customer-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/shipping/create-shipping-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/custom-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/locale/language-service.ts","webpack://checkout/webpack://checkoutKit/src/locale/create-language-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-formatter.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/create-currency-service.ts","webpack://checkout/webpack://checkoutKit/src/index.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-cart.ts","webpack://checkout/webpack://checkoutKit/src/promotion/map-to-discount-notifications.ts","webpack://checkout/../src/form-builder.ts","webpack://checkout/../src/url-utils.ts","webpack://checkout/../src/index.js","webpack://checkout/../../src/client/client.js","webpack://checkout/../../src/payment/offsite-payment-initializer.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/payload-mapper.js","webpack://checkout/../../../src/common/utils/includes.js","webpack://checkout/../../../src/common/utils/omit-emptystring-and-nil.js","webpack://checkout/../../../src/common/utils/is-emptystring-or-nil.js","webpack://checkout/../../../src/common/utils/is-empty-string.js","webpack://checkout/../../../src/common/utils/omit-nil.js","webpack://checkout/../../../src/common/utils/to-number.js","webpack://checkout/../../../src/common/utils/to-snake-case.js","webpack://checkout/../../../src/common/utils/to-string.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/address-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/customer-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/meta-mapper.js","webpack://checkout/../../src/payment/payment-method-types.js","webpack://checkout/../../src/payment/payment-method-ids.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/store-mapper.js","webpack://checkout/../../src/payment/payment-submitter.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payload-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/customer-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/order-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payment-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/store-mapper.js","webpack://checkout/../../../src/common/http-request/default-options.js","webpack://checkout/../../../src/common/http-request/payload-transformer.js","webpack://checkout/../../../src/common/http-request/request-factory.js","webpack://checkout/../../src/payment/client-token-generator.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/client-token-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/cart-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/gateway-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/quote-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/store-mapper.js","webpack://checkout/../../src/store/store-request-sender.js","webpack://checkout/../../src/store/url-helper.js","webpack://checkout/../../../../src/store/v2/mappers/index.js","webpack://checkout/../../src/client/default-config.js","webpack://checkout/../src/timeout.ts","webpack://checkout/../../../src/common/utils/is-nil.js","webpack://checkout/../../../src/common/utils/omit-property.js","webpack://checkout/../../../src/payment/payment-method-mappers/payment-method-id-mapper.js","webpack://checkout/../../src/payment/url-helper.js","webpack://checkout/../../../src/common/http-request/request-sender.js","webpack://checkout/../../../src/common/http-request/method-types.js","webpack://checkout/../src/data-store.ts","webpack://checkout/../src/deep-freeze.ts","webpack://checkout/../src/combine-reducers.ts","webpack://checkout/../src/create-action.ts","webpack://checkout/../src/request-sender.ts","webpack://checkout/../src/script-loader.ts","webpack://checkout/../src/create-script-loader.ts","webpack://checkout/../src/form-poster.ts","webpack://checkout/../../src/payment/payment-types.js","webpack://checkout/../../../src/common/utils/is-object.js","webpack://checkout/../../../src/common/http-request/content-types.js","webpack://checkout/../../../src/common/utils/index.js"],"names":["data_store_1","__webpack_require__","exports","DataStore","default","combine_reducers_1","combineReducers","compose_reducers_1","composeReducers","create_action_1","createAction","create_data_store_1","createDataStore","create_error_action_1","createErrorAction","deep_freeze_1","deepFreeze","action","subscribe","then","state","lodash_1","shallowEqual","args","_i","arguments","length","reducers","options","_typeof","slice","tslib_1","__assign","_a","equalityCheck","newState","flowRight","filter","reducer","map","curryRight","initialState","type","payload","meta","error","cookie","__importStar","payload_transformer_1","__importDefault","request_factory_1","request_sender_1","to_form_url_encoded_1","JSON_CONTENT_TYPE_REGEXP","FORM_URLENCODED_CONTENT_TYPE_REGEXP","PayloadTransformer","prototype","toRequestBody","contentType","headers","this","_getHeader","body","test","JSON","stringify","toResponse","xhr","_parseResponseHeaders","getAllResponseHeaders","_parseResponseBody","response","responseText","status","statusText","parse","rawHeaders","replace","split","reduce","line","parts","key","shift","trim","toLowerCase","join","data","Object","keys","undefined","value","encodeURIComponent","queryString","RequestFactory","createRequest","url","XMLHttpRequest","_configureRequest","open","method","_formatUrl","params","_configureRequestHeaders","credentials","withCredentials","timeout","forEach","setRequestHeader","strictUriEncode","require","objectAssign","decodeComponent","encode","opts","strict","extract","str","queryStart","indexOf","formatter","result","arrayFormat","accumulator","exec","concat","parserForArrayFormat","ret","create","param","val","sort","Boolean","Array","isArray","keysSorter","input","a","b","Number","obj","index","encoderForArrayFormat","val2","push","x","parseUrl","query","promise","timeout_1","delay","instance","create_script_loader_1","form_builder_1","form_poster_1","formBuilder","e","n","r","i","l","modules","module","enumerable","Symbol","toStringTag","t","__esModule","d","bind","hasOwnProperty","call","s","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","_super","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","_this","name","tslib__WEBPACK_IMPORTED_MODULE_0__","ShippingStrategyActionType","CheckoutActionType","message","object","o","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","RequestError","errors","_c","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","__webpack_exports__","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","objectA","objectB","length_1","isEqual","Date","getTime","RegExp","toString","keyFilter","keysA","keysB","length_2","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","event","window","postMessage","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","creator","combiner","pop","apply","combinerArgs","ErrorActionType","PaymentMethodActionCreator","_requestSender","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","loadPaymentMethods","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","LoadPaymentMethodsFailed","methodId","LoadPaymentMethodRequested","loadPaymentMethod","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","PaymentMethodRequestSender","get","Accept","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","JsonV1","X-API-INTERNAL","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_isListening","_listeners","addEventListener","_handleMessage","removeEventListener","listener","listeners","splice","trigger","__decorate","_common_utility__WEBPACK_IMPORTED_MODULE_2__","itemMap","decimalPlaces","idKey","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","INTERNAL_USE_ONLY","maps","_options","maxSize","external_shallowequal_","onExpire","external_lodash_","CacheKeyResolver","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","_map","isMatched","mapIndex","unshift","isTerminalCacheKeyMap","parent","terminalMap","_lastId","recentlyUsedMap","_usedMaps","_removeMap","c","fn","cache","Map","resolver","_cache_key_resolver__WEBPACK_IMPORTED_MODULE_3__","u","delete","memoized","getKey","memoize","CheckoutIncludes","BraintreeScriptLoader","_scriptLoader","_window","loadScript","braintree","client","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","threeDSecure","dataCollector","paypal","paypalCheckout","visaCheckout","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","clientToken","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","loadClient","authorization","_paypal","Promise","all","getClient","loadPaypal","_paypalCheckout","loadPaypalCheckout","_3ds","load3DS","cached","_dataCollectors","loadDataCollector","kount","code","deviceData","teardown","resolve","_visaCheckout","loadVisaCheckout","_googlePay","loadGooglePayment","_teardown","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","_decimalPlaces","AmountTransformer","Math","round","pow","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","_","descriptor","memoizedMethods","WeakMap","lastArg","useCache","instanceMethods","set","cache_key_resolver","external_rxjs_","pipe","from","store","f","defineProperty","target","bindMethodDecorator","decoratedTarget","getOwnPropertyNames","getOwnPropertyDescriptor","boundMethod","predicate","omitDeep","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","loadCheckout","LoadCheckoutSucceeded","LoadCheckoutFailed","context","getState","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","updateCheckout","UpdateCheckoutSucceeded","UpdateCheckoutFailed","ConsignmentActionCreator","_consignmentRequestSender","consignment","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","_createOrUpdateConsignment","_addLineItems","Observable","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","address","_getConsignmentRequestBody","CreateConsignmentsRequested","createConsignments","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","sharedItem","find","existingItem","request","DEFAULT_PARAMS","ConsignmentRequestSender","post","put","location","isSelected","description","price","cost","selected","isRecommended","transitTime","map_from_payment_error_response_joinErrors","h","register","request_error","joinErrors","detail","title","timeout_error","RequestErrorFactory","factoryMethod","_factoryMethods","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","errorResponse","storefrontErrorResponse","internalErrorResponse","m","g","y","error_actions","ClearError","v","currentValue","newValue","DEFAULT_STATE","statuses","A","dataReducer","errorsReducer","clearErrorReducer","statusesReducer","O","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","E","objectSet","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","P","k","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","arrayReplace","R","currentObject","newObject","cart_state_DEFAULT_STATE","L","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","W","checkout_button_reducer_dataReducer","_b","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","J","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","nt","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","st","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","ht","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","gt","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","It","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","Et","Pt","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","kt","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","zt","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","qt","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","Wt","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","Jt","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","ie","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","ce","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","fe","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","ve","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_state_DEFAULT_STATE","Ae","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","Re","trap","proxy","iteratee","getPrototypeOf","charAt","je","firstName","lastName","company","address1","address2","city","stateOrProvince","countryCode","postalCode","phone","customFields","Ne","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","loadError","createCartSelector","createCheckoutButtonSelector","ke","createConfigSelector","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","createCountrySelector","getCountries","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createInstrumentSelector","getInstruments","getInstrumentsMeta","getDeleteError","createFormSelector","getShippingAddressFields","countries","selectedCountry","formFields","shippingAddressFields","field","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","paymentMethods","getLoadMethodError","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createConsignmentSelector","getConsignmentById","addressA","addressB","normalize","getShippingOption","selectedShippingOption","getCreateError","createError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getGrandTotal","useStoreCredit","grandTotal","storeCredit","max","createOrderSelector","getOrder","getOrderMeta","createPaymentSelector","payments","providerId","payment_method_types","internalPayment","step","redirectUrl","paymentMethod","nonce","payment_status_types","checkoutButton","customerStrategies","form","instruments","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createFreezeProxy","qe","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","createInternalCheckoutSelectorsFactory","billingAddressReducer","cartReducer","checkoutReducer","checkoutButtonReducer","configReducer","consignmentReducer","countryReducer","couponReducer","customerReducer","customerStrategyReducer","giftCertificateReducer","instrumentReducer","orderReducer","paymentReducer","paymentMethodReducer","paymentStrategyReducer","remoteCheckoutReducer","shippingCountryReducer","shippingStrategyReducer","stateTransformer","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","checkout_default_includes","checkout_not_available_error","couponTypes","coupon","displayName","discountType","couponType","addressId","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","memoizedMethod","cachedValue","getUsedCount","checkout_button_error_selector","_checkoutButton","CheckoutButtonErrorSelector","selectorDecorator","checkout_button_status_selector","CheckoutButtonStatusSelector","CheckoutButtonMethodType","checkout_button_initializer","_store","_buttonStrategyActionCreator","_state","createCheckoutButtonSelectors","CheckoutButtonInitializer","subscriber","filters","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","initialize","queueId","dispatch","deinitialize","bind_decorator","I","S","w","_registry","_paymentMethodActionCreator","CheckoutButtonStrategyActionCreator","M","T","D","z","j","N","q","U","F","C","B","G","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","BraintreePaypalButtonStrategy","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","getPaypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","loadDefaultCheckout","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","getDataCollector","postForm","payment_type","provider","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","_googlePayPaymentProcessor","GooglePayButtonStrategy","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","handleSuccess","paymentData","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","_masterpassScriptLoader","MasterpassButtonStrategy","initializationData","load","_masterpassClient","masterpass","_signInButton","buttonContainer","button","src","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_createMasterpassPayload","K","H","_host","PaypalButtonStrategy","merchantId","clientId","actions","internal_api_headers","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","Z","host","requestSender","formPoster","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","checkout_button_method_type","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","_namespace","BrowserStorage","rawValue","external_local_storage_fallback_default","getItem","withNamespace","removeItem","setItem","p","UnknownError","embedded_checkout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onComplete","addListener","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","EmbeddedCheckout","listen","show","_allowCookie","_attemptLogin","createFrame","_iframe","iframe","hide","_retryAllowCookie","FrameError","stopListen","iFrameResizer","close","contentWindow","styles","setTarget","embedded_content_events","StyleConfigured","reject","invalid_login_token_error","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","LoadingIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","attach","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","updateAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","getGooglePaymentComponent","_googlePaymentInstance","googleBraintreePaymentInstance","_createGooglePayPayload","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","customerId","fullName","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","_coupon__WEBPACK_IMPORTED_MODULE_3__","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","socialDataObject","digitalItems","lineItem","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","process","isEnabled","_console","ConsoleLogger","_logToConsole","messages","NoopLogger","logger","getEnvironment","console_logger","console","noop_logger","_couponRequestSender","CouponActionCreator","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","_giftCertificateRequestSender","GiftCertificateActionCreator","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","_strategyRegistry","CustomerStrategyActionCreator","signIn","signOut","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","getVisaCheckout","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","PaymentStrategyType","VisaCheckoutScriptLoader","V","standard_error","ChasePayScriptLoader","JPMC","Q","RemoteCheckoutRequestSender","methodName","X","$","_remoteCheckoutRequestSender","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","initializeBilling","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","initializeShipping","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","initializePayment","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","loadSettings","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","tt","et","rt","_customerRequestSender","CustomerActionCreator","SignInCustomerRequested","signInCustomer","loadCurrentCheckout","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","signOutCustomer","SignOutCustomerFailed","it","CustomerRequestSender","ot","at","_remoteCheckoutActionCreator","AmazonPayCustomerStrategy","amazonOptions","loadWidget","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","authorize","popup","scope","tokenPrefix","trackAuthorizationEvent","ut","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","BraintreeVisaCheckoutCustomerStrategy","visaCheckoutOptions","initOptions","storeProfile","storeLanguage","signInButton","_buttonClassName","init","on","paymentSuccessPayload","_paymentInstrumentSelected","widgetInteraction","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","dt","_chasePayScriptLoader","ChasePayCustomerStrategy","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","pt","_customerActionCreator","DefaultCustomerStrategy","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","ft","mt","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","yt","_t","_countryRequestSender","CountryActionCreator","loadCountries","Ct","_config","CountryRequestSender","Accept-Language","vt","OrderRequestSender","bt","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","OrderActionCreator","loadOrder","defer","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","validate","submitOrder","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","finalizeOrder","FinalizeOrderFailed","execute","MutationObserverFactory","callback","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","GoogleRecaptcha","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","initRecaptcha","grecaptcha","Mt","_googleRecaptcha","SpamProtectionActionCreator","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","SubmitFailed","Rt","jt","_orderActionCreator","PaymentStrategyActionCreator","strategy","getByMethod","payment_strategy_type","NO_PAYMENT_DATA_REQUIRED","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","finalize","loadOrderPayments","Lt","Nt","CartComparator","cartA","cartB","_normalize","itemA","itemB","localeCompare","giftWrapping","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","Ft","xt","_paymentRequestSender","_paymentRequestTransformer","PaymentActionCreator","SubmitPaymentRequested","submitPayment","SubmitPaymentFailed","InitializeOffsitePaymentRequested","initializeOffsitePayment","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","Bt","PaymentRequestSender","_transformResponse","Gt","Yt","Vt","Kt","Ht","instrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","authToken","isVaultedInstrument","vaultAccessToken","quoteMeta","geoCountryCode","source","paymentMethodSelector","Xt","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","paymentSettings","clientSidePaymentProviders","te","invalidFields","_paymentActionCreator","_affirmScriptLoader","AffirmPaymentStrategy","publicKey","_affirm","affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","mode","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","affirmJs","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","ae","_afterpayScriptLoader","AfterpayPaymentStrategy","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","pe","AfterpayScriptLoader","AfterPay","he","le","me","ignoredKeys","ge","_billingAddressActionCreator","AmazonPayPaymentStrategy","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","walletOptions","amazonOrderReferenceId","design","designMode","onPaymentSelect","_synchronizeBillingAddress","orderReference","onReady","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","isInternalAddressEqual","mapFromInternalAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","Overlay","_registerClick","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","be","cancellable","cancel","race","Ie","_overlay","BraintreePaymentProcessor","_threeDSecureOptions","getPaypal","requestData","_mapToCreditCard","focusWindow","useraction","remove","addFrame","removeFrame","tokenizeCard","get3DS","cancelVerifyCard","verification","cancellable_promise","verifyCard","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","Se","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","we","_braintreePaymentProcessor","BraintreeCreditCardPaymentStrategy","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","isCreditCardLike","shouldSaveInstrument","_isUsingVaulting","tokenizedCard","appendSessionId","_credit","BraintreePaypalPaymentStrategy","braintreeOptions","preloadPaypal","De","_paymentStrategyActionCreator","BraintreeVisaCheckoutPaymentStrategy","visaInitOptions","ze","_cardinalClient","CardinalThreeDSecureFlow","runBinProcess","_getBinNumber","getThreeDSecureData","three_ds_result","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","CardBrand","DigitalWalletType","chasepay_payment_strategy","_wepayRiskClient","_walletEvent$","ChasePayPaymentStrategy","chasepay","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","riskToken","Be","Ge","ConvergePaymentStrategy","PaReq","TermUrl","callback_url","MD","Ye","CreditCardPaymentStrategy","We","_threeDSecureFlow","CyberSourcePaymentStrategy","prepare","start","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","Ke","_klarnaScriptLoader","KlarnaPaymentStrategy","_klarnaCredit","klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","klarna","client_token","_supportedEUCountries","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","_getUpdateSessionData","res","approved","show_form","He","KlarnaScriptLoader","Klarna","Credit","Ze","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","Je","NoPaymentDataRequiredPaymentStrategy","Xe","OfflinePaymentStrategy","$e","OffsitePaymentStrategy","_shouldSubmitFullPayload","tn","PaypalProPaymentStrategy","_isPaymentAcknowledged","en","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","nn","rn","SagePayPaymentStrategy","an","sn","SquarePaymentStrategy","_syncPaymentMethod","_paymentForm","createSquareForm","_getFormOptions","build","_getNonceInstrument","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","_showPaymentMethods","methods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","_getCountryCode","storeName","pending","setPostalCode","masterpassBtn","elementId","cn","SquareScriptLoader","SqPaymentForm","un","_stripeScriptLoader","StripeV3PaymentStrategy","stripeOptions","stripev3","_stripeV3Client","stripeJs","cardElement","elements","mount","_cardElement","paymentIntent","_getStripeJs","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","handleCardPayment","stripeResponse","unmount","stripeBillingDetails","_mapStripeBillingAddress","stripeShippingDetails","_mapStripeShippingAddress","_getCustomer","shippingDetails","_mapStripeShippingDetails","receipt_email","save_payment_method","billing_details","_mapStripeBillingDetails","dn","StripeV3ScriptLoader","publishableKey","Stripe","betas","pn","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","hn","orderActionCreator","paymentActionCreator","WepayPaymentStrategy","payloadWithToken","_zipScriptLoader","ZipPaymentStrategy","_zipClient","zip","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","gn","ZipScriptLoader","Zip","ProjectionActionType","_instrumentRequestSender","InstrumentActionCreator","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","loadInstruments","currentToken","deleteInstrument","date","valueOf","now","vaultAccessExpiry","newDate","setMinutes","getMinutes","_isValidVaultAccessToken","getVaultAccessToken","storeId","bn","InstrumentResponseTransformer","_transformVaultedInstruments","vaulted_instruments","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","In","_transformer","instrument_response_transformer","InstrumentRequestSender","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","transformErrorResponse","transformResponse","loadInstrumentsWithAddress","Sn","wn","An","On","_shippingCountryRequestSender","ShippingCountryActionCreator","En","ShippingCountryRequestSender","Pn","Mn","ShippingStrategyActionCreator","selectOption","mergedOptions","kn","_consignmentActionCreator","AmazonPayShippingStrategy","_createAddressBook","optionId","selectShippingOption","AddressBook","onAddressSelect","_synchronizeShippingAddress","Rn","DefaultShippingStrategy","Tn","Dn","cloneDeep","cloneDeepSafe","Ln","jn","createShallowEqualSelector","external_reselect_","Un","create_shallow_equal_selector","Yn","_messageCustomizer","ErrorMessageTransformer","checkout_service","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","error_message_transformer","_selectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","createCheckoutSelectorsFactory","_storeProjection","Synchronize","initial","CheckoutService","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","loadBillingCountries","loadShippingCountries","continueAsGuest","loadShippingOptions","assignItemsByAddress","unassignItemsByAddress","updateShippingOption","clearError","Vn","Kn","getDefaultLogger","warn","paymentClient","setHost","bigpayBaseUrl","orderRequestSender","order_request_sender","checkoutRequestSender","configActionCreator","spamProtection","google_recaptcha","google_recaptcha_script_loader","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","checkout_validator","billing_address_action_creator","billing_address_request_sender","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","paymentMethodActionCreator","remoteCheckoutRequestSender","remote_checkout_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","amazon_pay_customer_strategy","amazon_pay_script_loader","braintree_visacheckout_customer_strategy","createBraintreeVisaCheckoutPaymentProcessor","visacheckout_script_loader","chasepay_customer_strategy","chasepay_script_loader","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","payment_strategy_action_creator","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","checkoutValidator","payment_action_creator","paymentStrategyActionCreator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","credit_card_payment_strategy","CYBERSOURCE","cybersource_payment_strategy","cardinal_three_d_secure_flow","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","CHASE_PAY","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","createPaymentStrategyRegistry","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","$n","hasAttribute","setAttribute","tr","iframe_embedded_checkout_messenger","_untargetedMessagePoster","_messageHandlers","IframeEmbeddedCheckoutMessenger","_postMessage","_transformError","untargeted","handler","_notifyMessageHandlers","isCustomError","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","ir","parentWindow","parentOrigin","handleFrameLoadedEvent","language_service","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","LanguageService","translationKey","KEY_PREFIX","_hasTranslations","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","sr","cr","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","CurrencyFormatter","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","parsedIntegerAmount","decimalAmount","precision","currency_service","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","CurrencyService","exchangeRate","dr","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","GooglePayPaymentProcessor","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","parseResponse","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","info","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","_mapGooglePayAddressToBillingAddress","GooglePayScriptLoader","initializer","googlepay_payment_processor","googlepay_script_loader","promotions","notifications","map_to_internal_coupon","promotion","banners","placeholders","messageHtml","banner","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal","FormBuilder","_createInput","isAbsoluteUrl","joinPaths","pathA","pathB","path","removeLeadingSlash","createClient","Client","paymentSubmitter","offsitePaymentInitializer","clientTokenGenerator","storeRequestSender","_classCallCheck","clientConfig","_objectAssign2","DEFAULT_CONFIG","OffsitePaymentInitializer","PaymentSubmitter","ClientTokenGenerator","StoreRequestSender","generateClientToken","postShopperInstrument","_paymentTypes","urlHelper","payloadMapper","UrlHelper","createFormPoster","PayloadMapper","_data$paymentMethod","mapToPayload","getOffsitePaymentUrl","_utils","addressMapper","customerMapper","metaMapper","paymentMethodIdMapper","storeMapper","AddressMapper","CustomerMapper","MetaMapper","PaymentMethodIdMapper","StoreMapper","_data$order","bc_auth_token","mapToId","notify_url","page_title","payment_method_id","reference_id","return_url","mapToBillingAddress","mapToCustomer","mapToMeta","mapToShippingAddress","mapToStore","omitNil","_omitProperty2","isEmptyStringOrNil","_isEmptyString2","_isNil2","isNil","parseFloat","string","isNaN","mapToAddress","addressKey","_omitNil","formattedAddressKey","toSnakeCase","_defineProperty","_data$customer","_data$quoteMeta","_data$store","customer_browser_info","navigator","userAgent","customer_email","customer_first_name","customer_geo_ip_country_code","customer_last_name","customer_locale","customer_name","customer_phone","customer_reference","meta_referrer","referrer","meta_source","meta_user_agent","MULTI_OPTION","BRAINTREE_VISACHECKOUT","BRAINTREE_GOOGLEPAY","store_hash","storeHash","store_id","RequestSender","API","getPaymentUrl","mapToHeaders","postRequest","orderMapper","paymentMapper","OrderMapper","PaymentMapper","mapToOrder","mapToPayment","Authorization","customer_group","geo_ip_country_code","session_token","mapToCoupons","mapToItems","mapToShipping","totals","mapToOrderTotals","_ref2$order","_ref2","_ref3","omitEmptyStringAndNil","state_code","street_1","street_2","_data$cart","itemData","variant_id","_data$order2","grand_total","tax","_data$orderMeta","_data$payment","device_info","device","fingerprint_id","vault_payment_instrument","mapToBigPayToken","credit_card_token","credit_card_cryptogram","mapToCryptogram","credit_card","mapToCreditCard","_data$payment2","account_name","toNumber","verification_value","customer_code","ccCustomerCode","three_d_secure","_ref","credit_card_number_confirmation","payment_cryptogram","xid","account_mask","_contentTypes","_methodTypes","DEFAULT_OPTIONS","APPLICATION_JSON","GET","setOptions","headerKeys","setHeaders","clientTokenMapper","ClientTokenMapper","getGenerateClientTokenUrl","mapToClientToken","cartMapper","gatewayMapper","quoteMapper","CartMapper","GatewayMapper","QuoteMapper","mapToCart","mapToGateway","quote","mapToQuote","currency_code","_data$cart2","integerTax","mapToType","_data$cart3","discount_total","shipping_total","surcharge_total","tax_total","ItemPhysicalEntity","ItemDigitalEntity","ItemGiftCertificateEntity","_paymentMethodIdMapper","mapToLocale","store_identity","mapToIdentity","urls","mapToUrls","language_code","_data$store2","_data$store3","cartLink","confirmation","orderConfirmationLink","home","shopPath","_mappers","getInstrumentsUrl","getTrustedShippingAddressUrl","mapToTrustedShippingAddressPayload","POST","mapToInstrumentPayload","getInstrumentByIdUrl","DELETE","providerName","_ref2$creditCard","cardholder_name","verification_code","verificationCode","issue_month","issueMonth","issue_year","issueYear","issue_number","issueNumber","track_data","trackData","is_manual_entry","isManualEntry","icc_data","iccData","fallback_reason","fallbackReason","is_contactless","isContactless","encrypted_pin_cryptogram","encryptedPinCryptogram","encrypted_pin_ksn","encryptedPinKsn","mapToState","create_request_sender_1","createRequestSender","create_timeout_1","createTimeout","Timeout","_delay","_resolve","_promise","_timeoutToken","predicateFn","_isObject2","_isObject","_paymentMethodTypes","_paymentMethodIds","isBraintreePaymentMethod","requestFactory","payloadTransformer","_deepAssign2","fromResponse","isSuccessfulRequest","toRequest","script_loader_1","ScriptLoader","createScriptLoader","get_script_loader_1","getScriptLoader","rxjs_1","operators_1","is_observable_action_like_1","noop_action_transformer_1","noop_state_transformer_1","_reducer","_state$","BehaviorSubject","_notification$","Subject","_dispatchers","_dispatchQueue$","_errors","mergeMap","dispatcher$","concatMap","scan","states","_transformStates","transformedState","getValue","distinctUntilChanged","stateA","stateB","_dispatchObservableAction","_dispatchThunkAction","_dispatchAction","state$","filterFn","skip","subscriptions","subscription","unsubscribe","previousValue","_getDispatchError","throwError","of","error$","transformedAction$","merge","_getDispatcher","catchError","tap","thunkAction","equalityCheck_1","previousValue_1","isFrozen","isPlainObject","freeze","TypeError","currentState","assign","omitBy","merge_1","is_promise_1","_requestFactory","_payloadTransformer","_cookie","_mergeDefaultOptions","_prependHost","requestHandler","onload","onerror","onabort","ontimeout","abort","send","patch","defaultOptions","csrfToken","_scripts","script","onreadystatechange","async","create_form_poster_1","FormPoster","url_utils_1","_formBuilder","handleUnload","submit"],"mappings":"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ACA,IAAIsC,GAAqBrzC,MAIjCF,EAASnrB,SAASusC,GAAoBoyB,OAAQ,WAC1C,WAAIC,GACAhlE,EACA00D,EACAuP,EACAzB,EACA,IAAIG,EAAsBlxC,MAIlCF,EAASnrB,SAASusC,GAAoBsE,YAAa,WAC/C,WAAIguB,GACAjlE,EACA00D,EACAC,KAIRpjC,EAASnrB,SAASusC,GAAoBuyB,YAAa,WAC/C,WAAIC,GACAnlE,EACA00D,EACAC,EACA,IAAIyQ,GACAplE,EACA20D,EACA0N,EACA,IAAIgD,GAAe,IAAIC,GAAqB7zC,QAKxDF,EAASnrB,SAASusC,GAAoB4yB,OAAQ,WAC1C,WAAIC,GACAxlE,EACA00D,EACA2N,EACAG,EACA,IAAIiD,GAAmBh0C,MAI/BF,EAASnrB,SAASusC,GAAoBoE,OAAQ,WAC1C,WAAI2uB,GACA1lE,EACA00D,KAIRnjC,EAASnrB,SAASusC,GAAoBngD,QAAS,WAC3C,WAAImzE,GACA3lE,EACA00D,KAIRnjC,EAASnrB,SAASusC,GAAoBqE,QAAS,WAC3C,WAAI4uB,GACA5lE,EACA00D,EACAC,KAIRpjC,EAASnrB,SAASusC,GAAoBkzB,OAAQ,WAC1C,WAAIC,GACA9lE,EACA00D,EACAC,EACA,IAAIyQ,GACAplE,EACA20D,EACA0N,EACA,IAAIgD,GAAe,IAAIC,GAAqB7zC,QAKxDF,EAASnrB,SAASusC,GAAoBozB,eAAgB,WAClD,WAAIC,GACAhmE,EACA00D,EACA,IAAItiC,KAAmBX,MAI/BF,EAASnrB,SAASusC,GAAoBszB,sBAAuB,WACzD,WAAID,GACAhmE,EACA00D,EACA,IAAItiC,KAAmBX,MAI/BF,EAASnrB,SAASusC,GAAoBuzB,SAAU,WAC5C,WAAIC,GACAnmE,EACA00D,EACAC,EACAtjC,KAIRE,EAASnrB,SAASusC,GAAoByzB,OAAQ,WAC1C,WAAIC,GACArmE,EACA0xB,EACAgjC,EACAC,EACA0N,EACAmC,EACApzC,EACA,IAAIk1C,GAAmB70C,MAI/BF,EAASnrB,SAASusC,GAAoBC,yBAA0B,WAC5D,WAAI2zB,GACAvmE,EACA00D,KAIRnjC,EAASnrB,SAASusC,GAAoB6zB,UAAW,WAC7C,WAAIC,GACAzmE,EACA00D,EACAC,EACA0N,EACA6B,KAIR3yC,EAASnrB,SAASusC,GAAoB3gB,iBAAkB,WACpD,WAAI00C,GACA1mE,EACA00D,EACAC,EACA0N,EACA6B,KAIR3yC,EAASnrB,SAASusC,GAAoBtgB,wBAAyB,WAC3D,WAAIq0C,GACA1mE,EACA00D,EACAC,EACA0N,EACA6B,QAKR3yC,EAASnrB,SAASusC,GAAoBg0B,wBAAyB,WAC3D,WAAIC,GACA5mE,EACA0xB,EACA2wC,EACAmC,EACA7P,EACAD,EACAmO,EAA4CpxC,EAAcL,GAC1D,IAAI0xC,EAAyBrxC,MAIrCF,EAASnrB,SAASusC,GAAoBk0B,UAAW,WAC7C,WAAIre,GACAxoD,EACA0xB,EACAgjC,EACAC,EACA0N,EACAmC,EACApzC,EACA,IAAI4xC,EAAqBvxC,GACzB,IAAIq1C,GAAgBr1C,MAI5BF,EAASnrB,SAASusC,GAAoBo0B,qBAAsB,WACxD,WAAI3b,GACAprD,EACA0xB,EACA2wC,EACAmC,EACA7P,EACAD,EACA/qE,YACIqW,EACA,IAAIyyB,IACA,IAAIP,IACA,IAAIC,IAAsBV,SAO9CF,EAASnrB,SAASusC,GAAoBq0B,OAAQ,WAC1C,WAAIC,GACAjnE,EACA00D,EACAC,EACA,IAAImS,GAAgBr1C,MAI5BF,EAASnrB,SAASusC,GAAoBrgB,WAAY,WAC9C,WAAI+6B,GACArtD,EACA00D,EACAC,EACA,IAAIpiC,IAAuBd,MAInCF,EAASnrB,SAASusC,GAAoBu0B,kBAAmB,WACrD,WAAI9b,GACAprD,EACA0xB,EACA2wC,EACAmC,EACA7P,EACAD,EACA/qE,YACIqW,EACA,IAAI2yB,QAKhBpB,EAASnrB,SAASusC,GAAoBw0B,IAAK,WACvC,WAAIC,GACApnE,EACA00D,EACAC,EACA0N,EACAG,EACA,IAAI6E,GAAgB51C,GACpBL,KAIRG,EAASnrB,SAASusC,GAAoB20B,SAAU,WAC5C,WAAIC,GACAvnE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","file":"transients~checkout-e9330e2b.js","sourcesContent":["export { default as createFormPoster } from './create-form-poster';\nexport { default as FormPoster } from './form-poster';\n","import { Subscribable, SubscribableOrPromise } from 'rxjs';\n\nimport Action from './action';\nimport { DispatchableAction } from './dispatchable-data-store';\n\nexport default function isObservableActionLike<TAction extends Action = Action>(\n    action: DispatchableAction<TAction>\n): action is SubscribableOrPromise<TAction> {\n    return (\n        typeof (action as Subscribable<TAction>).subscribe === 'function' ||\n        typeof (action as PromiseLike<TAction>).then === 'function'\n    );\n}\n","import { Subscribable } from 'rxjs';\n\nimport Action from './action';\n\nexport default function noopActionTransformer<TAction extends Action, TTransformedAction extends Action = TAction>(\n    action: Subscribable<TAction>\n): Subscribable<TTransformedAction> {\n    return action as any as Subscribable<TTransformedAction>;\n}\n","export default function noopStateTransformer<TState, TTransformedState = TState>(\n    state: TState\n): TTransformedState {\n    return state as any as TTransformedState;\n}\n","import { curryRight, flowRight } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TStateA, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TState, action: TAction) => TStateA,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TState, action: TAction) => TStateB,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TState, action: TAction) => TStateC,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TStateD, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TStateD, action: TAction) => TStateC,\n    reducerE: (state: TState, action: TAction) => TStateD,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...args: any[]\n): Reducer<TState, TAction> {\n    let reducers: Array<Reducer<TState, TAction>> = args;\n    let options: ComposeReducersOptions = {};\n\n    if (typeof args[args.length - 1] === 'object') {\n        reducers = args.slice(0, -1);\n        options = { ...options, ...args[args.length - 1] };\n    }\n\n    const { equalityCheck = shallowEqual } = options;\n\n    return (state, action) => {\n        const newState = flowRight(\n            reducers\n                .filter(reducer => reducer.length === 2)\n                .map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return equalityCheck(state, newState) ? state : newState;\n    };\n}\n\nexport interface ComposeReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import Action from './action';\nimport combineReducers, { ReducerMap } from './combine-reducers';\nimport DataStore, { DataStoreOptions } from './data-store';\nimport Reducer from './reducer';\n\nexport default function createDataStore<TState, TAction extends Action = Action, TTransformedState = TState>(\n    reducer: Reducer<TState, TAction> | ReducerMap<TState, TAction>,\n    initialState?: Partial<TState>,\n    options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n): DataStore<TState, TAction, TTransformedState> {\n    if (typeof reducer === 'function') {\n        return new DataStore(reducer, initialState, options);\n    }\n\n    return new DataStore(\n        combineReducers(reducer, { equalityCheck: options && options.equalityCheck }),\n        initialState,\n        options\n    );\n}\n","import Action from './action';\nimport createAction from './create-action';\n\nexport default function createErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    return {\n        ...createAction(type, payload, meta),\n        error: true,\n    };\n}\n","import * as cookie from 'js-cookie';\n\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestSender from './request-sender';\nimport RequestSenderOptions from './request-sender-options';\n\nexport default function createRequestSender(options?: RequestSenderOptions): RequestSender {\n    return new RequestSender(\n        new RequestFactory(),\n        new PayloadTransformer(),\n        cookie,\n        options\n    );\n}\n","import Headers from './headers';\nimport RequestOptions from './request-options';\nimport Response from './response';\nimport toFormUrlEncoded from './to-form-url-encoded';\n\nconst JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nconst FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\n\nexport default class PayloadTransformer {\n    toRequestBody(options: RequestOptions): any {\n        const contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return toFormUrlEncoded(options.body);\n            }\n        }\n\n        return options.body;\n    }\n\n    toResponse(xhr: XMLHttpRequest): Response {\n        const headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n\n        // Using `responseText` to support legacy IE\n        const body = this._parseResponseBody(\n            'response' in xhr ? xhr.response : (xhr as any).responseText,\n            headers\n        );\n\n        return {\n            body,\n            headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private _parseResponseBody(body: string, headers: Headers): any {\n        const contentType = this._getHeader(headers, 'Content-Type');\n\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n\n        return body;\n    }\n\n    private _parseResponseHeaders(rawHeaders: string): Headers {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return {\n                ...headers,\n                [key.toLowerCase()]: parts.join(':').trim(),\n            };\n        }, {});\n    }\n\n    private _getHeader(headers: Headers, key: string): string {\n        if (!headers || !key) {\n            return '';\n        }\n\n        return headers[key] || headers[key.toLowerCase()] || '';\n    }\n}\n","export default function toFormUrlEncoded(data: any): string {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params)}`;\n    }\n}\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","export default function isPromise(promise: any): promise is PromiseLike<any> {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\n","import Timeout from './timeout';\n\nexport default function createTimeout(delay?: number): Timeout {\n    return new Timeout(delay);\n}\n","import createScriptLoader from './create-script-loader';\nimport ScriptLoader from './script-loader';\n\nlet instance: ScriptLoader;\n\nexport default function getScriptLoader(): ScriptLoader {\n    if (!instance) {\n        instance = createScriptLoader();\n    }\n\n    return instance;\n}\n","import FormBuilder from './form-builder';\nimport FormPoster from './form-poster';\nimport FormPosterOptions from './form-poster-options';\n\nexport default function createFormPoster(options?: FormPosterOptions): FormPoster {\n    const formBuilder = new FormBuilder();\n    const formPoster = new FormPoster(formBuilder, options);\n\n    return formPoster;\n}\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 144);\n","module.exports = require(\"@bigcommerce/data-store\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"shallowequal\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport memoize from '../utility/memoize';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize as lodashMemoize } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { Omit } from '../types';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        maxSize,\n        isEqual,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport type RemoteCheckoutStateData =\n    { amazon?: AmazonPayRemoteCheckout } &\n    { afterpay?: AfterpayRemoteCheckout };\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertifcates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoize, memoizeOne } from '../common/utility';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { Address } from '../address';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getGrandTotal,\n        getGrandTotal => (useStoreCredit: boolean = false) => {\n            const grandTotal = getGrandTotal(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../../common/selector';\nimport { memoizeOne } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getGrandTotal(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getGrandTotal = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getGrandTotal: getGrandTotal(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return () => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport InternalCheckoutSelectors from '../checkout/internal-checkout-selectors';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new StandardError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!data.ActionCode) {\n                            if (data.ErrorNumber > 0) {\n                                reject(new StandardError(data.ErrorDescription));\n                            }\n                            resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                resolve({ token: jwt });\n                                break;\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    reject(new StandardError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    reject(new StandardError('Transaction signature could not be validated.'));\n                                } else {\n                                    resolve({ token: jwt });\n                                }\n                                break;\n                            case CardinalValidatedAction.Failure:\n                                reject(new StandardError('User failed authentication or an error was encountered while processing the transaction.'));\n                                break;\n                            case CardinalValidatedAction.Error:\n                                reject(new StandardError(data.ErrorDescription));\n                        }\n\n                        resolve({ token: jwt });\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement,\n                            this._mapStripePaymentMethodOptions()\n                        ).then(stripePaymentMethod => {\n                            if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                throw new StandardError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                            }\n\n                            if (!paymentIntent) {\n                                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                            }\n\n                            const stripeCardPaymentOptions = {\n                                ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                payment_method: stripePaymentMethod.paymentMethod.id,\n                            };\n\n                            return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                        })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone, memoizeOne } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","export default class FormBuilder {\n    build(url: string, data: { [key: string]: any }): HTMLFormElement {\n        const form = document.createElement('form');\n\n        form.style.display = 'none';\n\n        form.setAttribute('action', url);\n        form.setAttribute('method', 'POST');\n        form.setAttribute('target', '_top');\n\n        Object.keys(data)\n            .forEach(key => {\n                const value = data[key];\n\n                form.appendChild(this._createInput(value, key));\n            });\n\n        return form;\n    }\n\n    private _createInput(value: any, key: string): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.setAttribute('name', key);\n        input.setAttribute('type', 'hidden');\n        input.setAttribute('value', value);\n\n        return input;\n    }\n}\n","export function isAbsoluteUrl(url: string): boolean {\n    return /^https?:\\/\\//.test(url);\n}\n\nexport function joinPaths(pathA: string, pathB: string): string {\n    return `${removeTrailingSlash(pathA)}/${removeLeadingSlash(pathB)}`;\n}\n\nfunction removeTrailingSlash(path: string): string {\n    return path.replace(/\\/$/, '');\n}\n\nfunction removeLeadingSlash(path: string): string {\n    return path.replace(/^\\//, '');\n}\n","import Client from './client/client';\n\n/**\n * @param {Object} [config]\n * @returns {Client}\n */\nexport function createClient(config) {\n    return Client.create(config);\n}\n","import objectAssign from 'object-assign';\nimport OffsitePaymentInitializer from '../payment/offsite-payment-initializer';\nimport PaymentSubmitter from '../payment/payment-submitter';\nimport ClientTokenGenerator from '../payment/client-token-generator';\nimport StoreRequestSender from '../store/store-request-sender';\nimport DEFAULT_CONFIG from './default-config';\n\nexport default class Client {\n    /**\n     * @param {Object} config\n     * @returns {Client}\n     */\n    static create(config) {\n        const clientConfig = objectAssign({}, DEFAULT_CONFIG, config);\n        const offsitePaymentInitializer = OffsitePaymentInitializer.create(clientConfig);\n        const paymentSubmitter = PaymentSubmitter.create(clientConfig);\n        const clientTokenGenerator = ClientTokenGenerator.create(clientConfig);\n        const storeRequestSender = StoreRequestSender.create(clientConfig);\n\n        return new Client(\n            clientConfig,\n            paymentSubmitter,\n            offsitePaymentInitializer,\n            clientTokenGenerator,\n            storeRequestSender\n        );\n    }\n\n    /**\n     * @param {Object} config\n     * @param {PaymentSubmitter} paymentSubmitter\n     * @param {OffsitePaymentInitializer} offsitePaymentInitializer\n     * @param {ClientTokenGenerator} clientTokenGenerator\n     * @param {StoreRequestSender} storeRequestSender\n     */\n    constructor(\n        config,\n        paymentSubmitter,\n        offsitePaymentInitializer,\n        clientTokenGenerator,\n        storeRequestSender\n    ) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n\n        /**\n         * @private\n         * @type {PaymentSubmitter}\n         */\n        this.paymentSubmitter = paymentSubmitter;\n\n        /**\n         * @private\n         * @type {OffsitePaymentInitializer}\n         */\n        this.offsitePaymentInitializer = offsitePaymentInitializer;\n\n        /**\n         * @private\n         * @type {ClientTokenGenerator}\n         */\n        this.clientTokenGenerator = clientTokenGenerator;\n\n        /**\n         * @private\n         * @type {StoreRequestSender}\n         */\n        this.storeRequestSender = storeRequestSender;\n    }\n\n    /**\n     * @param {string} host\n     * @returns {void}\n     */\n    setHost(host) {\n        this.config.host = host;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    initializeOffsitePayment(data, callback) {\n        this.offsitePaymentInitializer.initializeOffsitePayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    submitPayment(data, callback) {\n        this.paymentSubmitter.submitPayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        this.clientTokenGenerator.generateClientToken(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        this.storeRequestSender.loadInstruments(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {AddressData} data.shippingAddress\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        this.storeRequestSender.loadInstrumentsWithAddress(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {CreditCard} data.creditCard\n     * @param {AddressData} data.billingAddress\n     * @param {boolean} data.defaultInstrument\n     * @param {string} data.providerName\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        this.storeRequestSender.postShopperInstrument(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.instrumentId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        this.storeRequestSender.deleteShopperInstrument(data, callback);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { HOSTED } from './payment-types';\nimport PayloadMapper from './offsite-payment-mappers/payload-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class OffsitePaymentInitializer {\n    /**\n     * @param {Object} config\n     * @returns {OffsitePaymentInitializer}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const formPoster = createFormPoster();\n        const payloadMapper = PayloadMapper.create();\n\n        return new OffsitePaymentInitializer(urlHelper, formPoster, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {FormPoster} formPoster\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, formPoster, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {FormPoster}\n         */\n        this.formPoster = formPoster;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    initializeOffsitePayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== HOSTED) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getOffsitePaymentUrl();\n\n        this.formPoster.postForm(url, payload, callback);\n    }\n}\n","import objectAssign from 'object-assign';\nimport { omitNil, toString } from '../../common/utils';\nimport AddressMapper from './address-mapper';\nimport CustomerMapper from './customer-mapper';\nimport MetaMapper from './meta-mapper';\nimport PaymentMethodIdMapper from '../payment-method-mappers/payment-method-id-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const addressMapper = AddressMapper.create();\n        const customerMapper = CustomerMapper.create();\n        const metaMapper = MetaMapper.create();\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper);\n    }\n\n    /**\n     * @param {AddressMapper} addressMapper\n     * @param {CustomerMapper} customerMapper\n     * @param {MetaMapper} metaMapper\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @param {StoreMapper} storeMapper\n     * @returns {Object}\n     */\n    constructor(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper) {\n        /**\n         * @private\n         * @type {AddressMapper}\n         */\n        this.addressMapper = addressMapper;\n\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {MetaMapper}\n         */\n        this.metaMapper = metaMapper;\n\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { authToken, order = {}, paymentMethod = {} } = data;\n\n        const payload = objectAssign(\n            {\n                amount: order.grandTotal ? order.grandTotal.integerAmount : null,\n                bc_auth_token: authToken,\n                currency: order.currency,\n                gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n                notify_url: order.callbackUrl,\n                order_id: order.orderId ? toString(order.orderId) : null,\n                page_title: document.title ? document.title : null,\n                payment_method_id: paymentMethod.id,\n                reference_id: order.orderId ? toString(order.orderId) : null,\n                return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            },\n            this.addressMapper.mapToBillingAddress(data),\n            this.customerMapper.mapToCustomer(data),\n            this.metaMapper.mapToMeta(data),\n            this.addressMapper.mapToShippingAddress(data),\n            this.storeMapper.mapToStore(data)\n        );\n\n        return omitNil(payload);\n    }\n}\n","/**\n * @param {array|string} items\n * @param {array|string} item\n * @returns {boolean}\n */\nexport default function includes(items, item) {\n    if (!Array.isArray(items) && typeof items !== 'string') {\n        return false;\n    }\n\n    return items.indexOf(item) !== -1;\n}\n","import isEmptyStringOrNil from './is-emptystring-or-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitEmptyStringAndNil(object) {\n    return omitProperty(object, isEmptyStringOrNil);\n}\n","import isEmptyString from './is-empty-string';\nimport isNil from './is-nil';\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyStringOrNil(value) {\n    return isEmptyString(value) || isNil(value);\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyString(value) {\n    return value === '';\n}\n","import isNil from './is-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitNil(object) {\n    return omitProperty(object, isNil);\n}\n","/**\n * @param {*} value\n * @returns {number}\n */\nexport default function toNumber(value) {\n    return parseFloat(value) || 0;\n}\n","/**\n * @param {string} string\n * @returns {string}\n */\nexport default function toSnakeCase(string) {\n    if (typeof string !== 'string') {\n        return string;\n    }\n\n    return string.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2')\n        .replace(/[-\\s]+/g, '_')\n        .toLowerCase();\n}\n","/**\n * @param {*} value\n * @returns {string}\n */\nexport default function toString(value) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'number' && !isNaN(value)) {\n        return value.toString();\n    }\n\n    return '';\n}\n","import { omitNil, toSnakeCase } from '../../common/utils';\n\nexport default class AddressMapper {\n    /**\n     * @returns {AddressMapper}\n     */\n    static create() {\n        return new AddressMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        return this.mapToAddress(data, 'billingAddress');\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n        const formattedAddressKey = toSnakeCase(addressKey);\n\n        return omitNil({\n            [`${formattedAddressKey}_city`]: address.city,\n            [`${formattedAddressKey}_company`]: address.company,\n            [`${formattedAddressKey}_country_code`]: address.countryCode,\n            [`${formattedAddressKey}_country`]: address.country,\n            [`${formattedAddressKey}_first_name`]: address.firstName,\n            [`${formattedAddressKey}_last_name`]: address.lastName,\n            [`${formattedAddressKey}_phone`]: address.phone,\n            [`${formattedAddressKey}_state_code`]: address.provinceCode,\n            [`${formattedAddressKey}_state`]: address.province,\n            [`${formattedAddressKey}_street_1`]: address.addressLine1,\n            [`${formattedAddressKey}_street_2`]: address.addressLine2,\n            [`${formattedAddressKey}_zip`]: address.postCode,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {}, store = {} } = data;\n\n        return omitNil({\n            customer_browser_info: navigator.userAgent,\n            customer_email: customer.email,\n            customer_first_name: customer.firstName,\n            customer_geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            customer_last_name: customer.lastName,\n            customer_locale: store.storeLanguage,\n            customer_name: customer.name,\n            customer_phone: customer.phoneNumber,\n            customer_reference: customer.email,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class MetaMapper {\n    /**\n     * @returns {MetaMapper}\n     */\n    static create() {\n        return new MetaMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToMeta(data) {\n        const { source } = data;\n\n        return omitNil({\n            meta_referrer: document.referrer,\n            meta_source: source,\n            meta_user_agent: navigator.userAgent,\n        });\n    }\n}\n","export const CREDIT_CARD = 'credit-card';\nexport const MULTI_OPTION = 'multi-option';\n","export const BRAINTREE = 'braintree';\nexport const BRAINTREE_PAYPAL = 'braintreepaypal';\nexport const BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit';\nexport const BRAINTREE_VISACHECKOUT = 'braintreevisacheckout';\nexport const BRAINTREE_GOOGLEPAY = 'googlepaybraintree';\n","import { omitNil, toString } from '../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            store_hash: store.storeHash,\n            store_id: store.storeId ? toString(store.storeId) : null,\n        });\n    }\n}\n","import { API } from './payment-types';\nimport PayloadMapper from './v1/payment-mappers/payload-mapper';\nimport RequestSender from '../common/http-request/request-sender';\nimport UrlHelper from './url-helper';\n\nexport default class PaymentSubmitter {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const payloadMapper = PayloadMapper.create();\n\n        return new PaymentSubmitter(urlHelper, requestSender, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    submitPayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== API) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getPaymentUrl();\n        const options = {\n            headers: this.payloadMapper.mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CustomerMapper from './customer-mapper';\nimport OrderMapper from './order-mapper';\nimport PaymentMapper from './payment-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const customerMapper = CustomerMapper.create();\n        const orderMapper = OrderMapper.create();\n        const paymentMapper = PaymentMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(customerMapper, orderMapper, paymentMapper, storeMapper);\n    }\n\n    /**\n     * @param {CustomerMapper} customerMapper\n     * @param {OrderMapper} orderMapper\n     * @param {PaymentMapper} paymentMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(customerMapper, orderMapper, paymentMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {OrderMapper}\n         */\n        this.orderMapper = orderMapper;\n\n        /**\n         * @private\n         * @type {PaymentMapper}\n         */\n        this.paymentMapper = paymentMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            customer: this.customerMapper.mapToCustomer(data),\n            notify_url: order.callbackUrl,\n            order: this.orderMapper.mapToOrder(data),\n            payment: this.paymentMapper.mapToPayment(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToHeaders(data) {\n        const { authToken } = data;\n\n        return omitNil({\n            Authorization: authToken,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {} } = data;\n\n        return omitNil({\n            customer_group: customer.customerGroupName ? { name: customer.customerGroupName } : null,\n            geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            id: customer.customerId ? toString(customer.customerId) : null,\n            session_token: quoteMeta.request ? quoteMeta.request.sessionHash : null,\n        });\n    }\n}\n","import { omitEmptyStringAndNil, omitNil, toString } from '../../../common/utils';\n\nexport default class OrderMapper {\n    /**\n     * @returns {OrderMapper}\n     */\n    static create() {\n        return new OrderMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrder(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            billing_address: this.mapToBillingAddress(data),\n            coupons: this.mapToCoupons(data),\n            currency: order.currency,\n            id: order.orderId ? toString(order.orderId) : null,\n            items: this.mapToItems(data),\n            shipping: this.mapToShipping(data),\n            shipping_address: this.mapToShippingAddress(data),\n            token: order.token,\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        const { customer = {} } = data;\n        const address = this.mapToAddress(data, 'billingAddress');\n\n        if (customer.email) {\n            address.email = customer.email;\n        }\n\n        return address;\n    }\n\n    /**\n     * @private\n     * @param  {PaymentRequestData} data\n     * @return {Shipping[]}\n     */\n    mapToShipping(data) {\n        const { description } = data.shippingOption || {};\n\n        if (description) {\n            return [{\n                method: description,\n            }];\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Coupon[]}\n     */\n    mapToCoupons({ order = {} }) {\n        if (order.coupon && order.coupon.coupons) {\n            return order.coupon.coupons.map(({ code }) => ({ code }));\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n\n        return omitEmptyStringAndNil({\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            country: address.country,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            state_code: address.provinceCode,\n            state: address.province,\n            street_1: address.addressLine1,\n            street_2: address.addressLine2,\n            zip: address.postCode,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            code: itemData.id,\n            variant_id: itemData.variantId,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            grand_total: order.grandTotal ? order.grandTotal.integerAmount : null,\n            handling: order.handling ? order.handling.integerAmount : null,\n            shipping: order.shipping ? order.shipping.integerAmount : null,\n            subtotal: order.subtotal ? order.subtotal.integerAmount : null,\n            tax: order.taxTotal ? order.taxTotal.integerAmount : null,\n        });\n    }\n}\n","import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n        };\n\n        const method = paymentMethod.method;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            hash: store.storeHash,\n            id: store.storeId ? toString(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n}\n","import { APPLICATION_JSON } from './content-types';\nimport { GET } from './method-types';\n\nconst DEFAULT_OPTIONS = {\n    headers: {\n        Accept: APPLICATION_JSON,\n        'Content-Type': APPLICATION_JSON,\n    },\n    method: GET,\n};\n\nexport default DEFAULT_OPTIONS;\n","import { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return { data, status, statusText };\n    }\n}\n","export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport ClientTokenMapper from './v2/payment-mappers/client-token-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class ClientTokenGenerator {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const clientTokenMapper = ClientTokenMapper.create();\n\n        return new ClientTokenGenerator(urlHelper, requestSender, clientTokenMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {ClientTokenMapper} clientTokenMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, clientTokenMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {ClientTokenMapper}\n         */\n        this.clientTokenMapper = clientTokenMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        const url = this.urlHelper.getGenerateClientTokenUrl();\n        const payload = this.clientTokenMapper.mapToClientToken(data);\n\n        this.requestSender.postRequest(url, payload, {}, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CartMapper from './cart-mapper';\nimport GatewayMapper from './gateway-mapper';\nimport QuoteMapper from './quote-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class ClientTokenMapper {\n    /**\n     * @returns {ClientTokenMapper}\n     */\n    static create() {\n        const cartMapper = CartMapper.create();\n        const gatewayMapper = GatewayMapper.create();\n        const quoteMapper = QuoteMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new ClientTokenMapper(cartMapper, gatewayMapper, quoteMapper, storeMapper);\n    }\n\n    /**\n     * @param {CartMapper} cartMapper\n     * @param {GatewayMapper} gatewayMapper\n     * @param {QuoteMapper} quoteMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(cartMapper, gatewayMapper, quoteMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CartMapper}\n         */\n        this.cartMapper = cartMapper;\n\n        /**\n         * @private\n         * @type {GatewayMapper}\n         */\n        this.gatewayMapper = gatewayMapper;\n\n        /**\n         * @private\n         * @type {QuoteMapper}\n         */\n        this.quoteMapper = quoteMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToClientToken(data) {\n        return omitNil({\n            cart: this.cartMapper.mapToCart(data),\n            gateway: this.gatewayMapper.mapToGateway(data),\n            quote: this.quoteMapper.mapToQuote(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class CartMapper {\n    /**\n     * @returns {CartMapper}\n     */\n    static create() {\n        return new CartMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCart(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            currency_code: cart.currency,\n            items: this.mapToItems(data),\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object[]}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            discount_amount: itemData.integerDiscount,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n            tax_amount: itemData.integerTax,\n            amount: itemData.integerAmountAfterDiscount,\n            type: this.mapToType(itemData),\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            discount_total: cart.discount ? cart.discount.integerAmount : null,\n            grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,\n            shipping_total: cart.shipping ? cart.shipping.integerAmount : null,\n            subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,\n            surcharge_total: cart.handling ? cart.handling.integerAmount : null,\n            tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null,\n        });\n    }\n\n    /**\n     * @private\n     * @param {Object} itemData\n     * @returns {Object}\n     */\n    mapToType(itemData) {\n        const types = {\n            ItemPhysicalEntity: 'physical',\n            ItemDigitalEntity: 'digital',\n            ItemGiftCertificateEntity: 'gift_card',\n        };\n\n        return types[itemData.type];\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class GatewayMapper {\n    /**\n     * @returns {GatewayMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new GatewayMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToGateway(data) {\n        const { paymentMethod = {} } = data;\n\n        return omitNil({\n            name: this.paymentMethodIdMapper.mapToId(paymentMethod),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class QuoteMapper {\n    /**\n     * @returns {QuoteMapper}\n     */\n    static create() {\n        return new QuoteMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToQuote(data) {\n        return omitNil({\n            billing_address: this.mapToAddress(data, 'billingAddress'),\n            shipping_address: this.mapToAddress(data, 'shippingAddress'),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const { customer = {} } = data;\n        const address = data[addressKey] || {};\n\n        return omitNil({\n            address_line_1: address.addressLine1,\n            address_line_2: address.addressLine2,\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            email: customer.email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            postal_code: address.postCode,\n            state: address.province,\n        });\n    }\n}\n","import { omitNil, toNumber } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        return omitNil({\n            locale: this.mapToLocale(data),\n            store_identity: this.mapToIdentity(data),\n            urls: this.mapToUrls(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToLocale(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            country_code: store.countryCode,\n            currency_code: store.currencyCode,\n            language_code: store.storeLanguage,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToIdentity(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            id: store.storeId ? toNumber(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToUrls(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            cart: store.cartLink,\n            checkout: store.checkoutLink,\n            confirmation: store.orderConfirmationLink,\n            home: store.shopPath,\n        });\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport { DELETE, POST } from '../common/http-request/method-types';\nimport UrlHelper from './url-helper';\nimport {\n    mapToHeaders,\n    mapToInstrumentPayload,\n    mapToTrustedShippingAddressPayload,\n} from './v2/mappers';\n\nexport default class StoreRequestSender {\n    /**\n     * @param {Object} config\n     * @returns {StoreRequestSender}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n\n        return new StoreRequestSender(urlHelper, requestSender);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        const url = this.urlHelper.getTrustedShippingAddressUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToTrustedShippingAddressPayload(data);\n        const options = {\n            method: POST,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToInstrumentPayload(data);\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentByIdUrl(\n            data.storeId,\n            data.customerId,\n            data.instrumentId\n        );\n        const options = {\n            method: DELETE,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     * @throws {Error}\n     */\n    get host() {\n        if (!this.config || !this.config.host) {\n            throw new Error('Host URL unavailable or not supplied.');\n        }\n\n        return this.config.host;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    getInstrumentsUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @return {string}\n     */\n    getTrustedShippingAddressUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/trusted_shipping_address?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {number} instrumentId\n     * @returns {string}\n     */\n    getInstrumentByIdUrl(storeId, customerId, instrumentId) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/${instrumentId}`;\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.billingAddress\n * @param {CreditCard} data.creditCard\n * @param {boolean} data.defaultInstrument\n * @param {string} data.providerName\n * @return {Object}\n */\nexport function mapToInstrumentPayload(data = {}) {\n    const {\n        providerName,\n        defaultInstrument: default_instrument,\n    } = data;\n\n    const provider = omitNil({ name: providerName });\n\n    return omitNil({\n        provider,\n        credit_card: mapToCreditCard(data),\n        billing_address: mapToAddress(data.billingAddress),\n        default_instrument,\n    });\n}\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.shippingAddress\n * @return {Object}\n */\nexport function mapToTrustedShippingAddressPayload(data = {}) {\n    return omitNil({\n        shipping_address: mapToAddress(data.shippingAddress),\n    });\n}\n\n/**\n * @param {Object} data\n * @param {string} data.authToken\n * @return {Object}\n */\nexport function mapToHeaders({ authToken: Authorization } = {}) {\n    return omitNil({\n        Authorization,\n    });\n}\n\n/**\n * @param {AddressData} address\n * @return {Object}\n */\nfunction mapToAddress(address = {}) {\n    const state = mapToState(address.provinceCode, address.province);\n\n    return omitNil({\n        address_line_1: address.addressLine1,\n        address_line_2: address.addressLine2,\n        city: address.city,\n        company: address.company,\n        country_code: address.countryCode,\n        email: address.email,\n        first_name: address.firstName,\n        last_name: address.lastName,\n        phone: address.phone,\n        postal_code: address.postCode,\n        state,\n    });\n}\n\n/**\n * @param {string} code\n * @param {string} name\n * @return {Object}\n */\nfunction mapToState(code, name) {\n    return omitNil({\n        code,\n        name,\n    });\n}\n\n/**\n * @param {Object} data\n * @param {CreditCard} data.creditCard\n * @return {Object}\n */\nfunction mapToCreditCard({ creditCard = {} }) {\n    const threeDSecure = omitNil(creditCard.threeDSecure);\n\n    return omitNil({\n        cardholder_name: creditCard.cardholderName,\n        number: creditCard.number,\n        month: creditCard.month,\n        year: creditCard.year,\n        verification_code: creditCard.verificationCode,\n        issue_month: creditCard.issueMonth,\n        issue_year: creditCard.issueYear,\n        issue_number: creditCard.issueNumber,\n        track_data: creditCard.trackData,\n        is_manual_entry: creditCard.isManualEntry,\n        icc_data: creditCard.iccData,\n        fallback_reason: creditCard.fallbackReason,\n        is_contactless: creditCard.isContactless,\n        encrypted_pin_cryptogram: creditCard.encryptedPinCryptogram,\n        encrypted_pin_ksn: creditCard.encryptedPinKsn,\n        three_d_secure: threeDSecure,\n    });\n}\n","const DEFAULT_CONFIG = {\n    host: '',\n};\n\nexport default DEFAULT_CONFIG;\n","export default class Timeout {\n    private _promise: Promise<any>;\n    private _resolve: () => void;\n    private _timeoutToken?: number;\n\n    constructor(\n        private _delay?: number\n    ) {\n        // tslint:disable-next-line:no-empty\n        this._resolve = () => {};\n\n        this._promise = new Promise(resolve => {\n            this._resolve = resolve;\n        });\n    }\n\n    onComplete(callback: () => void): void {\n        this._promise.then(callback);\n    }\n\n    complete(): void {\n        this._resolve();\n\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    }\n\n    start(): void {\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(() => this.complete(), this._delay);\n        }\n    }\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isNil(value) {\n    if (value === null || value === undefined) {\n        return true;\n    }\n\n    return false;\n}\n","import isObject from './is-object';\n\n/**\n * @param {Object} object\n * @param {Function} predicateFn\n * @returns {Object}\n */\nexport default function omitProperty(object, predicateFn) {\n    if (!isObject(object)) {\n        return object;\n    }\n\n    const keys = Object.keys(object);\n\n    return keys.reduce((result, key) => {\n        const value = object[key];\n\n        if (!predicateFn(value)) {\n            result[key] = value;\n        }\n\n        return result;\n    }, {});\n}\n","import { MULTI_OPTION } from '../payment-method-types';\nimport {\n    BRAINTREE,\n    BRAINTREE_GOOGLEPAY,\n    BRAINTREE_PAYPAL,\n    BRAINTREE_PAYPAL_CREDIT,\n    BRAINTREE_VISACHECKOUT,\n} from '../payment-method-ids';\n\n/**\n * @param {string} id\n * @return {Boolean}\n */\nfunction isBraintreePaymentMethod(id) {\n    switch (id) {\n    case BRAINTREE_PAYPAL:\n    case BRAINTREE_PAYPAL_CREDIT:\n    case BRAINTREE_VISACHECKOUT:\n    case BRAINTREE_GOOGLEPAY:\n        return true;\n    default:\n        return false;\n    }\n}\n\nexport default class PaymentMethodIdMapper {\n    /**\n     * @returns {PaymentMethodIdMapper}\n     */\n    static create() {\n        return new PaymentMethodIdMapper();\n    }\n\n    /**\n     * @param {PaymentMethod} paymentMethod\n     * @returns {string}\n     */\n    mapToId(paymentMethod) {\n        let { id } = paymentMethod;\n\n        if (paymentMethod.method === MULTI_OPTION) {\n            id = paymentMethod.gateway;\n        }\n\n        if (isBraintreePaymentMethod(id)) {\n            return BRAINTREE;\n        }\n\n        return id;\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    get host() {\n        return this.config.host;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getOffsitePaymentUrl() {\n        return `${this.host}/pay/initialize`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getPaymentUrl() {\n        return `${this.host}/api/public/v1/orders/payments`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getGenerateClientTokenUrl() {\n        return `${this.host}/api/v2/public/payments/client_tokens`;\n    }\n}\n","import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n","export const GET = 'GET';\nexport const POST = 'POST';\nexport const DELETE = 'DELETE';\n","import { merge } from 'lodash';\nimport {\n    defer,\n    from,\n    of,\n    throwError,\n    BehaviorSubject,\n    Observable,\n    Subject,\n    Subscribable,\n    SubscribableOrPromise\n} from 'rxjs';\nimport {\n    catchError,\n    concatMap,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    mergeMap,\n    scan,\n    skip,\n    tap,\n} from 'rxjs/operators';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport deepFreeze from './deep-freeze';\nimport DispatchableDataStore, { DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nimport isObservableActionLike from './is-observable-action-like';\nimport noopActionTransformer from './noop-action-transformer';\nimport noopStateTransformer from './noop-state-transformer';\nimport ReadableDataStore, { Filter, Subscriber, SubscribeOptions, Unsubscriber } from './readable-data-store';\nimport Reducer from './reducer';\nimport ThunkAction from './thunk-action';\n\nexport default class DataStore<TState, TAction extends Action = Action, TTransformedState = TState> implements\n    ReadableDataStore<TTransformedState>, DispatchableDataStore<TTransformedState, TAction> {\n    private _reducer: Reducer<TState, TAction>;\n    private _options: DataStoreOptions<TState, TAction, TTransformedState>;\n    private _notification$: Subject<TTransformedState>;\n    private _dispatchers: { [key: string]: Dispatcher<TAction> };\n    private _dispatchQueue$: Subject<Dispatcher<TAction>>;\n    private _state$: BehaviorSubject<TTransformedState>;\n    private _errors: { [key: string]: Subject<Error> };\n\n    constructor(\n        reducer: Reducer<TState, TAction>,\n        initialState: Partial<TState> = {},\n        options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n    ) {\n        this._reducer = reducer;\n        this._options = {\n            actionTransformer: noopActionTransformer,\n            equalityCheck: shallowEqual,\n            shouldWarnMutation: true,\n            stateTransformer: noopStateTransformer,\n            ...options,\n        };\n        this._state$ = new BehaviorSubject(this._options.stateTransformer(initialState as TState));\n        this._notification$ = new Subject();\n        this._dispatchers = {};\n        this._dispatchQueue$ = new Subject();\n        this._errors = {};\n\n        this._dispatchQueue$\n            .pipe(\n                mergeMap(dispatcher$ => dispatcher$.pipe(concatMap(action$ => action$))),\n                filter(action => !!action.type),\n                scan(\n                    (states: StateTuple<TState, TTransformedState>, action: TAction) =>\n                        this._transformStates(states, action),\n                    {\n                        state: initialState as TState,\n                        transformedState: this._state$.getValue(),\n                    }\n                ),\n                distinctUntilChanged(({ state: stateA }, { state: stateB }) =>\n                    this._options.equalityCheck(stateA, stateB)\n                ),\n                map(({ transformedState }) => transformedState)\n            )\n            .subscribe(this._state$);\n\n        this.dispatch({ type: 'INIT' } as TAction);\n    }\n\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState> {\n        if (isObservableActionLike(action)) {\n            return this._dispatchObservableAction(action, options);\n        }\n\n        if (typeof action === 'function') {\n            return this._dispatchThunkAction(action, options);\n        }\n\n        return this._dispatchAction(action);\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    notifyState(): void {\n        this._notification$.next(this.getState());\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n\n        let state$: Observable<TTransformedState> = this._state$;\n\n        if (filters.length > 0) {\n            state$ = state$.pipe(\n                distinctUntilChanged((stateA, stateB) =>\n                    filters.every(filterFn =>\n                        this._options.equalityCheck(filterFn(stateA), filterFn(stateB))\n                    )\n                )\n            );\n        }\n\n        if (options && options.initial === false) {\n            state$ = state$.pipe(skip(1));\n        }\n\n        const subscriptions = [\n            state$.subscribe(subscriber),\n            this._notification$.subscribe(subscriber),\n        ];\n\n        return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private _transformStates(\n        states: StateTuple<TState, TTransformedState>,\n        action: TAction\n    ): StateTuple<TState, TTransformedState> {\n        try {\n            const newState = this._options.shouldWarnMutation === false ?\n                this._reducer(states.state, action) :\n                deepFreeze(this._reducer(states.state, action), {\n                    equalityCheck: this._options.equalityCheck,\n                    previousValue: states.state,\n                });\n            const transformedState = this._options.stateTransformer(newState);\n\n            return { state: newState, transformedState };\n        } catch (error) {\n            this._getDispatchError(action.meta && action.meta.queueId).next(error);\n\n            return { state: states.state, transformedState: states.transformedState };\n        }\n    }\n\n    private _dispatchAction<TDispatchAction extends TAction>(\n        action: TDispatchAction\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(\n            action.error ? throwError(action) : of(action)\n        );\n    }\n\n    private _dispatchObservableAction<TDispatchAction extends TAction>(\n        action$: SubscribableOrPromise<TDispatchAction>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return new Promise((resolve, reject) => {\n            const error$ = this._getDispatchError(options.queueId);\n            const transformedAction$ = this._options.actionTransformer(\n                from(action$).pipe(\n                    map(action =>\n                        options.queueId ?\n                            merge({}, action, { meta: { queueId: options.queueId } }) :\n                            action\n                    )\n                ) as Subscribable<TDispatchAction>\n            );\n\n            this._getDispatcher(options.queueId).next(\n                from(transformedAction$)\n                    .pipe(\n                        map((action, index) => {\n                            if (index === 0) {\n                                error$.pipe(first()).subscribe(reject);\n                            }\n\n                            if (action.error) {\n                                reject(action.payload);\n                            }\n\n                            return action;\n                        }),\n                        catchError(action => {\n                            reject(action instanceof Error ? action : action.payload);\n\n                            return of(action);\n                        }),\n                        tap({\n                            complete: () => {\n                                resolve(this.getState());\n                            },\n                        })\n                    )\n            );\n        });\n    }\n\n    private _dispatchThunkAction<TDispatchAction extends TAction>(\n        thunkAction: ThunkAction<TDispatchAction, TTransformedState>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(defer(() => thunkAction(this)), options);\n    }\n\n    private _getDispatcher(queueId: string = 'default'): Dispatcher<TAction> {\n        if (!this._dispatchers[queueId]) {\n            this._dispatchers[queueId] = new Subject();\n\n            this._dispatchQueue$.next(this._dispatchers[queueId]);\n        }\n\n        return this._dispatchers[queueId];\n    }\n\n    private _getDispatchError(queueId: string = 'default'): Subject<Error> {\n        if (!this._errors[queueId]) {\n            this._errors[queueId] = new Subject();\n        }\n\n        return this._errors[queueId];\n    }\n}\n\nexport interface DataStoreOptions<TState, TAction, TTransformedState> {\n    shouldWarnMutation: boolean;\n    actionTransformer(action: Subscribable<TAction>): Subscribable<TAction>;\n    equalityCheck(valueA: any, valueB: any): boolean;\n    stateTransformer(state: TState): TTransformedState;\n}\n\ninterface StateTuple<TState, TTransformedState> {\n    state: TState;\n    transformedState: TTransformedState;\n}\n\ntype Dispatcher<TAction> = Subject<Subscribable<TAction>>;\n","import { isPlainObject } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nexport interface DeepFreezeOptions<T> {\n    previousValue?: T;\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n\nexport default function deepFreeze<T>(object: T[], options?: DeepFreezeOptions<T>): ReadonlyArray<T>;\nexport default function deepFreeze<T extends object>(object: T, options?: DeepFreezeOptions<T>): Readonly<T>;\nexport default function deepFreeze<T>(object: T, options?: DeepFreezeOptions<T>): T;\nexport default function deepFreeze<T>(\n    object: T[] | T,\n    options?: DeepFreezeOptions<T>\n): ReadonlyArray<T> | Readonly<T> | T {\n    try {\n        const { equalityCheck = shallowEqual, previousValue = null } = options || {};\n\n        if (equalityCheck(object, previousValue) && Object.isFrozen(previousValue)) {\n            return previousValue as T;\n        }\n\n        if (Object.isFrozen(object) || (!Array.isArray(object) && !isPlainObject(object))) {\n            return object;\n        }\n\n        if (Array.isArray(object)) {\n            return Object.freeze(object.map((value, index) =>\n                deepFreeze(value, {\n                    equalityCheck,\n                    previousValue: Array.isArray(previousValue) ? previousValue[index] : undefined,\n                })\n            ));\n        }\n\n        return Object.freeze(Object.getOwnPropertyNames(object).reduce((result, key) => {\n            result[key as keyof T] = deepFreeze(object[key as keyof T], {\n                equalityCheck,\n                previousValue: previousValue && previousValue.hasOwnProperty(key) ?\n                    (previousValue as any)[key] :\n                    undefined,\n            });\n\n            return result;\n        }, {} as T));\n    } catch (error) {\n        // Browsers that only support ES5 will throw `TypeError` when checking\n        // if a primitive value is frozen or trying to freeze a primitive value.\n        if (error instanceof TypeError) {\n            return object;\n        }\n\n        throw error;\n    }\n}\n","import { assign } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>,\n    options?: CombineReducersOptions\n): Reducer<TState, TAction> {\n    const { equalityCheck = shallowEqual } = options || {};\n\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (equalityCheck(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n\nexport interface CombineReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import { omitBy } from 'lodash';\n\nimport Action from './action';\n\nexport default function createAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    if (typeof type !== 'string' || type === '') {\n        throw new Error('`type` must be a string');\n    }\n\n    return { type, ...omitBy({ payload, meta }, value => value === undefined) };\n}\n","import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash/merge';\n\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options?: RequestSenderOptions\n    ) {}\n\n    sendRequest<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(options);\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n}\n","export default class ScriptLoader {\n    private _scripts: { [key: string]: Promise<Event> } = {};\n\n    loadScript(src: string): Promise<Event> {\n        if (!this._scripts[src]) {\n            this._scripts[src] = new Promise((resolve, reject) => {\n                const script = document.createElement('script') as LegacyHTMLScriptElement;\n\n                script.onload = event => resolve(event);\n                script.onreadystatechange = event => resolve(event);\n                script.onerror = event => {\n                    delete this._scripts[src];\n                    reject(event);\n                };\n                script.async = true;\n                script.src = src;\n\n                document.body.appendChild(script);\n            });\n        }\n\n        return this._scripts[src];\n    }\n}\n\ninterface LegacyHTMLScriptElement extends HTMLScriptElement {\n    // `onreadystatechange` is needed to support legacy IE\n    onreadystatechange(this: HTMLElement, event: Event): any;\n}\n","import ScriptLoader from './script-loader';\n\nexport default function createScriptLoader(): ScriptLoader {\n    return new ScriptLoader();\n}\n","import FormBuilder from './form-builder';\nimport FormPosterOptions from './form-poster-options';\nimport { isAbsoluteUrl, joinPaths } from './url-utils';\n\nexport default class FormPoster {\n    /**\n     * @internal\n     */\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _options?: FormPosterOptions\n    ) {}\n\n    postForm(url: string, data: { [key: string]: any }, callback?: () => void): void {\n        const form = this._formBuilder.build(this._prependHost(url), data);\n\n        window.addEventListener('unload', function handleUnload() {\n            window.removeEventListener('unload', handleUnload);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n        // In order to submit the form, the form must be attached to DOM.\n        document.body.appendChild(form);\n        form.submit();\n        document.body.removeChild(form);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || isAbsoluteUrl(url)) {\n            return url;\n        }\n\n        return joinPaths(this._options.host, url);\n    }\n}\n","export const API = 'PAYMENT_TYPE_API';\nexport const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n","export const APPLICATION_JSON = 'application/json';\n","export { default as includes } from './includes';\nexport { default as isNil } from './is-nil';\nexport { default as isObject } from './is-object';\nexport { default as omitEmptyStringAndNil } from './omit-emptystring-and-nil';\nexport { default as omitNil } from './omit-nil';\nexport { default as omitProperty } from './omit-property';\nexport { default as toNumber } from './to-number';\nexport { default as toSnakeCase } from './to-snake-case';\nexport { default as toString } from './to-string';\n"],"sourceRoot":""}