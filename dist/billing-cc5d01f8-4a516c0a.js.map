{"version":3,"sources":["webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["BillingForm_BillingForm","BillingForm","_this","_classCallCheck","this","state","isResettingAddress","addressFormRef","Object","react","handleSelectAddress","_ref","regeneratorRuntime","mark","_callee","address","_this$props","updateAddress","onUnhandledError","wrap","_context","prev","next","props","setState","t0","finish","stop","_x","apply","arguments","handleUseNewAddress","_this$props2","googleMapsApiKey","billingAddress","countriesWithAutocomplete","addresses","customer","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","hasAddresses","length","hasValidCustomerAddress","isValidCustomerAddress","countryCode","react_default","a","createElement","Form","autoComplete","Fieldset","ref","id","LoadingOverlay","isLoading","AddressSelect","selectedAddress","undefined","onUseNewAddress","onSelectAddress","AddressForm","formFields","OrderComments","className","Button","variant","Primary","disabled","type","TranslatedString","billing_BillingForm","withLanguage","formik_esm","handleSubmit","_ref2","onSubmit","mapPropsToValues","_ref3","customerMessage","_objectSpread","mapAddressToFormValues","orderComment","isInitialValid","_ref4","language","getAddressValidationSchema","isValidSync","validationSchema","_ref5","lib","enableReinitialize","Billing_Billing","Billing","Billing_classCallCheck","Billing_asyncToGenerator","addressValues","updateCheckout","navigateNextStep","promises","_objectWithoutProperties","mapAddressFromFormValues","isEqualAddress","push","Promise","all","initialize","onReady","lodash","_context2","_this$props3","isInitializing","Legend","testId","unmountContentWhenLoading","assign","__webpack_exports__","withCheckout","checkoutService","checkoutState","_checkoutState$data","data","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","_checkoutState$status","statuses","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkout","cart","_config$checkoutSetti","checkoutSettings","enableOrderComments","features","emptyData","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress"],"mappings":"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","file":"billing-cc5d01f8-4a516c0a.js","sourcesContent":["import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressValidationSchema, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    customer: Customer;\n    customerMessage: string;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    onSubmit(values: BillingFormValues): void;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n        } = this.props;\n\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset ref={ this.addressFormRef } id=\"checkoutBillingAddress\">\n                    { hasAddresses &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset>\n                    }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                setFieldValue={ setFieldValue }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                countryCode={ values.countryCode }\n                                formFields={ getFields(values.countryCode) }\n                            />\n                        </LoadingOverlay>\n                    }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments />\n                }\n\n                <div className=\"form-actions\">\n                    <Button\n                        variant={ ButtonVariant.Primary }\n                        isLoading={ isUpdating || isResettingAddress }\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        type=\"submit\"\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n    }: BillingFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    unmountContentWhenLoading\n                    isLoading={ isInitializing }\n                >\n                    <BillingForm\n                        { ...props }\n                        updateAddress={ updateAddress }\n                        onSubmit={ this.handleSubmit }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}