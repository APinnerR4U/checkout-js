{"version":3,"sources":["webpack://checkout/./src/app/ui/toggle/Toggle.tsx","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["props","toggle","event","isOpen","preventDefault","setState","state","openByDefault","render","children","this","onChange","renderInput","TextInput","field","autoComplete","name","id","type","labelContent","TranslatedString","FormField","input","Input","checked","value","className","Label","htmlFor","withLanguage","mapPropsToValues","email","defaultShouldSubscribe","shouldSubscribe","handleSubmit","values","onContinueAsGuest","validationSchema","language","translate","max","required","canSubscribe","checkoutButtons","isContinuingAsGuest","onChangeEmail","onShowLogin","Form","testId","Fieldset","legend","Legend","hidden","TranslatedHtml","BasicFormField","component","Button","isLoading","variant","Primary","onClick","EMAIL_REGEXP","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","additionalClassName","href","footer","rel","target","password","onSignIn","matches","canCancel","createAccountUrl","isSigningIn","onCancel","signInError","Alert","Error","error","body","mapErrorMessage","key","data","url","handleContinueAsGuest","formValues","continueAsGuest","firstName","onContinueAsGuestError","subscribeToNewsletter","draftEmail","undefined","handleSignIn","credentials","signIn","onSignInError","handleCancelSignIn","clearError","onChangeViewType","CustomerViewType","Guest","handleChangeEmail","handleShowLogin","Login","componentDidMount","onReady","viewType","renderLoginForm","renderGuestForm","checkEmbeddedSupport","checkoutButtonIds","deinitializeCustomer","initializeCustomer","onUnhandledError","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isGuestEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCheckout","getCustomer","getConfig","getSignInError","statuses","billingAddress","checkout","customer","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","links","createAccountLink","defaultNewsletterSignup","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout"],"mappings":"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","file":"customer-5d5c9e8f.js","sourcesContent":["import { Component, ReactNode } from 'react';\n\nexport interface ToggleProps {\n    openByDefault?: boolean;\n    children(props: any): ReactNode;\n}\n\nexport interface ToggleState {\n    isOpen: boolean;\n}\n\nexport default class Toggle extends Component<ToggleProps, ToggleState> {\n    constructor(props: ToggleProps) {\n        super(props);\n\n        this.state = { isOpen: !!props.openByDefault };\n    }\n\n    render(): ReactNode {\n        const { children } = this.props;\n        const { isOpen } = this.state;\n\n        return children({\n            isOpen,\n            toggle: this.toggle,\n        });\n    }\n\n    private toggle: (event: Event) => void = event => {\n        const { isOpen } = this.state;\n\n        event.preventDefault();\n\n        this.setState({ isOpen: !isOpen });\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean>;\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            checked={ field.value }\n            className=\"form-checkbox\"\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id=\"customer.guest_subscribe_to_newsletter_text\" />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isContinuingAsGuest: boolean;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    isContinuingAsGuest,\n    onChangeEmail,\n    onShowLogin,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        id=\"checkout-customer-guest\"\n        testId=\"checkout-customer-guest\"\n    >\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.guest_customer_text\" />\n                </Legend>\n            }\n        >\n            <p>\n                <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n            </p>\n\n            <div className=\"customerEmail-container\">\n                <div className=\"customerEmail-body\">\n                    <EmailField onChange={ onChangeEmail } />\n\n                    { canSubscribe && <BasicFormField\n                        component={ SubscribeField }\n                        name=\"shouldSubscribe\"\n                    /> }\n                </div>\n\n                <div className=\"form-actions customerEmail-action\">\n                    <Button\n                        className=\"customerEmail-button\"\n                        id=\"checkout-customer-continue\"\n                        isLoading={ isContinuingAsGuest }\n                        testId=\"customer-continue-as-guest-button\"\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"customer.continue_as_guest_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            <p>\n                <TranslatedString id=\"customer.login_text\" />\n                { ' ' }\n                <a\n                    data-test=\"customer-continue-button\"\n                    id=\"checkout-customer-login\"\n                    onClick={ onShowLogin }\n                >\n                    <TranslatedString id=\"customer.login_action\" />\n                </a>\n            </p>\n\n            { checkoutButtons }\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n    }) => ({\n        email,\n        shouldSubscribe: defaultShouldSubscribe,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        return object({ email });\n    },\n})(memo(GuestForm)));\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => (\n        <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>\n    ), [forgotPasswordUrl]);\n\n    return <FormField\n        footer={ footer }\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport mapErrorMessage from './mapErrorMessage';\nimport { EMAIL_REGEXP } from './validationPatterns';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    createAccountUrl: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    onCancel?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    createAccountUrl,\n    forgotPasswordUrl,\n    isSigningIn,\n    language,\n    onCancel,\n    onChangeEmail,\n    signInError,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        id=\"checkout-customer-returning\"\n        testId=\"checkout-customer-returning\"\n    >\n        <Fieldset legend={\n            <Legend hidden>\n                <TranslatedString id=\"customer.returning_customer_text\" />\n            </Legend>\n        }\n        >\n            { signInError && <Alert\n                testId=\"customer-login-error-message\"\n                type={ AlertType.Error }\n            >\n                { mapErrorMessage(signInError, key => language.translate(key)) }\n            </Alert> }\n\n            <p>\n                <TranslatedHtml\n                    data={ { url: createAccountUrl } }\n                    id=\"customer.create_account_to_continue_text\"\n                />\n            </p>\n\n            <EmailField onChange={ onChangeEmail } />\n\n            <PasswordField forgotPasswordUrl={ forgotPasswordUrl } />\n\n            <div className=\"form-actions\">\n                <Button\n                    id=\"checkout-customer-continue\"\n                    isLoading={ isSigningIn }\n                    testId=\"customer-continue-button\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"customer.sign_in_action\" />\n                </Button>\n\n                { canCancel && <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a> }\n            </div>\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) => object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n        password: string()\n            .required(language.translate('customer.password_required_error')),\n    }),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, GuestCredentials } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CustomerViewType from './CustomerViewType';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    subscribeToNewsletter?(data: { email: string; firstName?: string }): void;\n}\n\ninterface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    checkoutButtonIds: string[];\n    createAccountUrl: string;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isGuestEnabled: boolean;\n    isSigningIn: boolean;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps> {\n    private draftEmail?: string;\n\n    componentDidMount(): void {\n        const { onReady = noop } = this.props;\n\n        onReady();\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n\n        return (\n            <Fragment>\n                { viewType === CustomerViewType.Login && this.renderLoginForm() }\n                { viewType === CustomerViewType.Guest && this.renderGuestForm() }\n            </Fragment>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isContinuingAsGuest={ isContinuingAsGuest }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            createAccountUrl,\n            email,\n            forgotPasswordUrl,\n            isGuestEnabled,\n            isSigningIn,\n            signInError,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                createAccountUrl={ createAccountUrl }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onSignIn={ this.handleSignIn }\n                signInError={ signInError }\n            />\n        );\n    }\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            firstName,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n            subscribeToNewsletter = noop,\n        } = this.props;\n\n        if (canSubscribe && formValues.shouldSubscribe) {\n            subscribeToNewsletter({ email: formValues.email, firstName });\n        }\n\n        try {\n            await continueAsGuest({ email: formValues.email });\n            onContinueAsGuest();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getConfig },\n        errors: { getSignInError },\n        statuses: { isContinuingAsGuest, isSigningIn },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!billingAddress || !checkout || !customer || !config) {\n        return null;\n    }\n\n    return {\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        continueAsGuest: checkoutService.continueAsGuest,\n        createAccountUrl: config.links.createAccountLink,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        email: billingAddress.email || customer.email,\n        firstName: customer.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}