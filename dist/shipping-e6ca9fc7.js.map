{"version":3,"file":"shipping-e6ca9fc7.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/form/connectFormik.tsx","webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/shipping/getShippingMethodId.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/findConsignment.ts","webpack://checkout/./packages/core/src/app/shipping/getShippableLineItems.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./packages/core/src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/Accordion.tsx","webpack://checkout/./packages/core/src/app/ui/form/Checklist.tsx","webpack://checkout/./packages/core/src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/ChecklistItem.tsx"],"sourcesContent":["import { connect } from 'formik';\nimport React, { ComponentType, FunctionComponent, memo } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<TProps extends ConnectFormikProps<TValues>, TValues = any>(\n    OriginalComponent: ComponentType<TProps>,\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        (props) => <OriginalComponent {...props} />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) =>\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps),\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<\n        Omit<TProps, keyof ConnectFormikProps<TValues>>\n    >;\n\n    DecoratedComponent.displayName = `ConnectFormik(${\n        OriginalComponent.displayName || OriginalComponent.name\n    })`;\n\n    return DecoratedComponent;\n}\n","export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [anchorSiblings[0], anchor.text, anchorSiblings[1]];\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport { TranslatedStringProps } from './TranslatedString';\nimport withLanguage, { WithLanguageProps } from './withLanguage';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ? (\n        <>\n            {parsedString[0]}\n            <a data-test={testId} href=\"#\" onClick={preventDefault(onClick)}>\n                {parsedString[1]}\n            </a>\n            {parsedString[2]}\n        </>\n    ) : (\n        <>{translatedString}</>\n    );\n};\n\nexport default withLanguage(TranslatedLink);\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout } from '@bigcommerce/checkout-sdk';\n\nimport { getPreselectedPayment } from '../payment';\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon', 'amazonpay'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1\n        ? preselectedPayment.providerId\n        : undefined;\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string,\n): Consignment | undefined {\n    return find(consignments, (consignment) => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { isNil, reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[],\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) =>\n            !item.addedByPromotion && isNil(item.parentId)\n                ? result.concat(...splitItem(item, consignments, i))\n                : result,\n        [] as ShippableItem[],\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number,\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(\n    availableShippingOptions: ShippingOption[],\n): ShippingOption | undefined {\n    if (!availableShippingOptions) {\n        return;\n    }\n\n    return availableShippingOptions.find(\n        ({ isRecommended }: { isRecommended: any }) => isRecommended,\n    );\n}\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(\n        () => (\n            <div className=\"shippingOptionLabel\">\n                <StaticShippingOption displayAdditionalInformation={true} method={shippingOption} />\n            </div>\n        ),\n        [shippingOption],\n    );\n\n    return (\n        <ChecklistItem\n            htmlId={`shippingOptionRadio-${consignmentId}-${shippingOption.id}`}\n            label={renderLabel}\n            value={shippingOption.id}\n        />\n    );\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n}) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            onSelectedOption(consignmentId, value);\n        },\n        [consignmentId, onSelectedOption],\n    );\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={isLoading}>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={selectedShippingOptionId}\n                name={inputName}\n                onSelect={handleSelect}\n            >\n                {shippingOptions.map((shippingOption) => (\n                    <ShippingOptionListItem\n                        consignmentId={consignmentId}\n                        key={shippingOption.id}\n                        shippingOption={shippingOption}\n                    />\n                ))}\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<\n    ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>\n> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOptions);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments || !consignments.length || !shouldShowShippingOptions) {\n            return (\n                <LoadingOverlay isLoading={isLoading()}>\n                    {this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={\n                                methodId || isMultiShippingMode\n                                    ? 'shipping.select_shipping_address_text'\n                                    : 'shipping.enter_shipping_address_text'\n                            }\n                        />,\n                    )}\n                </LoadingOverlay>\n            );\n        }\n\n        return (\n            <>\n                {consignments.map((consignment) => (\n                    <div className=\"shippingOptions-container form-fieldset\" key={consignment.id}>\n                        {isMultiShippingMode && this.renderConsignment(consignment)}\n\n                        <ShippingOptionsList\n                            consignmentId={consignment.id}\n                            inputName={getRadioInputName(consignment.id)}\n                            isLoading={isLoading(consignment.id)}\n                            onSelectedOption={selectShippingOption}\n                            selectedShippingOptionId={\n                                consignment.selectedShippingOption &&\n                                consignment.selectedShippingOption.id\n                            }\n                            shippingOptions={consignment.availableShippingOptions}\n                        />\n\n                        {(!consignment.availableShippingOptions ||\n                            !consignment.availableShippingOptions.length) && (\n                            <LoadingOverlay\n                                hideContentWhenLoading\n                                isLoading={isLoading(consignment.id)}\n                            >\n                                {this.renderNoShippingOptions(invalidShippingMessage)}\n                            </LoadingOverlay>\n                        )}\n                    </div>\n                ))}\n            </>\n        );\n    }\n\n    private selectDefaultShippingOptions: (state: CheckoutSelectors) => void = async ({ data }) => {\n        const { selectShippingOption, setFieldValue } = this.props;\n\n        const consignment = (data.getConsignments() || []).find(\n            ({ selectedShippingOption, availableShippingOptions: shippingOptions }) =>\n                !selectedShippingOption && shippingOptions,\n        );\n\n        if (!consignment || !consignment.availableShippingOptions) {\n            return;\n        }\n\n        const { availableShippingOptions, id } = consignment;\n        const recommendedOption = getRecommendedShippingOption(availableShippingOptions);\n        const singleShippingOption =\n            availableShippingOptions.length === 1 && availableShippingOptions[0];\n        const defaultShippingOption = recommendedOption || singleShippingOption;\n\n        if (!defaultShippingOption) {\n            return;\n        }\n\n        await selectShippingOption(id, defaultShippingOption.id);\n        setFieldValue(`shippingOptionIds.${id}`, defaultShippingOption.id);\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p\n                    aria-live=\"polite\"\n                    className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\"\n                    role=\"alert\"\n                >\n                    {message}\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={consignment.shippingAddress} />\n\n                <StaticConsignmentItemList cart={cart} consignment={consignment} />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach((consignment) => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption\n                ? consignment.selectedShippingOption.id\n                : '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { map, sortBy, uniq } from 'lodash';\nimport { createSelector } from 'reselect';\n\nimport { CheckoutContextProps, withCheckout } from '../../checkout';\nimport getShippableLineItems from '../getShippableLineItems';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): Promise<CheckoutSelectors>;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    (subscribe) => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    },\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (\n        isUpdatingAddress,\n        isLoadingShippingOptions,\n        isSelectingShippingOption,\n        isUpdatingConsignment,\n        isCreatingConsignments,\n    ) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    },\n);\n\nconst sortConsignments = (cart: Cart, unsortedConsignments: Consignment[]): Consignment[] => {\n    if (unsortedConsignments.length < 2) {\n        return unsortedConsignments;\n    }\n\n    const shippableItems = getShippableLineItems(cart, unsortedConsignments);\n    const consignmentsOrder = uniq(map(shippableItems, 'consignment.id'));\n\n    return sortBy(unsortedConsignments, (consignment) => consignmentsOrder.indexOf(consignment.id));\n};\n\nexport function mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps,\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: { getCart, getConsignments, getConfig, getCustomer, getCheckout },\n        statuses: { isSelectingShippingOption },\n    } = checkoutState;\n\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const consignments = sortConsignments(cart, getConsignments() || []);\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({\n            checkoutService,\n            checkoutState,\n        }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return (\n            <>\n                <Fieldset\n                    id=\"checkout-shipping-options\"\n                    legend={\n                        <>\n                            <Legend>\n                                <TranslatedString id=\"shipping.shipping_method_label\" />\n                            </Legend>\n\n                            {cartHasChanged && (\n                                <Alert type={AlertType.Error}>\n                                    <strong>\n                                        <TranslatedString id=\"shipping.cart_change_error\" />\n                                    </strong>\n                                </Alert>\n                            )}\n                        </>\n                    }\n                >\n                    <ShippingOptions\n                        isMultiShippingMode={isMultiShippingMode}\n                        isUpdatingAddress={isLoading}\n                        shouldShowShippingOptions={shouldShowShippingOptions}\n                    />\n                </Fieldset>\n\n                {shouldShowOrderComments && <OrderComments />}\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={shouldDisableSubmit}\n                        id=\"checkout-shipping-continue\"\n                        isLoading={isLoading}\n                        type=\"submit\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                />\n\n                <Form>\n                    <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul>\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { DynamicFormField, Fieldset } from '../ui/form';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    formFields: FormField[];\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n    onFieldChange(fieldName: string, value: string): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { containerId, formFields, methodId } = this.props;\n\n        return (\n            <>\n                <div\n                    className={`widget address-widget widget--${methodId}`}\n                    id={containerId}\n                    tabIndex={-1}\n                />\n                <Fieldset>\n                    {formFields\n                        .filter(({ custom }) => custom)\n                        .map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                </Fieldset>\n            </>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default RemoteShippingAddress;\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        onUnhandledError = noop,\n        isShippingStepPending,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n\n            return (\n                <RemoteShippingAddress\n                    containerId={containerId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={shippingAddress}\n                    buttonId={editAddressButtonId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    isLoading={isShippingStepPending}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazon', 'amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n        } = this.props;\n\n        return isMultiShippingMode ? (\n            <MultiShippingForm\n                addresses={addresses}\n                assignItem={assignItem}\n                cart={cart}\n                cartHasChanged={cartHasChanged}\n                consignments={consignments}\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                createCustomerAddress={createCustomerAddress}\n                customerMessage={customerMessage}\n                defaultCountryCode={shippingAddress?.countryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isGuest={isGuest}\n                isLoading={isLoading}\n                onCreateAccount={onCreateAccount}\n                onSignIn={onSignIn}\n                onSubmit={onMultiShippingSubmit}\n                onUnhandledError={onUnhandledError}\n                onUseNewAddress={onUseNewAddress}\n                shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\n                shouldShowOrderComments={shouldShowOrderComments}\n            />\n        ) : (\n            <SingleShippingForm\n                addresses={addresses}\n                cartHasChanged={cartHasChanged}\n                consignments={consignments}\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                customerMessage={customerMessage}\n                deinitialize={deinitialize}\n                deleteConsignments={deleteConsignments}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                initialize={initialize}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isLoading={isLoading}\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingStepPending={isShippingStepPending}\n                methodId={methodId}\n                onSubmit={onSingleShippingSubmit}\n                onUnhandledError={onUnhandledError}\n                shippingAddress={shippingAddress}\n                shouldShowOrderComments={shouldShowOrderComments}\n                shouldShowSaveAddress={shouldShowSaveAddress}\n                signOut={signOut}\n                updateAddress={updateAddress}\n            />\n        );\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={\n                    isMultiShippingMode\n                        ? isGuest\n                            ? 'shipping.multishipping_address_heading_guest'\n                            : 'shipping.multishipping_address_heading'\n                        : 'shipping.shipping_address_heading'\n                }\n            />\n        </Legend>\n\n        {shouldShowMultiShipping && (\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={preventDefault(onMultiShippingChange)}\n            >\n                <TranslatedString\n                    id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                />\n            </a>\n        )}\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { CheckoutContextProps, withCheckout } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const { isInitializing } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n\n                <LoadingOverlay isLoading={isInitializing} unmountContentWhenLoading>\n                    <ShippingForm\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1 && shippableItemsCount < 50;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne((selectedItemId) => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const { children, className = 'accordion', defaultSelectedItemId } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={this.getContextValue(selectedItemId)}>\n                <ul className={className}>{children}</ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = (id) => {\n        const { isDisabled, onSelect = noop } = this.props;\n\n        if (isDisabled) {\n            return;\n        }\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, {\n    createContext,\n    FunctionComponent,\n    memo,\n    ReactNode,\n    useCallback,\n    useMemo,\n} from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    isDisabled?: boolean;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps & ConnectFormikProps<{ [key: string]: string }>\n> = ({ formik: { setFieldValue }, name, onSelect = noop, ...props }) => {\n    const handleSelect = useCallback(\n        (value: string) => {\n            setFieldValue(name, value);\n            onSelect(value);\n        },\n        [name, onSelect, setFieldValue],\n    );\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={contextValue}>\n            <Accordion\n                {...props}\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={handleSelect}\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li\n            className={classNames(className, { [classNameSelected]: isSelected })}\n            data-test={`accordion-item_${itemId}`}\n        >\n            <div className={classNames(headerClassName, { [headerClassNameSelected]: isSelected })}>\n                {headerContent({ isSelected, onToggle })}\n            </div>\n\n            {children && (\n                <CSSTransition\n                    addEndListener={transitionEndListener}\n                    classNames={bodyClassName}\n                    in={isSelected}\n                    mountOnEnter\n                    timeout={{}}\n                    unmountOnExit\n                >\n                    <div className={bodyClassName}>{children}</div>\n                </CSSTransition>\n            )}\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            {...props}\n            checked={isSelected}\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={id}\n            type=\"radio\"\n        />\n\n        <Label htmlFor={id}>{children}</Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useContext } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    isDisabled?: boolean;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    isDisabled,\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(\n        memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n            <ChecklistItemInput\n                {...field}\n                disabled={isDisabled}\n                id={htmlId}\n                isSelected={field.value === value}\n                value={value}\n            >\n                {label instanceof Function ? label(isSelected) : label}\n            </ChecklistItemInput>\n        )),\n        [htmlId, isDisabled, label, value],\n    );\n\n    const handleChange = useCallback(\n        memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n            if (value === selectedValue) {\n                onToggle(value);\n            }\n        }),\n        [],\n    );\n\n    const renderHeaderContent = useCallback(\n        ({ isSelected, onToggle }: AccordionItemHeaderProps) => (\n            <BasicFormField\n                className=\"form-checklist-option\"\n                name={name}\n                onChange={handleChange(onToggle)}\n                render={renderInput(isSelected)}\n            />\n        ),\n        [handleChange, name, renderInput],\n    );\n\n    return (\n        <AccordionItem\n            {...rest}\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={renderHeaderContent}\n            itemId={value}\n        >\n            {content}\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n"],"names":["connectFormik","OriginalComponent","InnerComponent","memo","props","prevFormik","prevProps","nextFormik","nextProps","DecoratedComponent","connect","displayName","name","parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","data","id","language","onClick","testId","translatedString","translate","parsedString","length","href","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","getPreselectedPayment","indexOf","providerId","undefined","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","preventDefault","TranslatedString","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","itemId","find","consignment","includes","lineItemIds","getShippableLineItems","cart","reduce","lineItems","physicalItems","result","item","i","addedByPromotion","isNil","parentId","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","getRecommendedShippingOption","availableShippingOptions","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","method","ChecklistItem","htmlId","label","inputName","shippingOptions","selectedShippingOptionId","onSelectedOption","handleSelect","Checklist","defaultSelectedItemId","onSelect","selectDefaultShippingOptions","this","selectShippingOption","getConsignments","selectedShippingOption","recommendedOption","singleShippingOption","defaultShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","render","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","role","StaticAddress","StaticConsignmentItemList","PureComponent","noop","shippingOptionIds","forEach","ShippingOptionsForm","subscribeToConsignmentsSelector","createSelector","subscribe","subscriber","isLoadingSelector","_","isLoadingShippingOptions","isSelectingShippingOption","isUpdatingConsignment","isCreatingConsignments","isUpdatingAddress","withCheckout","checkoutService","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","config","unsortedConsignments","shippableItems","consignmentsOrder","uniq","sortBy","sortConsignments","checkoutSettings","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","ShippingOptions","OrderComments","updateShippableItems","items","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItems","filter","matchingCartItemIds","findNewItemId","state","handleCloseErrorModal","setState","createCustomerAddressError","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","onCreateAccount","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","handleFieldValueChange","onFieldChange","initialize","deinitialize","containerId","tabIndex","field","DynamicFormField","parentFieldName","addressFieldName","fieldName","fieldValue","formFieldName","custom","handleChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","ShippingAddressForm","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","size","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","amazon","container","onError","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","enableOrderComments","features","hasMultiShippingEnabled","shippableItemsCount","assignItemsToAddress","deinitializeShipping","signOutCustomer","unassignItemsToAddress","Shipping","createContext","onToggle","getContextValue","selectedItemId","handleToggleItem","isDisabled","children","AccordionContext","ChecklistContext","contextValue","Provider","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","isSelected","transitionEndListener","node","done","addEventListener","CSSTransition","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","checked","Label","htmlFor","content","kebabCase","rest","renderInput","Function","selectedValue","renderHeaderContent","BasicFormField"],"sourceRoot":""}