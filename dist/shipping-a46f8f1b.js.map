{"version":3,"sources":["webpack://checkout/./src/app/payment/paymentMethod/PaymentMethodId.ts","webpack://checkout/./src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./src/app/payment/paymentMethod/SignOutLink.tsx","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./src/app/shipping/getShippingMethodId.ts","webpack://checkout/./src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./src/app/shipping/findConsignment.ts","webpack://checkout/./src/app/shipping/getShippableLineItems.ts","webpack://checkout/./src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsList.tsx","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptionsForm.tsx","webpack://checkout/./src/app/shipping/getRecommendedShippingOption.ts","webpack://checkout/./src/app/shipping/shippingOption/ShippingOptions.tsx","webpack://checkout/./src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./src/app/shipping/updateShippableItems.ts","webpack://checkout/./src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./src/app/shipping/RemoteShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./src/app/shipping/ShippingAddress.tsx","webpack://checkout/./src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingForm.tsx","webpack://checkout/./src/app/shipping/ShippingHeader.tsx","webpack://checkout/./src/app/shipping/Shipping.tsx"],"names":["PaymentMethodId","PaymentMethodType","AccordionContext","onToggle","getPaymentMethodName","language","method","name","id","Affirm","translate","Afterpay","Amazon","Klarna","Paypal","PaypalCredit","Chasepay","VisaCheckout","GooglePay","getTranslatedPaymentMethodName","MultiOption","config","displayName","onSignOut","className","href","onClick","data","providerName","state","getContextValue","selectedItemId","handleToggleItem","onSelect","setState","render","children","defaultSelectedItemId","Provider","value","this","ChecklistContext","undefined","connectFormik","setFieldValue","handleSelect","contextValue","props","additionalClassName","labelContent","onChange","renderField","field","checked","label","testId","OriginalComponent","InnerComponent","formik","prevFormik","nextFormik","prevProps","nextProps","DecoratedComponent","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","node","done","addEventListener","target","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","type","Label","htmlFor","content","htmlId","renderInput","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","rest","message","getLanguageService","UnassignItemError","prototype","CustomError","getShippingMethodId","checkout","preselectedPayment","payments","find","payment","isGiftCertificatePayment","isStoreCreditPayment","providerId","getPreselectedPayment","indexOf","title","AssignItemInvalidAddressError","AssignItemFailedError","findConsignment","consignments","consignment","lineItemIds","getShippableLineItems","cart","lineItems","physicalItems","result","item","i","addedByPromotion","concat","lineItemIndex","splitItems","quantity","key","variantId","productId","splitItem","imageUrl","options","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","address","handleSelectAddress","alt","src","map","nameId","optionName","AddressSelect","selectedAddress","shippingAddress","ShippingOptionListItem","consignmentId","shippingOption","renderLabel","StaticShippingOption","displayAdditionalInformation","ChecklistItem","inputName","isLoading","shippingOptions","selectedShippingOptionId","onSelectedOption","length","LoadingOverlay","Checklist","selectDefaultShippingOption","selectShippingOption","isSelectingShippingOption","getConsignments","selectedShippingOption","defaultShippingOption","availableShippingOptions","option","isRecommended","getRecommendedShippingOption","componentDidMount","subscribeToConsignments","unsubscribe","componentWillUnmount","isMultiShippingMode","shouldShowShippingOptions","invalidShippingMessage","methodId","slice","sort","a","b","renderConsignment","hideContentWhenLoading","renderNoShippingOptions","TranslatedString","StaticAddress","StaticConsignmentItemList","handleSubmit","enableReinitialize","mapPropsToValues","shippingOptionIds","forEach","subscribeToConsignmentsSelector","checkoutService","subscribe","subscriber","isLoadingSelector","_","isUpdatingAddress","statuses","isLoadingShippingOptions","isUpdatingConsignment","isCreatingConsignments","withCheckout","checkoutState","getCart","getConfig","getCustomer","getCheckout","customer","shippingQuoteFailedMessage","selectConsignmentShippingOption","cartHasChanged","shouldShowOrderComments","shouldDisableSubmit","Fieldset","legend","Legend","Alert","Error","ShippingOptions","OrderComments","Button","disabled","variant","Primary","items","itemKey","assignItem","onUnhandledError","getFields","isValidAddress","countryCode","syncItems","hasSelectedShippingOptions","updatedItemIndex","cartItemIds","updatedConsignment","isEqualAddress","newId","matchingCartItemIds","filter","includes","findNewItemId","updatedItems","updateShippableItems","currentItems","findIndex","getDerivedStateFromProps","getShippableItemsCount","isGuest","onSignIn","createAccountUrl","preventDefault","TranslatedHtml","url","Form","hasUnassignedLineItems","withLanguage","values","onSubmit","orderComment","customerMessage","CheckboxFormField","Promise","initialize","deinitialize","containerId","tabIndex","SignOutLink","addressFieldName","fieldName","fieldValue","formFieldName","formFields","custom","onFieldChange","handleAutocompleteToggle","isOpen","inputValue","onAddressSelect","countries","countriesWithAutocomplete","googleMapsApiKey","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","AddressForm","formAddress","onAutocompleteToggle","signOut","handleSignOutRequest","window","location","reload","initializeShipping","defaultOptions","amazon","container","onError","SHIPPING_ADDRESS_FIELDS","SHIPPING_AUTOSAVE_DELAY","isResettingAddress","isUpdatingShippingData","hasRequestedShippingOptions","isValid","handleFieldChange","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","includeShippingOptions","params","include","autoComplete","addressForm","updatedShippingAddress","mapAddressFromFormValues","billingSameAsShipping","isInitialValid","getAddressValidationSchema","isValidSync","validationSchema","formValues","onMultiShippingSubmit","onSingleShippingSubmit","onMultiShippingChange","shouldShowMultiShipping","handleSingleShippingSubmit","updateCheckout","updateShippingAddress","updateBillingAddress","navigateNextStep","billingAddress","addressValues","promises","push","all","unassignItem","handleMultiShippingSubmit","isInitializing","loadShippingAddressFields","loadShippingOptions","onReady","initializeShippingMethod","deinitializeShippingMethod","onToggleMultiShipping","shippingFormProps","deleteConsignmentsSelector","deleteConsignment","getShippingAddress","mapToShippingProps","getBillingAddress","getShippingAddressFields","getShippingCountries","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","checkoutSettings","enableOrderComments","features","hasMultiShippingEnabled","links","shippableItemsCount","assignItemsToAddress","createAccountLink","deinitializeShipping","signOutCustomer","unassignItemsToAddress"],"mappings":"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","file":"shipping-a46f8f1b.js","sourcesContent":["enum PaymentMethodId {\n    Adyen = 'adyen',\n    AdyenV2 = 'adyenv2',\n    Affirm = 'affirm',\n    Afterpay = 'afterpay',\n    Amazon = 'amazon',\n    Barclaycard = 'barclaycard',\n    Braintree = 'braintree',\n    BraintreeGooglePay = 'googlepaybraintree',\n    BraintreeVisaCheckout = 'braintreevisacheckout',\n    CCAvenueMars = 'ccavenuemars',\n    ChasePay = 'chasepay',\n    Converge = 'converge',\n    Klarna = 'klarna',\n    Masterpass = 'masterpass',\n    PaypalExpress = 'paypalexpress',\n    PaypalPaymentsPro = 'paypal',\n    SagePay = 'sagepay',\n    SquareV2 = 'squarev2',\n    StripeGooglePay = 'googlepaystripe',\n    StripeV3 = 'stripev3',\n    Zip = 'zip',\n}\n\nexport default PaymentMethodId;\n","enum PaymentMethodType {\n    Barclaycard = 'barclaycard',\n    Chasepay = 'chasepay',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService\n): (method: Partial<PaymentMethod> & Pick<PaymentMethod, 'id'>) => string {\n    return method => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                // FIXME: I'm not entirely sure why we have to do this. But for some\n                // reason this is required for Masterpass provided by Square.\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                method.method ||\n                method.id\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService\n): (method: Partial<PaymentMethod> & Pick<PaymentMethod, 'id'>) => string | undefined {\n    return method => {\n        if (method.id === PaymentMethodId.Affirm) {\n            return language.translate('payment.affirm_name_text');\n        }\n\n        if (method.id === PaymentMethodId.Afterpay) {\n            return language.translate('payment.afterpay_name_text');\n        }\n\n        if (method.id === PaymentMethodId.Amazon) {\n            return language.translate('payment.amazon_name_text');\n        }\n\n        if (method.id === PaymentMethodId.Klarna) {\n            return language.translate('payment.klarna_name_text');\n        }\n\n        if (method.method === PaymentMethodType.Paypal) {\n            return language.translate('payment.paypal_name_text');\n        }\n\n        if (method.method === PaymentMethodType.PaypalCredit) {\n            return language.translate('payment.paypal_credit_name_text');\n        }\n\n        if (method.method === PaymentMethodType.Chasepay) {\n            return language.translate('payment.chasepay_name_text');\n        }\n\n        if (method.method === PaymentMethodType.VisaCheckout) {\n            return language.translate('payment.vco_name_text');\n        }\n\n        if (method.method === PaymentMethodType.GooglePay) {\n            return language.translate('payment.google_pay_name_text');\n        }\n    };\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '../../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../../locale';\n\nimport getPaymentMethodName from './getPaymentMethodName';\n\nexport interface SignOutLinkProps {\n    method: Partial<PaymentMethod> & Pick<PaymentMethod, 'id'>;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps & WithLanguageProps> = ({\n    language,\n    method,\n    onSignOut,\n}) => (\n    <div className=\"signout-link\">\n        <TranslatedString id=\"remote.sign_out_before_action\" />\n\n        { ' ' }\n\n        <a href=\"#\" onClick={ preventDefault(onSignOut) }>\n            <TranslatedString\n                data={ { providerName: getPaymentMethodName(language)(method) } }\n                id=\"remote.sign_out_action\"\n            />\n        </a>\n\n        { ' ' }\n\n        <TranslatedString id=\"remote.sign_out_after_action\" />\n    </div>\n);\n\nexport default withLanguage(SignOutLink);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { onSelect = noop } = this.props;\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Checkout, CheckoutPayment } from '@bigcommerce/checkout-sdk';\n\nimport { isGiftCertificatePayment } from '../giftCertificate';\nimport { isStoreCreditPayment } from '../payment/storeCredit';\n\nfunction getPreselectedPayment(checkout: Checkout): CheckoutPayment | undefined {\n    const payments = checkout && checkout.payments ? checkout.payments : [];\n\n    return payments.find(payment =>\n        !isGiftCertificatePayment(payment)\n        && !isStoreCreditPayment(payment)\n        && !!payment.providerId\n    );\n}\n\nexport default function getShippingMethodId(checkout: Checkout): string | undefined {\n    const SHIPPING_METHOD_IDS = ['amazon'];\n    const preselectedPayment = getPreselectedPayment(checkout);\n\n    return preselectedPayment && SHIPPING_METHOD_IDS.indexOf(preselectedPayment.providerId) > -1 ?\n        preselectedPayment.providerId :\n        undefined;\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate('shipping.assign_item_invalid_address_error_heading'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { setPrototypeOf, CustomError } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Consignment } from '@bigcommerce/checkout-sdk';\nimport { find, includes } from 'lodash';\n\nexport default function findConsignment(\n    consignments: Consignment[],\n    itemId: string\n): Consignment | undefined {\n    return find(consignments, consignment => includes(consignment.lineItemIds, itemId));\n}\n","import { Cart, Consignment, PhysicalItem } from '@bigcommerce/checkout-sdk';\nimport { reduce } from 'lodash';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport default function getShippableLineItems(\n    cart: Cart,\n    consignments: Consignment[]\n): ShippableItem[] {\n    return reduce(\n        (cart && cart.lineItems.physicalItems) || [],\n        (result, item, i) => (\n            !item.addedByPromotion ?\n                result.concat(...splitItem(item, consignments, i)) :\n                result\n        ),\n        [] as ShippableItem[]\n    );\n}\n\nfunction splitItem(\n    item: PhysicalItem,\n    consignments: Consignment[],\n    lineItemIndex: number\n): ShippableItem[] {\n    let splitItems: ShippableItem[] = [];\n    const consignment = findConsignment(consignments, item.id as string);\n\n    for (let i = 0; i < item.quantity; i++) {\n        splitItems = splitItems.concat({\n            ...item,\n            key: `${item.variantId}-${item.productId}-${lineItemIndex}-${i}`,\n            consignment,\n            quantity: 1,\n        });\n    }\n\n    return splitItems;\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: {\n        id,\n        key,\n        imageUrl,\n        quantity,\n        name,\n        options,\n        consignment,\n    },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback((address: Address) => {\n        onUseNewAddress(address, id as string);\n    }, [\n        id,\n        onUseNewAddress,\n    ]);\n\n    const handleSelectAddress = useCallback((address: Address) => {\n        onSelectAddress(address, id as string, key);\n    }, [\n        id,\n        key,\n        onSelectAddress,\n    ]);\n\n    return <div className=\"consignment\">\n        <figure className=\"consignment-product-figure\">\n            { imageUrl &&\n                <img alt={ name } src={ imageUrl } /> }\n        </figure>\n\n        <div className=\"consignment-product-body\">\n            <h5 className=\"optimizedCheckout-contentPrimary\">\n                { `${quantity} x ${name}` }\n            </h5>\n\n            { (options || []).map(({ name: optionName, value, nameId }) =>\n                <ul\n                    className=\"product-options optimizedCheckout-contentSecondary\"\n                    data-test=\"consigment-item-product-options\"\n                    key={ nameId }\n                >\n                    <li className=\"product-option\">\n                        { `${optionName } ${value}` }\n                    </li>\n                </ul>\n            ) }\n\n            <AddressSelect\n                addresses={ addresses }\n                onSelectAddress={ handleSelectAddress }\n                onUseNewAddress={ handleUseNewAddress }\n                selectedAddress={ consignment && consignment.shippingAddress }\n            />\n        </div>\n    </div>;\n};\n\nexport default memo(ItemAddressSelect);\n","import { ShippingOption } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { EMPTY_ARRAY } from '../../common/utility';\nimport { Checklist, ChecklistItem } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nimport StaticShippingOption from './StaticShippingOption';\n\ninterface ShippingOptionListItemProps {\n    consignmentId: string;\n    shippingOption: ShippingOption;\n}\n\nconst ShippingOptionListItem: FunctionComponent<ShippingOptionListItemProps> = ({\n    consignmentId,\n    shippingOption,\n}) => {\n    const renderLabel = useCallback(() => (\n        <div className=\"shippingOptionLabel\">\n            <StaticShippingOption displayAdditionalInformation={ true } method={ shippingOption } />\n        </div>\n    ), [shippingOption]);\n\n    return <ChecklistItem\n        htmlId={ `shippingOptionRadio-${consignmentId}-${shippingOption.id}` }\n        label={ renderLabel }\n        value={ shippingOption.id }\n    />;\n};\n\nexport interface ShippingOptionListProps {\n    consignmentId: string;\n    inputName: string;\n    isLoading: boolean;\n    selectedShippingOptionId?: string;\n    shippingOptions?: ShippingOption[];\n    onSelectedOption(consignmentId: string, shippingOptionId: string): void;\n}\n\nconst ShippingOptionsList: FunctionComponent<ShippingOptionListProps> = ({\n    consignmentId,\n    inputName,\n    isLoading,\n    shippingOptions = EMPTY_ARRAY,\n    selectedShippingOptionId,\n    onSelectedOption,\n }) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelectedOption(consignmentId, value);\n    }, [\n        consignmentId,\n        onSelectedOption,\n    ]);\n\n    if (!shippingOptions.length) {\n        return null;\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isLoading }>\n            <Checklist\n                aria-live=\"polite\"\n                defaultSelectedItemId={ selectedShippingOptionId }\n                name={ inputName }\n                onSelect={ handleSelect }\n            >\n                { shippingOptions.map(shippingOption => (\n                    <ShippingOptionListItem\n                        consignmentId={ consignmentId }\n                        key={ shippingOption.id }\n                        shippingOption={ shippingOption }\n                    />\n                )) }\n            </Checklist>\n        </LoadingOverlay>\n    );\n};\n\nexport default memo(ShippingOptionsList);\n","import { CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../../address';\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport StaticConsignmentItemList from '../StaticConsignmentItemList';\n\nimport { ShippingOptionsProps, WithCheckoutShippingOptionsProps } from './ShippingOptions';\nimport './ShippingOptionsForm.scss';\nimport ShippingOptionsList from './ShippingOptionsList';\n\nexport type ShippingOptionsFormProps = ShippingOptionsProps & WithCheckoutShippingOptionsProps;\n\nclass ShippingOptionsForm extends PureComponent<ShippingOptionsFormProps & FormikProps<ShippingOptionsFormValues>> {\n    private unsubscribe?: () => void;\n\n    componentDidMount(): void {\n        const { subscribeToConsignments } = this.props;\n\n        this.unsubscribe = subscribeToConsignments(this.selectDefaultShippingOption);\n    }\n\n    componentWillUnmount(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = undefined;\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            consignments,\n            isMultiShippingMode,\n            selectShippingOption,\n            isLoading,\n            shouldShowShippingOptions,\n            invalidShippingMessage,\n            methodId,\n        } = this.props;\n\n        if (!consignments ||\n            !consignments.length ||\n            !shouldShowShippingOptions\n        ) {\n            return (\n                <LoadingOverlay isLoading={ isLoading() }>\n                    { this.renderNoShippingOptions(\n                        <TranslatedString\n                            id={ methodId || isMultiShippingMode ?\n                                'shipping.select_shipping_address_text' :\n                                'shipping.enter_shipping_address_text' }\n                        />\n                    ) }\n                </LoadingOverlay>\n            );\n        }\n\n        return <>\n            { consignments\n                .slice(0, isMultiShippingMode ? undefined : 1)\n                .sort((a, b) => (a.id > b.id ? -1 : 1))\n                .map(consignment => (\n                <div className=\"shippingOptions-container form-fieldset\" key={ consignment.id }>\n                        { isMultiShippingMode && this.renderConsignment(consignment) }\n\n                        <ShippingOptionsList\n                            consignmentId={ consignment.id }\n                            inputName={ getRadioInputName(consignment.id) }\n                            isLoading={ isLoading(consignment.id) }\n                            onSelectedOption={ selectShippingOption }\n                            selectedShippingOptionId={ consignment.selectedShippingOption && consignment.selectedShippingOption.id }\n                            shippingOptions={ consignment.availableShippingOptions }\n                        />\n\n                        { (!consignment.availableShippingOptions || !consignment.availableShippingOptions.length) &&\n                            <LoadingOverlay hideContentWhenLoading isLoading={ isLoading(consignment.id) }>\n                                { this.renderNoShippingOptions(invalidShippingMessage) }\n                            </LoadingOverlay> }\n                    </div>\n                )) }\n        </>;\n    }\n\n    private selectDefaultShippingOption: (state: CheckoutSelectors) => void = ({ data }) => {\n        const {\n            selectShippingOption,\n            isSelectingShippingOption,\n        } = this.props;\n\n        (data.getConsignments() || []).map(consignment => {\n            const {\n                id,\n                selectedShippingOption,\n            } = consignment;\n\n            if (selectedShippingOption || isSelectingShippingOption(consignment.id)) {\n                return;\n            }\n\n            const recommendedOption = getRecommendedShippingOption(consignment);\n            const defaultShippingOption = recommendedOption || (\n                consignment.availableShippingOptions &&\n                consignment.availableShippingOptions.length === 1 ?\n                    consignment.availableShippingOptions[0] :\n                    undefined\n                );\n\n            if (!defaultShippingOption) {\n                return;\n            }\n\n            return selectShippingOption(id, defaultShippingOption.id);\n        });\n    };\n\n    private renderNoShippingOptions(message: ReactNode): ReactNode {\n        return (\n            <div className=\"shippingOptions-panel optimizedCheckout-overlay\">\n                <p className=\"shippingOptions-panel-message optimizedCheckout-primaryContent\">\n                    { message }\n                </p>\n            </div>\n        );\n    }\n\n    private renderConsignment(consignment: Consignment): ReactNode {\n        const { cart } = this.props;\n\n        return (\n            <div className=\"staticConsignment\">\n                <strong>\n                    <TranslatedString id=\"shipping.shipping_address_heading\" />\n                </strong>\n\n                <StaticAddress address={ consignment.shippingAddress } />\n\n                <StaticConsignmentItemList\n                    cart={ cart }\n                    consignment={ consignment }\n                />\n            </div>\n        );\n    }\n}\n\nfunction getRadioInputName(consignmentId: string): string {\n    return `shippingOptionIds.${consignmentId}`;\n}\n\nexport interface ShippingOptionsFormValues {\n    shippingOptionIds: {\n        [shippingOptionIds: string]: string;\n    };\n}\n\nexport default withFormik<ShippingOptionsFormProps, ShippingOptionsFormValues>({\n    handleSubmit: noop,\n    enableReinitialize: true,\n    mapPropsToValues({ consignments }) {\n        const shippingOptionIds: { [id: string]: string } = {};\n\n        (consignments || []).forEach(consignment => {\n            shippingOptionIds[consignment.id] = consignment.selectedShippingOption ?\n                consignment.selectedShippingOption.id :\n                '';\n        });\n\n        return { shippingOptionIds };\n    },\n})(ShippingOptionsForm);\n","import { Consignment, ShippingOption } from '@bigcommerce/checkout-sdk';\n\nexport default function getRecommendedShippingOption(consignment: Consignment): ShippingOption | undefined {\n    if (consignment.selectedShippingOption ||\n        !consignment.availableShippingOptions ||\n        !consignment.availableShippingOptions.length\n    ) {\n        return;\n    }\n\n    return consignment.availableShippingOptions.find((option: { isRecommended: any }) => option.isRecommended);\n}\n","import { Cart, CheckoutSelectors, Consignment } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport getShippingMethodId from '../getShippingMethodId';\n\nimport ShippingOptionsForm from './ShippingOptionsForm';\n\nexport interface ShippingOptionsProps {\n    isMultiShippingMode: boolean;\n    isUpdatingAddress?: boolean;\n    shouldShowShippingOptions: boolean;\n}\n\nexport interface WithCheckoutShippingOptionsProps {\n    invalidShippingMessage: string;\n    methodId?: string;\n    consignments?: Consignment[];\n    cart: Cart;\n    isSelectingShippingOption(consignmentId?: string): boolean;\n    subscribeToConsignments(subscriber: (state: CheckoutSelectors) => void): () => void;\n    selectShippingOption(consignmentId: string, optionId: string): void;\n    isLoading(consignmentId?: string): boolean;\n}\n\nconst subscribeToConsignmentsSelector = createSelector(\n    ({ checkoutService }: CheckoutContextProps) => checkoutService.subscribe,\n    subscribe => (subscriber: (state: CheckoutSelectors) => void) => {\n        return subscribe(subscriber, ({ data }) => data.getConsignments());\n    }\n);\n\nconst isLoadingSelector = createSelector(\n    (_: CheckoutSelectors, { isUpdatingAddress }: ShippingOptionsProps) => isUpdatingAddress,\n    ({ statuses }: CheckoutSelectors) => statuses.isLoadingShippingOptions,\n    ({ statuses }: CheckoutSelectors) => statuses.isSelectingShippingOption,\n    ({ statuses }: CheckoutSelectors) => statuses.isUpdatingConsignment,\n    ({ statuses }: CheckoutSelectors) => statuses.isCreatingConsignments,\n    (isUpdatingAddress, isLoadingShippingOptions, isSelectingShippingOption, isUpdatingConsignment, isCreatingConsignments) => {\n        return (consignmentId?: string) => {\n            return (\n                isUpdatingAddress ||\n                isLoadingShippingOptions() ||\n                isSelectingShippingOption(consignmentId) ||\n                isUpdatingConsignment(consignmentId) ||\n                isCreatingConsignments()\n            );\n        };\n    }\n);\n\nfunction mapToShippingOptions(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    props: ShippingOptionsProps\n): WithCheckoutShippingOptionsProps | null {\n    const {\n        data: {\n            getCart,\n            getConsignments,\n            getConfig,\n            getCustomer,\n            getCheckout,\n        },\n        statuses: {\n            isSelectingShippingOption,\n        },\n    } = checkoutState;\n\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n    const config = getConfig();\n    const checkout = getCheckout();\n\n    if (!config || !checkout || !customer || !cart) {\n        return null;\n    }\n\n    const methodId = getShippingMethodId(checkout);\n    const { shippingQuoteFailedMessage } = config.checkoutSettings;\n\n    return {\n        cart,\n        consignments,\n        invalidShippingMessage: shippingQuoteFailedMessage,\n        isLoading: isLoadingSelector(checkoutState, props),\n        isSelectingShippingOption,\n        methodId,\n        selectShippingOption: checkoutService.selectConsignmentShippingOption,\n        subscribeToConsignments: subscribeToConsignmentsSelector({ checkoutService, checkoutState }),\n    };\n}\n\nexport default withCheckout(mapToShippingOptions)(ShippingOptionsForm);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n        } = this.props;\n\n        return <>\n            <Fieldset\n                id=\"checkout-shipping-options\"\n                legend={\n                    <>\n                        <Legend>\n                            <TranslatedString id=\"shipping.shipping_method_label\" />\n                        </Legend>\n\n                        { cartHasChanged &&\n                            <Alert type={ AlertType.Error }>\n                                <strong>\n                                    <TranslatedString id=\"shipping.cart_change_error\" />\n                                </strong>\n                            </Alert> }\n                    </>\n                }\n            >\n                <ShippingOptions\n                    isMultiShippingMode={ isMultiShippingMode }\n                    isUpdatingAddress={ isLoading }\n                    shouldShowShippingOptions={ shouldShowShippingOptions }\n                />\n            </Fieldset>\n\n            { shouldShowOrderComments &&\n                <OrderComments /> }\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={ shouldDisableSubmit }\n                    id=\"checkout-shipping-continue\"\n                    isLoading={ isLoading }\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"common.continue_action\" />\n                </Button>\n            </div>\n        </>;\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, Cart, CheckoutSelectors, CheckoutStoreSelector, Consignment, ConsignmentAssignmentRequestBody, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { isValidAddress } from '../address';\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport updateShippableItems from './updateShippableItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    createAccountUrl: string;\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n}\n\nclass MultiShippingForm extends PureComponent<MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>, MultiShippingFormState> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onUseNewAddress,\n            onSignIn,\n            createAccountUrl,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n        } = this.props;\n\n        const { items } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />\n                    { ' ' }\n                    <a data-test=\"shipping-sign-in-link\" href=\"#\" onClick={ preventDefault(onSignIn) }>\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>\n                    { ' ' }\n                    <TranslatedHtml\n                        data={ { url: createAccountUrl } }\n                        id=\"shipping.multishipping_guest_create\"\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Form>\n                <ul className=\"consignmentList\">\n                    { items.map(item => (\n                        <li key={ item.key }>\n                            <ItemAddressSelect\n                                addresses={ addresses }\n                                item={ item }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ onUseNewAddress }\n                            />\n                        </li>\n                    )) }\n                </ul>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading }\n                    isMultiShippingMode={ true }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ !hasUnassignedLineItems(consignments, cart.lineItems) }\n                />\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Address, itemId: string, itemKey: string) => Promise<void> = async (address, itemId, itemKey) => {\n        const {\n            assignItem,\n            onUnhandledError,\n            getFields,\n        } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    itemId,\n                    quantity: 1,\n                }],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (e) {\n            onUnhandledError(new AssignItemFailedError(e));\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (\n        key: string,\n        address: Address,\n        data: CheckoutStoreSelector\n    ) => void = (key, address, data) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex(item => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            }\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ customerMessage }) => ({\n        orderComment: customerMessage,\n    }),\n    enableReinitialize: true,\n})(MultiShippingForm));\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] }\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find(consignment =>\n        isEqualAddress(consignment.shippingAddress, address)\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n    const updatedItems: ShippableItem[] = [];\n\n    items.forEach((item, i) => {\n        const id = newId && (i === updatedItemIndex || !cartItemIds.includes(item.id)) ?\n            newId : item.id;\n\n        updatedItems[i] = {\n            ...item,\n            id,\n            consignment: findConsignment(consignments || [], id  as string),\n        };\n    });\n\n    return updatedItems;\n}\n\nfunction findNewItemId(item: ShippableItem, cart?: Cart, consignment?: Consignment): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find(id => matchingCartItemIds.includes(id));\n}\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps>  = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"billing.use_shipping_address_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        id=\"sameAsBilling\"\n        labelContent={ labelContent }\n        name=\"billingSameAsShipping\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(BillingSameAsShippingField);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { SignOutLink } from '../payment/paymentMethod';\n\nexport interface RemoteShippingAddressProps {\n    containerId: string;\n    methodId: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut(): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass RemoteShippingAddress extends PureComponent<RemoteShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            containerId,\n            methodId,\n            onSignOut,\n        } = this.props;\n\n        return (\n            <>\n                <div\n                    className={ `widget address-widget widget--${methodId}` }\n                    id={ containerId }\n                    tabIndex={ -1 }\n                />\n\n                <SignOutLink method={ { id: methodId } } onSignOut={ onSignOut } />\n            </>\n        );\n    }\n}\n\nexport default RemoteShippingAddress;\n","import { Address, Consignment, Country, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport {  isValidCustomerAddress, AddressForm, AddressSelect } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            formik: {\n                values: {\n                    shippingAddress: formAddress,\n                },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(shippingAddress, addresses, formFields);\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                { hasAddresses &&\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={ isLoading }>\n                            <AddressSelect\n                                addresses={ addresses }\n                                onSelectAddress={ onAddressSelect }\n                                onUseNewAddress={ onUseNewAddress }\n                                selectedAddress={ hasValidCustomerAddress ? shippingAddress : undefined }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset> }\n\n                { !hasValidCustomerAddress &&\n                    <LoadingOverlay isLoading={ isLoading } unmountContentWhenLoading>\n                        <AddressForm\n                            countries={ countries }\n                            countriesWithAutocomplete={ countriesWithAutocomplete }\n                            countryCode={ formAddress && formAddress.countryCode }\n                            fieldName={ addressFieldName }\n                            formFields={ formFields }\n                            googleMapsApiKey={ googleMapsApiKey }\n                            onAutocompleteToggle={ this.handleAutocompleteToggle }\n                            onChange={ this.handleChange }\n                            setFieldValue={ this.setFieldValue }\n                        />\n                    </LoadingOverlay> }\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (fieldName, fieldValue) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter(field => field.custom)\n            .map(field => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName) ?\n            `customFields.${fieldName}` :\n            fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const {\n            onFieldChange,\n        } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({ isOpen, inputValue }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import { Address, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport RemoteShippingAddress from './RemoteShippingAddress';\nimport ShippingAddressForm from './ShippingAddressForm';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n    signOut(options?: CustomerRequestOptions): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = props => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        signOut,\n        isLoading,\n        shippingAddress,\n        addresses,\n        onUnhandledError = noop,\n    } = props;\n\n    const handleSignOutRequest = useCallback(async () => {\n        try {\n            await signOut({ methodId });\n            window.location.reload();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }, [\n        methodId,\n        onUnhandledError,\n        signOut,\n    ]);\n\n    const initializeShipping = useCallback(memoizeOne((defaultOptions: ShippingInitializeOptions) => (\n        (options?: ShippingInitializeOptions) => initialize({\n            ...defaultOptions,\n            ...options,\n        })\n    )), []);\n\n    if (methodId) {\n        const containerId = 'addressWidget';\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazon') {\n            options = {\n                amazon: {\n                    container: containerId,\n                    onError: onUnhandledError,\n                },\n            };\n        }\n\n        return (\n            <RemoteShippingAddress\n                containerId={ containerId }\n                deinitialize={ deinitialize }\n                initialize={ initializeShipping(options) }\n                methodId={ methodId }\n                onSignOut={ handleSignOutRequest }\n            />\n        );\n    }\n\n    return (\n        <ShippingAddressForm\n            address={ shippingAddress }\n            addresses={ addresses }\n            consignments={ consignments }\n            countries={ countries }\n            countriesWithAutocomplete={ countriesWithAutocomplete }\n            formFields={ formFields }\n            googleMapsApiKey={ googleMapsApiKey }\n            isLoading={ isLoading }\n            onAddressSelect={ onAddressSelect }\n            onFieldChange={ onFieldChange }\n            onUseNewAddress={ onUseNewAddress }\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import { Address, CheckoutParams, CheckoutSelectors, Consignment, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport { getAddressValidationSchema, isEqualAddress, mapAddressFromFormValues, mapAddressToFormValues, AddressFormValues } from '../address';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form } from '../ui/form';\n\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1000;\n\nclass SingleShippingForm extends PureComponent<SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>> {\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(async (address: Address, includeShippingOptions: boolean) => {\n            try {\n                await updateAddress(address, {\n                    params: {\n                        include: {\n                            'consignments.availableShippingOptions': includeShippingOptions,\n                        },\n                    },\n                });\n                if (includeShippingOptions) {\n                    this.setState({ hasRequestedShippingOptions: true });\n                }\n            } finally {\n                this.setState({ isUpdatingShippingData: false });\n            }\n        }, SHIPPING_AUTOSAVE_DELAY);\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            signOut,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const {\n            isResettingAddress,\n            isUpdatingShippingData,\n        } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <ShippingAddress\n                        addresses={ addresses }\n                        consignments={ consignments }\n                        countries={ countries }\n                        countriesWithAutocomplete={ countriesWithAutocomplete }\n                        deinitialize={ deinitialize }\n                        formFields={ this.getFields(addressForm && addressForm.countryCode) }\n                        googleMapsApiKey={ googleMapsApiKey }\n                        initialize={ initialize }\n                        isLoading={ isResettingAddress }\n                        methodId={ methodId }\n                        onAddressSelect={ this.handleAddressSelect }\n                        onFieldChange={ this.handleFieldChange }\n                        onUnhandledError={ onUnhandledError }\n                        onUseNewAddress={ this.onUseNewAddress }\n                        shippingAddress={ shippingAddress }\n                        signOut={ signOut }\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    cartHasChanged={ cartHasChanged }\n                    isLoading={ isLoading || isUpdatingShippingData }\n                    isMultiShippingMode={ false }\n                    shouldDisableSubmit={ this.shouldDisableSubmit() }\n                    shouldShowOrderComments={ shouldShowOrderComments }\n                    shouldShowShippingOptions={ isValid }\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const {\n            isLoading,\n            consignments,\n            isValid,\n        } = this.props;\n\n        const {\n            isUpdatingShippingData,\n        } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async name => {\n        const {\n            setFieldValue,\n        } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise(resolve => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { isValid } = this.props;\n        const { hasRequestedShippingOptions } = this.state;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (\n        address: Address\n    ) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError = noop,\n            values,\n            setValues,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const {\n            deleteConsignments,\n            onUnhandledError = noop,\n            setValues,\n            values,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const {\n            getFields,\n        } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, shippingAddress,  customerMessage }) => ({\n        billingSameAsShipping: true,\n        orderComment: customerMessage,\n        shippingAddress: mapAddressToFormValues(\n            getFields(shippingAddress && shippingAddress.countryCode),\n            shippingAddress\n        ),\n    }),\n    isInitialValid: ({\n        shippingAddress,\n        getFields,\n        language,\n    }) => (\n        !!shippingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(shippingAddress.countryCode),\n        }).isValidSync(shippingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n        methodId,\n    }: SingleShippingFormProps & WithLanguageProps) => ( methodId ?\n        object() :\n        object({\n            shippingAddress: lazy<Partial<AddressFormValues>>(formValues =>\n                getAddressValidationSchema({\n                    language,\n                    formFields: getFields(formValues && formValues.countryCode),\n                })\n            ),\n        })\n    ),\n    enableReinitialize: false,\n})(SingleShippingForm));\n","import { Address, Cart, CheckoutParams, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, CustomerAddress, CustomerRequestOptions, FormField, RequestOptions, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    createAccountUrl: string;\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(address: Partial<Address>, options: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors>;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            createAccountUrl,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            signOut,\n            updateAddress,\n        } = this.props;\n\n        return isMultiShippingMode ?\n            <MultiShippingForm\n                addresses={ addresses }\n                assignItem={ assignItem }\n                cart={ cart }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                createAccountUrl={ createAccountUrl }\n                customerMessage={ customerMessage }\n                getFields={ getFields }\n                isGuest={ isGuest }\n                isLoading={ isLoading }\n                onSignIn={ onSignIn }\n                onSubmit={ onMultiShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                onUseNewAddress={ onUseNewAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n            /> :\n            <SingleShippingForm\n                addresses={ addresses }\n                cartHasChanged={ cartHasChanged }\n                consignments={ consignments }\n                countries={ countries }\n                countriesWithAutocomplete={ countriesWithAutocomplete }\n                customerMessage={ customerMessage }\n                deinitialize={ deinitialize }\n                deleteConsignments={ deleteConsignments }\n                getFields={ getFields }\n                googleMapsApiKey={ googleMapsApiKey }\n                initialize={ initialize }\n                isLoading={ isLoading }\n                isMultiShippingMode={ isMultiShippingMode }\n                methodId={ methodId }\n                onSubmit={ onSingleShippingSubmit }\n                onUnhandledError={ onUnhandledError }\n                shippingAddress={ shippingAddress }\n                shouldShowOrderComments={ shouldShowOrderComments }\n                signOut={ signOut }\n                updateAddress={ updateAddress }\n            />;\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={ isMultiShippingMode ?\n                    (isGuest ?\n                        'shipping.multishipping_address_heading_guest' :\n                        'shipping.multishipping_address_heading') :\n                    'shipping.shipping_address_heading' }\n            />\n        </Legend>\n\n        { shouldShowMultiShipping &&\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={ preventDefault(onMultiShippingChange) }\n            >\n                <TranslatedString id={ isMultiShippingMode ?\n                    'shipping.ship_to_single' :\n                    'shipping.ship_to_multi' }\n                />\n            </a> }\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { Address, Cart, CheckoutRequestBody, CheckoutSelectors, Consignment, ConsignmentAssignmentRequestBody, Country, Customer, CustomerRequestOptions, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(billingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    createAccountUrl: string;\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await Promise.all([\n                loadShippingAddressFields(),\n                loadShippingOptions(),\n            ]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        return (\n            <div className=\"checkout-form\">\n                <ShippingHeader\n                    isGuest={ isGuest }\n                    isMultiShippingMode={ isMultiShippingMode }\n                    onMultiShippingChange={ onToggleMultiShipping }\n                    shouldShowMultiShipping={ shouldShowMultiShipping }\n                />\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <ShippingForm\n                        { ...shippingFormProps }\n                        addresses={ customer.addresses }\n                        deinitialize={ deinitializeShippingMethod }\n                        initialize={ initializeShippingMethod }\n                        isGuest={ isGuest }\n                        isMultiShippingMode={ isMultiShippingMode }\n                        onMultiShippingSubmit={ this.handleMultiShippingSubmit }\n                        onSingleShippingSubmit={ this.handleSingleShippingSubmit }\n                        onUseNewAddress={ this.handleUseNewAddress }\n                        updateAddress={ updateShippingAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress)\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (address, itemId) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                shippingAddress: address,\n                lineItems: [{\n                    quantity: 1,\n                    itemId,\n                }],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (e) {\n            onUnhandledError(new UnassignItemError(e));\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({ orderComment }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) =>\n            deleteConsignment(id)\n        ));\n\n        return data.getShippingAddress();\n    }\n);\n\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n        links,\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading = (\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout()\n    );\n    const shouldShowMultiShipping = (\n        hasMultiShippingEnabled &&\n        !methodId &&\n        shippableItemsCount > 1 &&\n        shippableItemsCount < 50\n    );\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        createAccountUrl: links.createAccountLink,\n        customer,\n        customerMessage: checkout.customerMessage,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        shippingAddress: getShippingAddress(),\n        shouldShowMultiShipping,\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"sourceRoot":""}