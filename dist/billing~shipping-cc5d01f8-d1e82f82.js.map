{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/address/getFormFieldInputId.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/address/DynamicInput.tsx","webpack://checkout/./src/app/address/MultiCheckboxControl.tsx","webpack://checkout/./src/app/address/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/address/DynamicFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx"],"names":["CheckboxInput","Object","react__WEBPACK_IMPORTED_MODULE_5__","_ref","ref","additionalClassName","label","id","rest","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","_Input__WEBPACK_IMPORTED_MODULE_6__","assign","className","classnames__WEBPACK_IMPORTED_MODULE_4___default","type","_Label__WEBPACK_IMPORTED_MODULE_7__","htmlFor","__webpack_exports__","isEqualAddress","address1","address2","lodash__WEBPACK_IMPORTED_MODULE_7__","normalizeAddress","address","_objectSpread","customFields","filter","fieldValue","getShippableItemsCount","cart","_getLineItemsCount__WEBPACK_IMPORTED_MODULE_1__","lineItems","physicalItems","item","addedByPromotion","DropdownTrigger","_this","_classCallCheck","this","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","react__WEBPACK_IMPORTED_MODULE_15__","_this2","_this$props","props","children","placement","dropdown","react__WEBPACK_IMPORTED_MODULE_15___default","react_popper__WEBPACK_IMPORTED_MODULE_16__","onClick","modifiers","hide","enabled","flip","preventOverflow","_ref2","style","width","zIndex","defaultProps","TextArea","testId","data-test","mapAddressFromFormValues","formValues","customFieldsObject","lodash__WEBPACK_IMPORTED_MODULE_10__","value","key","push","fieldId","toISOString","slice","__webpack_require__","d","isValidCustomerAddress","lodash__WEBPACK_IMPORTED_MODULE_0__","_isEqualAddress__WEBPACK_IMPORTED_MODULE_1__","_isValidAddress__WEBPACK_IMPORTED_MODULE_2__","addresses","formFields","customerAddress","AddressSelect","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","_isEqualAddress__WEBPACK_IMPORTED_MODULE_14__","handleUseNewAddress","_this$props2","onUseNewAddress","react__WEBPACK_IMPORTED_MODULE_10__","_this$props3","react__WEBPACK_IMPORTED_MODULE_10___default","role","_ui_dropdown__WEBPACK_IMPORTED_MODULE_13__","AddressSelectMenu","AddressSelectButton","href","_common_dom__WEBPACK_IMPORTED_MODULE_11__","_locale__WEBPACK_IMPORTED_MODULE_12__","map","_StaticAddress__WEBPACK_IMPORTED_MODULE_15__","renderLabel","react__WEBPACK_IMPORTED_MODULE_1__","name","react__WEBPACK_IMPORTED_MODULE_1___default","_ui_form__WEBPACK_IMPORTED_MODULE_3__","hidden","_locale__WEBPACK_IMPORTED_MODULE_2__","renderInput","field","_ui_form__WEBPACK_IMPORTED_MODULE_4__","maxLength","autoComplete","legend","_ui_form__WEBPACK_IMPORTED_MODULE_5__","_ui_form__WEBPACK_IMPORTED_MODULE_6__","_ui_form__WEBPACK_IMPORTED_MODULE_7__","input","AddressSelector","googlePlace","address_components","_name","_address","_get","access","element","find","types","indexOf","AddressSelectorUK","AddressSelectorFactory_AddressSelectorFactory","autocompleteData","addressSelector","getCountry","mapToAddress","countries","arguments","length","undefined","accessor","create","getState","countryCode","country","c","code","getStreet2","city","getCity","postalCode","getPostCode","stateName","states","stateOrProvince","stateOrProvinceCode","subdivisions","ADDRESS_FIELD_IDS","getFormFieldLegacyName","concat","getFormFieldInputId","ui_popover_Popover","react_default","getItemClassName","highlightedIndex","index","classes","join","ui_popover_PopoverList","react","_ref$highlightedIndex","_ref$getItemProps","getItemProps","_ref$menuProps","menuProps","items","content","autocomplete_Autocomplete","Autocomplete","Autocomplete_classCallCheck","stateReducer","changes","onChange","downshift_esm","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","Autocomplete_objectSpread","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","_this$props$onToggleO","onToggleOpen","lodash","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","initialInputValue","defaultHighlightedIndex","onStateChange","itemToString","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","i","offset","notHighlightedLength","substr","instance","GoogleAutocompleteScriptLoader_GoogleAutocompleteScriptLoader","GoogleAutocompleteScriptLoader","GoogleAutocompleteScriptLoader_classCallCheck","_scriptLoader","lib","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","GoogleAutocompleteService_GoogleAutocompleteService","GoogleAutocompleteService","_apiKey","GoogleAutocompleteService_classCallCheck","_autocompletePromise","loadMapsSdk","then","googleMapsSdk","AutocompleteService","Error","_placesPromise","PlacesService","address_googleAutocomplete_GoogleAutocomplete","GoogleAutocomplete","GoogleAutocomplete_classCallCheck","GoogleAutocomplete_possibleConstructorReturn","GoogleAutocomplete_getPrototypeOf","call","_this$props$onSelect","nextElement","googleAutocompleteService","getPlacesServices","service","getDetails","placeId","fields","result","focus","isAutocompleteEnabled","_this$props2$onChange","resetAutocomplete","setAutocomplete","setItems","_this$props3$onToggle","_this$props3$inputPro","GoogleAutocomplete_objectSpread","getAutocompleteService","getPlacePredictions","componentRestrictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","googleAutocomplete_GoogleAutocompleteFormField","supportedCountries","parentFieldName","fieldName","labelContent","TranslatedString","FormField","form_RadioInput","checked","Input","classnames_default","Label","address_DynamicInput","fieldType","_ref$onChange","options","placeholder","DynamicInput_objectWithoutProperties","handleDateChange","date","DynamicInput_objectSpread","target","DynamicFormFieldType","optionValue","radio","_ref3","checkbox","_ref4","Array","isArray","includes","es","placeholderText","minDate","min","Date","maxDate","max","popperClassName","calendarClassName","selected","multiline","TextInput","password","address_MultiCheckboxControl","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","CheckboxGroupFormField_MultiCheckboxFormField","_ref$form","form","values","errors","pop","remove","handleSelectAll","checkedValues","formik_esm","forEach","val","handleSelectNone","handleInputChange","_event$target","FormFieldContainer","hasError","FormFieldError","address_CheckboxGroupFormField","renderField","renderProps","render","LABEL","company","firstName","lastName","phone","AUTOCOMPLETE","address_DynamicFormField","_ref$field","fieldLabel","custom","required","addressFieldName","fieldInputId","translatedLabelString","helperLabel","rows","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","AddressForm_AddressForm","AddressForm","AddressForm_classCallCheck","containerRef","handleDynamicFormFieldChange","memoize","syncNonFormikValue","maxSize","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","_this$props$setFieldV","setFieldValue","_this$props$onChange","_this$props2$setField","dateFormFieldNames","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","translatedPlaceholderId","translate","getDynamicFormFieldType","secret","number","text","telephone","withLanguage"],"mappings":"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","file":"billing~shipping-cc5d01f8-d1e82f82.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            ref={ ref }\n            type=\"checkbox\"\n            id={ id }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = ['id', 'stateOrProvinceCode', 'type', 'email'];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    placement={ placement }\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface TextAreaProps extends InputHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport { forIn, isDate } from 'lodash';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields: customFieldsObject, ...address } = formValues;\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n\n    forIn(customFieldsObject, (value, key) =>\n        customFields.push({\n            fieldId: key,\n            fieldValue: isDate(value) ? value.toISOString().slice(0, 10) : value,\n        })\n    );\n\n    return {\n        ...address,\n        customFields,\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger dropdown={\n                        <AddressSelectMenu\n                            addresses={ addresses }\n                            onSelectAddress={ this.handleSelectAddress }\n                            onUseNewAddress={ this.handleUseNewAddress }\n                            selectedAddress={ selectedAddress }\n                        />\n                    }>\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a href=\"#\" onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }>\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" />\n        }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            maxLength={ 2000 }\n            autoComplete={ 'off' }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset testId=\"checkout-shipping-comments\" legend={ legend }>\n        <FormField\n            name=\"orderComment\"\n            label={ renderLabel }\n            input={ renderInput }\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { Country, Region } from '../../geography';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { AddressKeyMap } from './DynamicFormField';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getFormFieldInputId(name: string): string {\n    return `${getFormFieldLegacyName(name)}Input`;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            data-test={ testId }\n            className=\"popoverList\" { ...menuProps }\n        >{ items\n            .map((item, index) => (\n                <li\n                    data-test={ testId && `${testId}-item` }\n                    className={ getItemClassName(highlightedIndex, index) }\n                    { ...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={ index }\n                >\n                    { item.content }\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                initialInputValue={ initialValue }\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n                onChange={ onSelect }\n                itemToString={ this.itemToString }\n            >\n                {({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    testId={ listTestId }\n                                    menuProps={ getMenuProps() }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    getItemProps={ getItemProps }\n                                />\n                                { children }\n                            </Popover>\n                        }\n                    </div>\n                )}\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    GoogleAutocompleteWindow,\n    GoogleMapsSdk,\n} from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n        const { items } = this.state;\n\n        return (\n            <Autocomplete\n                listTestId=\"address-autocomplete-suggestions\"\n                items={ items }\n                initialHighlightedIndex={ 0 }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete: this.state.autoComplete,\n                } }\n                initialValue={ initialValue }\n                onSelect={ this.onSelect }\n                onChange={ this.onChange }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\"></div>\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: this.props.fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: this.props.types || ['geocode'],\n                componentRestrictions: this.props.componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getFormFieldInputId } from '../getFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getFormFieldInputId(name),\n    }), [name]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            onSelect={ onSelect }\n            onChange={ onChange }\n            initialValue={ field.value }\n            nextElement={ nextElement }\n            onToggleOpen={ onToggleOpen }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false\n            }\n            inputProps={ inputProps }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined\n            }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                name={ fieldName }\n                labelContent={ labelContent }\n                input={ renderInput }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n            id={ id }\n            checked={ checked }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { CheckboxInput, InputProps, RadioInput, TextArea, TextInput } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    additionalClassName,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const handleDateChange = useCallback((date, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: date,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                name={ name }\n                onChange={ onChange }\n                id={ id }\n                data-test={ `${id}-select` }\n                className=\"form-select optimizedCheckout-form-select\"\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option>\n                }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                )}\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>{ options.map(({ label, value: optionValue }) =>\n            <RadioInput\n                { ...rest }\n                name={ name }\n                onChange={ onChange }\n                id={ `${id}-${optionValue}` }\n                testId={ `${id}-${optionValue}-radio` }\n                key={ optionValue }\n                label={ label }\n                value={ optionValue }\n                checked={ optionValue === value }\n            />) }</>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>{ options.map(({ label, value: optionValue }) =>\n            <CheckboxInput\n                { ...rest }\n                name={ name }\n                onChange={ onChange }\n                id={ `${id}-${optionValue}` }\n                testId={ `${id}-${optionValue}-checkbox` }\n                key={ optionValue }\n                label={ label }\n                value={ optionValue }\n                checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n            />) }</>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                name={ name }\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                onChange={ handleDateChange }\n                autoComplete=\"off\"\n                placeholderText=\"MM/DD/YYYY\"\n                minDate={ rest.min ? new Date(rest.min) : undefined }\n                maxDate={ rest.max ? new Date(rest.max) : undefined }\n                className=\"form-input optimizedCheckout-form-input\"\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                name={ name }\n                onChange={ onChange }\n                id={ id }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                name={ name }\n                onChange={ onChange }\n                id={ id }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }`\n                }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(DynamicInput);\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }>\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport { FormFieldContainer, FormFieldError } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    pop,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => pop());\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        pop,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        <MultiCheckboxControl\n            testId={ id }\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n        />\n\n        <DynamicInput\n            name={ name }\n            value={ getIn(values, name) || [] }\n            onChange={ handleInputChange }\n            fieldType={ DynamicFormFieldType.checkbox }\n            options={ options }\n            id={ id }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, Label } from '../ui/form';\n\nimport { getFormFieldInputId, getFormFieldLegacyName } from './getFormFieldInputId';\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface AddressKeyMap<T = string> {\n    [fieldName: string]: T;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    parentFieldName?: string;\n    placeholder?: string;\n    fieldType?: DynamicFormFieldType;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        name,\n        label: fieldLabel,\n        custom,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    fieldType,\n    parentFieldName,\n    onChange,\n    placeholder,\n}) => {\n    const addressFieldName = name;\n    const fieldInputId = getFormFieldInputId(addressFieldName);\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const translatedLabelString = LABEL[name];\n\n    const label = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { custom ?\n                fieldLabel :\n                translatedLabelString && <TranslatedString id={ translatedLabelString } />\n            }\n            { !required &&\n                <> { '' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </>\n            }\n        </Label>\n    ), [\n        custom,\n        fieldInputId,\n        fieldLabel,\n        required,\n        translatedLabelString,\n    ]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            maxLength={ maxLength || undefined }\n            max={ max }\n            min={ min }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            fieldType={ fieldType }\n            rows={ options && (options as any).rows }\n            options={ options && options.items }\n            autoComplete={ AUTOCOMPLETE[addressFieldName] }\n            id={ fieldInputId }\n        />\n    ), [\n        addressFieldName,\n        fieldInputId,\n        fieldType,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--${getFormFieldLegacyName(addressFieldName)}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    onChange={ onChange }\n                    name={ fieldName }\n                    id={ fieldInputId }\n                    label={ label }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    name={ fieldName }\n                    onChange={ onChange }\n                    label={ label }\n                    input={ renderInput }\n                />\n            }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { memoize } from '../common/utility';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\n\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport DynamicFormField, { AddressKeyMap } from './DynamicFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    }, { maxSize: 0 });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n        } = this.props;\n\n        return (\n            <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                { formFields.map(field => {\n                    const addressFieldName = field.name;\n                    const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                    if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                        return (\n                            <GoogleAutocompleteFormField\n                                key={ field.id }\n                                parentFieldName={ fieldName }\n                                countryCode={ countryCode }\n                                supportedCountries={ countriesWithAutocomplete }\n                                field={ field }\n                                onSelect={ this.handleAutocompleteSelect }\n                                onToggleOpen={ onAutocompleteToggle }\n                                onChange={ this.handleAutocompleteChange }\n                                apiKey={ googleMapsApiKey }\n                                nextElement={ this.nextElement || undefined }\n                            />\n                        );\n                    }\n\n                    return (\n                        <DynamicFormField\n                            onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                            // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                            key={ `${field.id}-${field.name}` }\n                            parentFieldName={ field.custom ?\n                                (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                fieldName\n                            }\n                            field={ field }\n                            placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            fieldType={ this.getDynamicFormFieldType(field) }\n                        />\n                    );\n                }) }\n            </div>\n        );\n    }\n\n    private getDynamicFormFieldType({\n        custom,\n        name,\n        fieldType,\n        type,\n        secret,\n    }: FormField): DynamicFormFieldType {\n        if (!custom) {\n            const defaultTypes: { [key: string]: DynamicFormFieldType } = {\n                phone: DynamicFormFieldType.telephone,\n                countryCode: DynamicFormFieldType.dropdown,\n                stateOrProvinceCode: DynamicFormFieldType.dropdown,\n            };\n\n            return defaultTypes[name] || DynamicFormFieldType.text;\n        }\n\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n"],"sourceRoot":""}