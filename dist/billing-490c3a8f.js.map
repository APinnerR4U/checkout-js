{"version":3,"sources":["webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["state","isResettingAddress","addressFormRef","handleSelectAddress","address","this","props","updateAddress","onUnhandledError","setState","handleUseNewAddress","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","customer","addresses","isGuest","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","hasSaveAddressFeature","values","hasAddresses","length","hasValidCustomerAddress","isValidCustomerAddress","countryCode","Form","autoComplete","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","undefined","AddressForm","formFields","shouldShowSaveAddress","OrderComments","className","Button","disabled","type","variant","Primary","TranslatedString","withLanguage","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressValidationSchema","isValidSync","validationSchema","enableReinitialize","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","addressValues","isEqualAddress","push","Promise","all","componentDidMount","initialize","onReady","isInitializing","Legend","testId","unmountContentWhenLoading","withCheckout","checkoutService","checkoutState","data","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","statuses","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkout","cart","enableOrderComments","features","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress"],"mappings":"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","file":"billing-490c3a8f.js","sourcesContent":["import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressValidationSchema, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    customer: Customer;\n    customerMessage: string;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    hasSaveAddressFeature: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    onSubmit(values: BillingFormValues): void;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses, isGuest },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            hasSaveAddressFeature,\n            values,\n        } = this.props;\n\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset id=\"checkoutBillingAddress\" ref={ this.addressFormRef }>\n                    { hasAddresses &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset> }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                countryCode={ values.countryCode }\n                                formFields={ getFields(values.countryCode) }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                setFieldValue={ setFieldValue }\n                                shouldShowSaveAddress={ hasSaveAddressFeature && !isGuest }\n                            />\n                        </LoadingOverlay> }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments /> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        isLoading={ isUpdating || isResettingAddress }\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n    }: BillingFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    hasSaveAddressFeature: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <BillingForm\n                        { ...props }\n                        onSubmit={ this.handleSubmit }\n                        updateAddress={ updateAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        hasSaveAddressFeature: features['CHECKOUT-4642.uco_save_address_checkbox'],\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}