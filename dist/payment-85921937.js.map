{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/payment/paymentMethod/PaymentMethodId.ts","webpack://checkout/./src/app/payment/paymentMethod/PaymentMethodType.ts","webpack://checkout/./src/app/ui/accordion/AccordionContext.tsx","webpack://checkout/./src/app/payment/paymentMethod/getPaymentMethodName.ts","webpack://checkout/./src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./src/app/payment/paymentMethod/SignOutLink.tsx","webpack://checkout/./src/app/ui/accordion/Accordion.tsx","webpack://checkout/./src/app/ui/form/Checklist.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/cart/mapToRedeemableProps.ts","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/coupon/AppliedCoupon.tsx","webpack://checkout/./src/app/giftCertificate/AppliedGiftCertificate.tsx","webpack://checkout/./src/app/ui/icon/IconRemove.tsx","webpack://checkout/./src/app/cart/AppliedRedeemable.tsx","webpack://checkout/./src/app/cart/AppliedRedeemables.tsx","webpack://checkout/./src/app/cart/Redeemable.tsx","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./src/app/common/form/connectFormik.tsx","webpack://checkout/./src/app/ui/accordion/AccordionItem.tsx","webpack://checkout/./src/app/ui/form/ChecklistItemInput.tsx","webpack://checkout/./src/app/ui/form/ChecklistItem.tsx","webpack://checkout/./src/app/ui/alert/FlashAlert.tsx","webpack://checkout/./src/app/payment/mapSubmitOrderErrorMessage.ts","webpack://checkout/./src/app/payment/creditCard/unformatCreditCardExpiryDate.ts","webpack://checkout/./src/app/payment/creditCard/unformatCreditCardNumber.ts","webpack://checkout/./src/app/payment/paymentMethod/getUniquePaymentMethodId.ts","webpack://checkout/./src/app/payment/paymentMethod/AdyenV2CardValidation.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardStorageField.tsx","webpack://checkout/./src/app/ui/icon/IconCardAmex.tsx","webpack://checkout/./src/app/ui/icon/IconCardDinersClub.tsx","webpack://checkout/./src/app/ui/icon/IconCardDiscover.tsx","webpack://checkout/./src/app/ui/icon/IconCardJCB.tsx","webpack://checkout/./src/app/ui/icon/IconCardMaestro.tsx","webpack://checkout/./src/app/ui/icon/IconCardMastercard.tsx","webpack://checkout/./src/app/ui/icon/IconCardUnionPay.tsx","webpack://checkout/./src/app/ui/icon/IconCardVisa.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardIcon.tsx","webpack://checkout/./src/app/payment/storedInstrument/mapFromInstrumentCardType.ts","webpack://checkout/./src/app/payment/storedInstrument/InstrumentSelect.tsx","webpack://checkout/./src/app/payment/storedInstrument/isAccountInstrument.ts","webpack://checkout/./src/app/payment/storedInstrument/isCardInstrument.ts","webpack://checkout/./src/app/ui/icon/IconPaypal.tsx","webpack://checkout/./src/app/payment/storedInstrument/ManageAccountInstrumentsTable.tsx","webpack://checkout/./src/app/payment/storedInstrument/ManageCardInstrumentsTable.tsx","webpack://checkout/./src/app/payment/storedInstrument/ManageInstrumentsAlert.tsx","webpack://checkout/./src/app/payment/storedInstrument/ManageInstrumentsModal.tsx","webpack://checkout/./src/app/payment/storedInstrument/CardInstrumentFieldset.tsx","webpack://checkout/./src/app/ui/icon/IconLock.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardNumberField.tsx","webpack://checkout/./src/app/payment/creditCard/formatCreditCardNumber.ts","webpack://checkout/./src/app/ui/icon/IconHelp.tsx","webpack://checkout/./src/app/ui/tooltip/TooltipTrigger.tsx","webpack://checkout/./src/app/ui/icon/IconCardCodeVisa.tsx","webpack://checkout/./src/app/ui/icon/IconCardCodeAmex.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardCodeTooltip.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardCodeField.tsx","webpack://checkout/./src/app/payment/storedInstrument/CreditCardValidation.tsx","webpack://checkout/./src/app/payment/storedInstrument/isInstrumentCardCodeRequired.ts","webpack://checkout/./src/app/payment/storedInstrument/isInstrumentCardNumberRequiredSelector.ts","webpack://checkout/./src/app/payment/storedInstrument/isInstrumentCardNumberRequired.ts","webpack://checkout/./src/app/payment/storedInstrument/isInstrumentFeatureAvailable.ts","webpack://checkout/./src/app/payment/PaymentContext.tsx","webpack://checkout/./src/app/payment/withPayment.tsx","webpack://checkout/./src/app/payment/paymentMethod/HostedWidgetPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/AdyenV2PaymentMethod.tsx","webpack://checkout/./src/app/ui/icon/IconNewAccount.tsx","webpack://checkout/./src/app/payment/storedInstrument/AccountInstrumentSelect.tsx","webpack://checkout/./src/app/payment/storedInstrument/AccountInstrumentFieldset.tsx","webpack://checkout/./src/app/payment/paymentMethod/HostedPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/AffirmPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/AmazonPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/BarclaycardPaymentMethod.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardCustomerCodeField.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardExpiryField.tsx","webpack://checkout/./src/app/payment/creditCard/formatCreditCardExpiryDate.ts","webpack://checkout/./src/app/payment/creditCard/CreditCardNameField.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardFieldset.tsx","webpack://checkout/./src/app/payment/creditCard/getCreditCardValidationSchema.ts","webpack://checkout/./src/app/payment/storedInstrument/getInstrumentValidationSchema.ts","webpack://checkout/./src/app/payment/paymentMethod/CreditCardPaymentMethod.tsx","webpack://checkout/./src/app/payment/creditCard/configureCardValidator.ts","webpack://checkout/./src/app/payment/paymentMethod/BraintreeCreditCardPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/WalletButtonPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/PaymentMethodProviderType.ts","webpack://checkout/./src/app/payment/paymentMethod/ChasePayPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/CCAvenueMarsPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/GooglePayPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/KlarnaPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/MasterpassPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/OfflinePaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/PaypalExpressPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/PaypalPaymentsProPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/HostedFieldPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/SquarePaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/StripePaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/VisaCheckoutPaymentMethod.tsx","webpack://checkout/./src/app/payment/paymentMethod/PaymentMethod.tsx","webpack://checkout/./src/app/payment/creditCard/CreditCardIconList.tsx","webpack://checkout/./src/app/payment/creditCard/mapFromPaymentMethodCardType.ts","webpack://checkout/./src/app/payment/paymentMethod/PaymentMethodTitle.tsx","webpack://checkout/./src/app/payment/paymentMethod/PaymentMethodList.tsx","webpack://checkout/./src/app/ui/tooltip/Tooltip.tsx","webpack://checkout/./src/app/payment/storeCredit/StoreCreditField.tsx","webpack://checkout/./src/app/payment/storeCredit/StoreCreditOverlay.tsx","webpack://checkout/./src/app/payment/PaymentRedeemables.tsx","webpack://checkout/./src/app/payment/PaymentSubmitButton.tsx","webpack://checkout/./src/app/payment/SpamProtectionField.tsx","webpack://checkout/./src/app/payment/PaymentForm.tsx","webpack://checkout/./src/app/payment/getPaymentValidationSchema.ts","webpack://checkout/./src/app/payment/mapToOrderRequestBody.ts","webpack://checkout/./src/app/payment/Payment.tsx","webpack://checkout/./src/app/common/error/isRequestError.ts"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","PaymentMethodId","PaymentMethodType","AccordionContext","onToggle","getPaymentMethodName","language","method","name","Affirm","translate","Afterpay","Amazon","Klarna","Paypal","PaypalCredit","Chasepay","VisaCheckout","GooglePay","getTranslatedPaymentMethodName","MultiOption","config","displayName","state","isOpen","canHandleEvent","handleOpen","setState","handleClose","componentDidMount","this","componentWillUnmount","render","children","modal","onClick","onRequestClose","TermsConditionsType","TermsConditionsTranslatedModalLink","terms","renderInput","field","defaultValue","readOnly","rows","renderModal","props","additionalModalClassName","footer","size","Small","header","shouldShowCloseButton","input","termsLabel","url","termsLabelPrefix","replace","termsLabelSuffix","termsLinkLabelMatches","match","labelContent","TermsConditionsExternalLinkField","data","TextArea","areTermsConditionsTextFieldProps","onSignOut","href","providerName","getContextValue","selectedItemId","handleToggleItem","onSelect","defaultSelectedItemId","Provider","value","ChecklistContext","undefined","connectFormik","setFieldValue","handleSelect","contextValue","testId","mapToRedeemableProps","context","checkoutService","checkoutState","getConfig","getCoupons","getGiftCertificates","statuses","isApplyingCoupon","isApplyingGiftCertificate","isRemovingCoupon","isRemovingGiftCertificate","errors","getApplyCouponError","getApplyGiftCertificateError","getRemoveCouponError","getRemoveGiftCertificateError","appliedRedeemableError","applyCoupon","applyGiftCertificate","clearError","coupons","giftCertificates","isApplyingRedeemable","onRemovedCoupon","removeCoupon","onRemovedGiftCertificate","removeGiftCertificate","removedRedeemableError","shouldCollapseCouponCode","checkoutSettings","isCouponCodeCollapsed","onChange","renderField","checked","coupon","TranslatedString","code","giftCertificate","ShopperCurrency","amount","used","remaining","withIconContainer","height","viewBox","width","xmlns","d","isRemoving","onRemove","disabled","AppliedCouponChecklistItem","onRemoved","handleRemove","AppliedGiftCertificateChecklistItem","length","map","key","RedeemableForm","submitForm","handleKeyDown","setSubmitted","event","keyCode","preventDefault","handleSubmit","renderLabel","Label","hidden","renderErrorMessage","errorCode","Alert","Error","TextInput","onKeyDown","Button","isLoading","variant","Secondary","renderContent","FormField","FormProvider","withLanguage","mapPropsToValues","redeemableCode","trim","validationSchema","required","showAppliedRedeemables","Toggle","openByDefault","toggle","formProps","shouldShow","handleClick","nativeEvent","document","addEventListener","removeEventListener","placement","dropdown","modifiers","hide","enabled","flip","preventOverflow","style","zIndex","defaultProps","TermsConditions","termsConditionsUrl","termsConditionsText","Link","getTermsConditionsValidationSchema","isTermsConditionsRequired","schemaFields","oneOf","OriginalComponent","InnerComponent","formik","prevFormik","nextFormik","prevProps","nextProps","DecoratedComponent","bodyClassName","classNameSelected","headerClassName","headerClassNameSelected","headerContent","itemId","isSelected","transitionEndListener","node","done","target","addEndListener","classNames","in","mountOnEnter","timeout","unmountOnExit","Input","content","htmlId","Function","handleChange","selectedValue","renderHeaderContent","BasicFormField","mapAlertType","Success","Info","Warning","message","mapSubmitOrderErrorMessage","error","body","mapSubmitOrderErrorTitle","unformatCreditCardExpiryDate","month","year","test","slice","unformatCreditCardNumber","separator","card","RegExp","getUniquePaymentMethodId","methodId","gatewayId","join","parseUniquePaymentMethodId","verificationFieldsContainerId","shouldShowNumberField","display","CheckboxFormField","fill","fillRule","xmlnsXlink","rx","xlinkHref","mask","x","transform","cx","cy","ry","r","clipRule","strokeLinejoin","strokeMiterlimit","cardType","iconProps","Medium","mapFromInstrumentCardType","selectedInstrumentId","setTimeout","updateFieldValue","componentDidUpdate","prevSelectedInstrumentId","instruments","onSelectInstrument","onUseNewInstrument","selectedInstrument","bigpayToken","DropdownTrigger","InstrumentMenu","InstrumentSelectButton","instrument","instrumentId","form","InstrumentOption","InstrumentUseNewButton","InstrumentMenuItem","brand","cardInfo","getTypeInfo","isExpired","expiryMonth","expiryYear","isValid","cardTitle","niceType","endingIn","last4","expiryDate","isAccountInstrument","isCardInstrument","ManageInstrumentsRow","onDeleteInstrument","handleDelete","externalId","isDeletingInstrument","LoadingOverlay","status","isConfirmingDelete","handleAfterOpen","onAfterOpen","handleCancel","deleteInstrumentError","handleConfirmDelete","deleteInstrument","onDeleteInstrumentError","handleDeleteInstrument","Modal","closeButtonLabel","renderFooter","ModalHeader","cardInstruments","filter","accountInstruments","ManageAccountInstrumentsTable","Primary","withCheckout","getDeleteInstrumentError","validateInstrument","Fieldset","legend","Legend","ModalTrigger","inputRef","nextSelectionEnd","selectionEnd","current","previousValue","maxLength","info","lengths","formattedValue","unformattedValue","gaps","gapIndex","reduce","output","index","formatCreditCardNumber","setSelectionRange","autoComplete","handleShow","handleHide","tooltip","onBlur","onFocus","onMouseEnter","onMouseLeave","stroke","strokeWidth","y","fontFamily","fontSize","fontWeight","letterSpacing","opacity","Large","shouldShowCardCodeField","isInstrumentCardCodeRequired","lineItems","paymentMethod","isTrustedShippingAddressEnabled","digitalItems","isVaultingCvvEnabled","cardCode","cart","getCart","physicalItems","trustedShippingAddress","isInstrumentCardNumberRequired","isInstrumentFeatureAvailable","customer","isUsingMultiShipping","isCardVaultingEnabled","isVaultingEnabled","isGuest","createInjectHoc","displayNamePrefix","isAddingNewCard","handleUseNewCard","deinitializePayment","initializePayment","gateway","handleSelectInstrument","handleSignOut","onSignOutError","signOut","Promise","isInstrumentFeatureAvailableProp","loadInstruments","onUnhandledError","initializeMethod","_prevProps","prevState","deinitializeCustomer","setSubmit","setValidationSchema","containerId","hideContentWhenSignedOut","isInitializing","isSignedIn","isSignInRequired","isLoadingInstruments","shouldShowInstrumentFieldset","shouldShowCreditCardFieldset","hideContentWhenLoading","getValidateInstrument","tabIndex","SignOutLink","hideVerificationFields","isInstrumentCardNumberRequiredProp","isInstrumentCardCodeRequiredProp","isPaymentDataRequired","initializeCustomer","signInCustomer","getDefaultInstrumentId","resolve","defaultInstrument","find","AdyenMethodType","filterInstruments","values","getCheckout","getCustomer","getInstruments","checkout","useStoreCredit","payments","providerId","signOutCustomer","threeDSecureContentRef","threeDSecureContent","setThreeDSecureContent","threeDS2ContainerId","cardVerificationContainerId","component","adyenOptions","scheme","hasHolderName","bcmc","onLoad","cancel","div","createElement","setAttribute","cancelThreeDSecureVerification","onComplete","appendThreeDSecureContent","appendChild","cancelThreeDSecureModalFlow","initializeAdyenPayment","options","adyenv2","threeDS2Options","widgetSize","additionalBodyClassName","AccountInstrumentMenu","AccountInstrumentSelectButton","AccountInstrumentOption","AccountInstrumentUseNewButton","AccountInstrumentMenuItem","TranslatedHtml","isAddingNewInstrument","handleUseNewInstrument","description","isNewAddress","shouldShowSaveInstrument","getDefaultInstrument","filterAccountInstruments","filterTrustedInstruments","isPaymentDataSubmitted","features","currentMethodInstruments","trustedInstruments","signInAmazon","button","querySelector","click","paymentContext","initializeAmazonCustomer","amazon","container","onError","initializeAmazonPayment","disableSubmit","onPaymentSelect","trimmedMonth","trimmedYear","formatCreditCardExpiryDate","placeholder","shouldShowCustomerCodeField","shouldShowSaveCardField","isCardCodeRequired","schema","ccCustomerCode","ccCvv","ccExpiry","ccName","max","ccNumber","instrumentBrand","instrumentLast4","isCardNumberRequired","getValidationSchema","discoverInfo","visaInfo","updateCard","patterns","requireCustomerCode","initializeBraintreePayment","braintree","threeDSecure","addFrame","removeFrame","window","location","reload","toggleSubmit","initializationData","prevMethod","isPaymentSelected","renderPaymentView","renderSignInView","buttonId","signInButtonClassName","signInButtonLabel","accountMask","cardName","editButtonClassName","editButtonLabel","shouldShowEditButton","normalizeWalletPaymentData","card_information","formatAccountMask","number","cardData","expMonth","expYear","accountNum","expDate","substr","padding","indexOf","PaymentMethodProviderType","getBillingAddress","billingAddress","walletPaymentData","firstName","lastName","initializeChasePayPayment","chasepay","walletButton","initializeGooglePayPayment","googlepaybraintree","googlepaystripe","initializeKlarnaPayment","klarna","initializeMasterpassPayment","masterpass","alt","src","isEmbedded","initializePaypalExpressPayment","paypalexpress","useRedirectFlow","selectedHostedMethod","providerType","Hosted","isHostedPayment","cardCodeId","cardExpiryId","cardNumberId","postalCodeId","walletButtons","FormFieldContainer","isMasterpassEnabled","enableMasterpass","initializeSquarePayment","square","cardNumber","elementId","cvv","expirationDate","postalCode","inputClass","inputStyles","color","lineHeight","initializeStripePayment","stripev3","base","fontSmoothing","invalid","iconColor","initializeVisaCheckoutPayment","defaultOptions","mergedOptions","braintreevisacheckout","isInitializingPayment","AdyenV2","SquareV2","StripeV3","CCAvenueMars","ChasePay","BraintreeVisaCheckout","BraintreeGooglePay","StripeGooglePay","Masterpass","Braintree","PaypalExpress","PaypalPaymentsPro","Barclaycard","Zip","Offline","CreditCard","Api","SUPPORTED_CARD_TYPES","selectedCardType","filteredCardTypes","cardTypes","mapFromPaymentMethodCardType","cdnBasePath","cdnPath","methodName","basePath","path","customTitles","logoUrl","titleText","toLowerCase","supportedCards","PaymentMethodListItem","renderPaymentMethod","PaymentMethod","renderPaymentMethodTitle","ChecklistItem","methods","getPaymentMethodFromListValue","Checklist","paymentProviderRadio","withCurrency","availableStoreCredit","currency","usableStoreCredit","storeCredit","toCustomerCurrency","redeemableProps","Redeemable","PaymentSubmitButtonText","methodType","isInitializingCustomer","isSubmittingOrder","isSubmitting","isDisabled","isFullWidth","Action","verify","isExecutingSpamCheck","executeSpamCheck","isCreditCardFieldsetValues","ccValues","isInstrumentFieldsetValues","isHostedWidgetValues","shouldSaveInstrument","PaymentMethodListFieldset","onMethodSelect","resetForm","commonValues","handlePaymentMethodSelect","paymentFormConfig","defaultGatewayId","defaultMethodId","onSubmit","additionalValidation","schemaFieldsWithTerms","concat","onStoreCreditChange","selectedMethod","shouldDisableSubmit","shouldExecuteSpamCheck","Form","mapToOrderRequestBody","payment","paymentData","isReady","validationSchemas","submitFunctions","uniqueId","handleBeforeUnload","defaultMethod","Converge","SagePay","returnValue","handleCloseModal","_","cartUrl","errorType","isRequestError","headers","top","assign","loadPaymentMethods","onCartChangedError","onSubmitError","submitOrder","customSubmit","setSelectedMethod","fn","finalizeOrderIfNeeded","onFinalize","onFinalizeError","onReady","checkEmbeddedSupport","finalizeOrderError","flashMessages","uniqueSelectedMethodId","unmountContentWhenLoading","renderOrderErrorModal","renderEmbeddedSupportErrorModal","submitOrderError","ErrorModal","bind","onClose","title","mapToPaymentProps","getOrder","getPaymentMethod","getPaymentMethods","getFinalizeOrderError","getSubmitOrderError","isComplete","enableTermsAndConditions","orderTermsAndConditionsType","orderTermsAndConditionsLocation","orderTermsAndConditions","orderTermsAndConditionsLink","termsAndConditionsAtPayment","termsAndConditionsLocation","isTermsConditionsEnabled","selectedPayment","selectedPaymentMethod","filteredMethods","links","cartLink","termsConditionsType","termsCondtitionsText","termsCondtitionsUrl","Math","min","grandTotal"],"mappings":"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","file":"payment-85921937.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","enum PaymentMethodId {\n    Adyen = 'adyen',\n    AdyenV2 = 'adyenv2',\n    Affirm = 'affirm',\n    Afterpay = 'afterpay',\n    Amazon = 'amazon',\n    Barclaycard = 'barclaycard',\n    Braintree = 'braintree',\n    BraintreeGooglePay = 'googlepaybraintree',\n    BraintreeVisaCheckout = 'braintreevisacheckout',\n    CCAvenueMars = 'ccavenuemars',\n    ChasePay = 'chasepay',\n    Converge = 'converge',\n    Klarna = 'klarna',\n    Masterpass = 'masterpass',\n    PaypalExpress = 'paypalexpress',\n    PaypalPaymentsPro = 'paypal',\n    SagePay = 'sagepay',\n    SquareV2 = 'squarev2',\n    StripeGooglePay = 'googlepaystripe',\n    StripeV3 = 'stripev3',\n    Zip = 'zip',\n}\n\nexport default PaymentMethodId;\n","enum PaymentMethodType {\n    Barclaycard = 'barclaycard',\n    Chasepay = 'chasepay',\n    CreditCard = 'credit-card',\n    GooglePay = 'googlepay',\n    Masterpass = 'masterpass',\n    MultiOption = 'multi-option',\n    Paypal = 'paypal',\n    PaypalCredit = 'paypal-credit',\n    VisaCheckout = 'visa-checkout',\n}\n\nexport default PaymentMethodType;\n","import { noop } from 'lodash';\nimport { createContext } from 'react';\n\nexport interface AccordionContextProps {\n    selectedItemId?: string;\n    onToggle(id: string): void;\n}\n\nconst AccordionContext = createContext<AccordionContextProps>({ onToggle: noop });\n\nexport default AccordionContext;\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { capitalize, get } from 'lodash';\n\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\n/**\n * Always return the translated name of a payment method unless it is a\n * multi-option payment method or it doesn't have any translation. It's possible\n * to translate the gateway name of multi-option methods, i.e.: AfterPay.\n * However, because the options provided by the gateway can vary a lot, i.e.:\n * \"Pay by Installment\", therefore it's not feasible to do the translation on\n * the UI level.\n */\nexport default function getPaymentMethodName(\n    language: LanguageService\n): (method: Partial<PaymentMethod> & Pick<PaymentMethod, 'id'>) => string {\n    return method => {\n        let name = getTranslatedPaymentMethodName(language)(method);\n\n        if (!name || method.method === PaymentMethodType.MultiOption) {\n            name = method.config && method.config.displayName;\n        }\n\n        if (!name) {\n            name = capitalize(\n                // FIXME: I'm not entirely sure why we have to do this. But for some\n                // reason this is required for Masterpass provided by Square.\n                get(method, 'initializationData.paymentData.cardData.digital_wallet_type') ||\n                method.method ||\n                method.id\n            );\n        }\n\n        return name;\n    };\n}\n\nexport function getTranslatedPaymentMethodName(\n    language: LanguageService\n): (method: Partial<PaymentMethod> & Pick<PaymentMethod, 'id'>) => string | undefined {\n    return method => {\n        if (method.id === PaymentMethodId.Affirm) {\n            return language.translate('payment.affirm_name_text');\n        }\n\n        if (method.id === PaymentMethodId.Afterpay) {\n            return language.translate('payment.afterpay_name_text');\n        }\n\n        if (method.id === PaymentMethodId.Amazon) {\n            return language.translate('payment.amazon_name_text');\n        }\n\n        if (method.id === PaymentMethodId.Klarna) {\n            return language.translate('payment.klarna_name_text');\n        }\n\n        if (method.method === PaymentMethodType.Paypal) {\n            return language.translate('payment.paypal_name_text');\n        }\n\n        if (method.method === PaymentMethodType.PaypalCredit) {\n            return language.translate('payment.paypal_credit_name_text');\n        }\n\n        if (method.method === PaymentMethodType.Chasepay) {\n            return language.translate('payment.chasepay_name_text');\n        }\n\n        if (method.method === PaymentMethodType.VisaCheckout) {\n            return language.translate('payment.vco_name_text');\n        }\n\n        if (method.method === PaymentMethodType.GooglePay) {\n            return language.translate('payment.google_pay_name_text');\n        }\n    };\n}\n","import React, { Component, Fragment, MouseEventHandler, ReactNode } from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent: boolean = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <Fragment>\n                { children({ onClick: this.handleOpen }) }\n\n                { modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                }) }\n            </Fragment>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, WithLanguageProps } from '../locale';\nimport { Button, ButtonSize } from '../ui/button';\nimport { CheckboxFormField, FormField, TextArea } from '../ui/form';\nimport { Modal, ModalHeader, ModalTrigger, ModalTriggerModalProps } from '../ui/modal';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n}\n\nexport type TermsConditionsFieldProps = TermsConditionsLinkFieldProps | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst TermsConditionsModalLink: FunctionComponent<TermsConditionsTextFieldProps & WithLanguageProps> = ({\n    language,\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextArea\n            defaultValue={ terms }\n            name={ field.name }\n            readOnly\n            rows={ 5 }\n        />\n    ), [terms]);\n\n    const renderModal = useCallback((props: ModalTriggerModalProps) => (\n        <Modal\n            { ...props }\n            additionalModalClassName=\"modal--terms\"\n            footer={ (\n                <Button\n                    onClick={ props.onRequestClose }\n                    size={ ButtonSize.Small }\n                >\n                    { language.translate('common.ok_action') }\n                </Button>\n            ) }\n            header={ (\n                <ModalHeader>\n                    { language.translate('terms_and_conditions.terms_and_conditions_heading') }\n                </ModalHeader>\n            ) }\n            shouldShowCloseButton={ true }\n        >\n            <FormField\n                input={ renderInput }\n                name={ `${name}Text` }\n            />\n        </Modal>\n    ), [language, renderInput, name]);\n\n    const termsLabel = language.translate('terms_and_conditions.agreement_with_link_text', { url: '' });\n    const termsLabelPrefix = termsLabel.replace(/(<a.*)/g, '');\n    const termsLabelSuffix = termsLabel.replace(/.*<\\/a>/, '');\n    const termsLinkLabelMatches = termsLabel.match(/<a [^>]+>([^<]+)<\\/a>/);\n\n    const labelContent = (<>\n        { termsLabelPrefix }\n        <ModalTrigger modal={ renderModal }>\n            { ({ onClick }) => (\n                <a onClick={ preventDefault(onClick) }>\n                    { termsLinkLabelMatches && termsLinkLabelMatches[1] }\n                </a>\n            ) }\n        </ModalTrigger>\n        { termsLabelSuffix }\n    </>);\n\n    return (\n        <CheckboxFormField\n            labelContent={ labelContent }\n            name={ name }\n        />\n    );\n};\n\nconst TermsConditionsTranslatedModalLink = withLanguage(TermsConditionsModalLink);\nconst TermsConditionsExternalLinkField: FunctionComponent<TermsConditionsLinkFieldProps> = ({ name, url }) => (\n    <CheckboxFormField\n        labelContent={\n            <TranslatedHtml\n                data={ { url } }\n                id=\"terms_and_conditions.agreement_with_link_text\"\n            />\n        }\n        name={ name }\n    />\n);\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsFieldProps> = props => {\n    return areTermsConditionsTextFieldProps(props) ?\n        <TermsConditionsTranslatedModalLink { ...props } /> :\n        <TermsConditionsExternalLinkField { ...props } />;\n};\n\nfunction areTermsConditionsTextFieldProps(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nexport default memo(TermsConditionsCheckboxField);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { preventDefault } from '../../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../../locale';\n\nimport getPaymentMethodName from './getPaymentMethodName';\n\nexport interface SignOutLinkProps {\n    method: Partial<PaymentMethod> & Pick<PaymentMethod, 'id'>;\n    onSignOut(): void;\n}\n\nconst SignOutLink: FunctionComponent<SignOutLinkProps & WithLanguageProps> = ({\n    language,\n    method,\n    onSignOut,\n}) => (\n    <div className=\"signout-link\">\n        <TranslatedString id=\"remote.sign_out_before_action\" />\n\n        { ' ' }\n\n        <a href=\"#\" onClick={ preventDefault(onSignOut) }>\n            <TranslatedString\n                data={ { providerName: getPaymentMethodName(language)(method) } }\n                id=\"remote.sign_out_action\"\n            />\n        </a>\n\n        { ' ' }\n\n        <TranslatedString id=\"remote.sign_out_after_action\" />\n    </div>\n);\n\nexport default withLanguage(SignOutLink);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionProps {\n    children: ReactNode;\n    className?: string;\n    defaultSelectedItemId?: string;\n    onSelect?(id: string): void;\n}\n\nexport interface AccordionState {\n    selectedItemId?: string;\n}\n\nexport default class Accordion extends Component<AccordionProps, AccordionState> {\n    state: AccordionState = {};\n\n    private getContextValue = memoizeOne(selectedItemId => {\n        return {\n            onToggle: this.handleToggleItem,\n            selectedItemId,\n        };\n    });\n\n    render(): ReactNode {\n        const {\n            children,\n            className = 'accordion',\n            defaultSelectedItemId,\n        } = this.props;\n\n        const { selectedItemId = defaultSelectedItemId } = this.state;\n\n        return (\n            <AccordionContext.Provider value={ this.getContextValue(selectedItemId) }>\n                <ul className={ className }>\n                    { children }\n                </ul>\n            </AccordionContext.Provider>\n        );\n    }\n\n    private handleToggleItem: (id: string) => void = id => {\n        const { onSelect = noop } = this.props;\n\n        this.setState({ selectedItemId: id });\n        onSelect(id);\n    };\n}\n","import { noop } from 'lodash';\nimport React, { createContext, memo, useCallback, useMemo, FunctionComponent, ReactNode } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Accordion } from '../accordion';\n\nexport interface ChecklistProps {\n    children: ReactNode;\n    defaultSelectedItemId?: string;\n    name: string;\n    onSelect?(value: string): void;\n}\n\nexport interface ChecklistContextProps {\n    name: string;\n}\n\nexport const ChecklistContext = createContext<ChecklistContextProps | undefined>(undefined);\n\nconst Checklist: FunctionComponent<\n    ChecklistProps &\n    ConnectFormikProps<{ [key: string]: string }>\n> = ({\n    formik: { setFieldValue },\n    name,\n    onSelect = noop,\n    ...props\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        setFieldValue(name, value);\n        onSelect(value);\n    }, [\n        name,\n        onSelect,\n        setFieldValue,\n    ]);\n\n    const contextValue = useMemo(() => ({ name }), [name]);\n\n    return (\n        <ChecklistContext.Provider value={ contextValue }>\n            <Accordion\n                { ...props }\n                className=\"form-checklist optimizedCheckout-form-checklist\"\n                onSelect={ handleSelect }\n            />\n        </ChecklistContext.Provider>\n    );\n};\n\nexport default connectFormik(memo(Checklist));\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\n\nimport { RedeemableProps } from './Redeemable';\n\nexport default function mapToRedeemableProps(\n    context: CheckoutContextProps\n): RedeemableProps | null {\n    const {\n        checkoutService,\n        checkoutState: {\n            data: {\n                getConfig,\n                getCoupons,\n                getGiftCertificates,\n            },\n            statuses: {\n                isApplyingCoupon,\n                isApplyingGiftCertificate,\n                isRemovingCoupon,\n                isRemovingGiftCertificate,\n            },\n            errors: {\n                getApplyCouponError,\n                getApplyGiftCertificateError,\n                getRemoveCouponError,\n                getRemoveGiftCertificateError,\n            },\n        },\n    } = context;\n\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        appliedRedeemableError: getApplyCouponError() || getApplyGiftCertificateError(),\n        applyCoupon: checkoutService.applyCoupon,\n        applyGiftCertificate: checkoutService.applyGiftCertificate,\n        clearError: checkoutService.clearError,\n        coupons: getCoupons() || EMPTY_ARRAY,\n        giftCertificates: getGiftCertificates() || EMPTY_ARRAY,\n        isApplyingRedeemable: (isApplyingCoupon() || isApplyingGiftCertificate()),\n        isRemovingCoupon: isRemovingCoupon(),\n        isRemovingGiftCertificate: isRemovingGiftCertificate(),\n        onRemovedCoupon: checkoutService.removeCoupon,\n        onRemovedGiftCertificate: checkoutService.removeGiftCertificate,\n        removedRedeemableError: (getRemoveCouponError() || getRemoveGiftCertificateError()),\n        shouldCollapseCouponCode: config.checkoutSettings.isCouponCodeCollapsed,\n    };\n}\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import { Coupon } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nexport interface AppliedCouponProps {\n    coupon: Coupon;\n}\n\nconst AppliedCoupon: FunctionComponent<AppliedCouponProps> = ({ coupon }) => (\n    <div\n        className=\"redeemable-column redeemable-info\"\n        data-test=\"redeemable-item--coupon\"\n    >\n        <span className=\"redeemable-info-header\">\n            <span\n                className=\"redeemable-info-header--highlight\"\n                data-test=\"coupon-amount\"\n            >\n                { coupon.displayName }\n            </span>\n\n            { ' ' }\n\n            <TranslatedString id=\"redeemable.coupon_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\" data-test=\"coupon-code\">\n            { coupon.code }\n        </span>\n    </div>\n);\n\nexport default memo(AppliedCoupon);\n","import { GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { ShopperCurrency } from '../currency';\nimport { TranslatedString } from '../locale';\n\nexport interface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n}\n\nconst AppliedGiftCertificate: FunctionComponent<AppliedGiftCertificateProps> = ({ giftCertificate }) => (\n    <div\n        className=\"redeemable-column redeemable-info\"\n        data-test=\"redeemable-item--giftCertificate\"\n    >\n        <span className=\"redeemable-info-header\">\n            <span className=\"redeemable-info-header--highlight\" data-test=\"giftCertificate-amount\">\n                <ShopperCurrency amount={ giftCertificate.used } />\n            </span>\n\n            { ' ' }\n\n            <TranslatedString id=\"redeemable.gift_certificate_text\" />\n        </span>\n\n        <span className=\"redeemable-info-subHeader\">\n            { giftCertificate.remaining > 0 && <span className=\"redeemable-info-subHeader--remaining\">\n                <TranslatedString id=\"redeemable.gift_certificate_remaining_text\" />\n\n                { ' ' }\n\n                <span data-test=\"giftCertificate-remaining\">\n                    <ShopperCurrency amount={ giftCertificate.remaining } />\n                </span>\n            </span> }\n\n            <span data-test=\"giftCertificate-code\">\n                { giftCertificate.code }\n            </span>\n        </span>\n    </div>\n);\n\nexport default memo(AppliedGiftCertificate);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconRemove: FunctionComponent = () => (\n    <svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconRemove);\n","import classNames from 'classnames';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { IconRemove } from '../ui/icon';\n\nexport interface AppliedRedeemableProps {\n    isRemoving: boolean;\n    onRemove(): void;\n}\n\nconst AppliedRedeemable: FunctionComponent<AppliedRedeemableProps> = ({\n    children,\n    isRemoving,\n    onRemove,\n}) => (\n    <div className=\"form-checklist-header\">\n        <div className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\">\n            <span className=\"is-srOnly\">\n                <TranslatedString id=\"redeemable.applied_text\" />\n            </span>\n        </div>\n\n        <div className=\"form-label form-label-redeemable\">\n            <div className=\"redeemable\">\n                { children }\n                <div className=\"redeemable-column redeemable-actions\">\n                    <button\n                        className={ classNames(\n                            'redeemable-remove',\n                            { 'is-loading': isRemoving }\n                        ) }\n                        data-test=\"redeemable-remove\"\n                        disabled={ isRemoving }\n                        onClick={ onRemove }\n                        type=\"button\"\n                    >\n                        <IconRemove />\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default AppliedRedeemable;\n","import { Coupon, GiftCertificate } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { AppliedCoupon } from '../coupon';\nimport { AppliedGiftCertificate } from '../giftCertificate';\n\nimport AppliedRedeemable from './AppliedRedeemable';\n\ninterface AppliedCouponProps {\n    coupon: Coupon;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedCouponChecklistItem: FunctionComponent<AppliedCouponProps> = ({\n    coupon,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(coupon.code);\n    }, [\n        coupon,\n        onRemoved,\n    ]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable\n                isRemoving={ isRemoving }\n                onRemove={ handleRemove }\n            >\n                <AppliedCoupon coupon={ coupon } />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\ninterface AppliedGiftCertificateProps {\n    giftCertificate: GiftCertificate;\n    isRemoving?: boolean;\n    onRemoved(code: string): void;\n}\n\nconst AppliedGiftCertificateChecklistItem: FunctionComponent<AppliedGiftCertificateProps> = ({\n    giftCertificate,\n    onRemoved,\n    isRemoving = false,\n}) => {\n    const handleRemove = useCallback(() => {\n        onRemoved(giftCertificate.code);\n    }, [\n        giftCertificate,\n        onRemoved,\n    ]);\n\n    return (\n        <li className=\"form-checklist-item optimizedCheckout-form-checklist-item\">\n            <AppliedRedeemable\n                isRemoving={ isRemoving }\n                onRemove={ handleRemove }\n            >\n                <AppliedGiftCertificate giftCertificate={ giftCertificate } />\n            </AppliedRedeemable>\n        </li>\n    );\n};\n\nexport interface AppliedRedeemablesProps {\n    coupons?: Coupon[];\n    giftCertificates?: GiftCertificate[];\n    isRemovingGiftCertificate?: boolean;\n    isRemovingCoupon?: boolean;\n    onRemovedCoupon(code: string): void;\n    onRemovedGiftCertificate(code: string): void;\n}\n\nconst AppliedRedeemables: FunctionComponent<AppliedRedeemablesProps> = ({\n    coupons = [],\n    giftCertificates = [],\n    isRemovingCoupon = false,\n    isRemovingGiftCertificate = false,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n}) => {\n    if (!coupons.length && !giftCertificates.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"form-checklist optimizedCheckout-form-checklist\" data-test=\"redeemables-list\">\n            { coupons.map(coupon => (\n                <AppliedCouponChecklistItem\n                    coupon={ coupon }\n                    isRemoving={ isRemovingCoupon }\n                    key={ coupon.code }\n                    onRemoved={ onRemovedCoupon }\n                />\n            )) }\n\n            { giftCertificates.map(giftCertificate => (\n                <AppliedGiftCertificateChecklistItem\n                    giftCertificate={ giftCertificate }\n                    isRemoving={ isRemovingGiftCertificate }\n                    key={ giftCertificate.code }\n                    onRemoved={ onRemovedGiftCertificate }\n                />\n            )) }\n        </ul>\n    );\n};\n\nexport default memo(AppliedRedeemables);\n","import { CheckoutSelectors, RequestError } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { withFormik, FieldProps, FormikProps } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, KeyboardEvent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { FormContextType, FormField, FormProvider, Label, TextInput } from '../ui/form';\nimport { Toggle } from '../ui/toggle';\n\nimport AppliedRedeemables, { AppliedRedeemablesProps } from './AppliedRedeemables';\n\nexport interface RedeemableFormValues {\n    redeemableCode: string;\n}\n\nexport type ReedemableChildrenProps = Pick<RedeemableProps,\n    'onRemovedCoupon' |\n    'onRemovedGiftCertificate' |\n    'isRemovingGiftCertificate' |\n    'isRemovingCoupon' |\n    'coupons' |\n    'giftCertificates'\n>;\n\nexport type RedeemableProps = {\n    appliedRedeemableError?: RequestError;\n    isApplyingRedeemable?: boolean;\n    isRemovingRedeemable?: boolean;\n    removedRedeemableError?: RequestError;\n    showAppliedRedeemables?: boolean;\n    shouldCollapseCouponCode?: boolean;\n    applyCoupon(code: string): Promise<CheckoutSelectors>;\n    applyGiftCertificate(code: string): Promise<CheckoutSelectors>;\n    clearError(error: Error): void;\n} & AppliedRedeemablesProps;\n\nconst Redeemable: FunctionComponent<RedeemableProps & WithLanguageProps & FormikProps<RedeemableFormValues>> = ({\n    shouldCollapseCouponCode,\n    showAppliedRedeemables,\n    ...formProps\n}) => (\n    <Toggle openByDefault={ !shouldCollapseCouponCode }>\n        { ({ toggle, isOpen }) => (\n            <Fragment>\n                { shouldCollapseCouponCode && <a\n                    className=\"redeemable-label\"\n                    data-test=\"redeemable-label\"\n                    href=\"#\"\n                    onClick={ preventDefault(toggle) }\n                >\n                    <TranslatedString id=\"redeemable.toggle_action\" />\n                </a> }\n                { !shouldCollapseCouponCode && <div className=\"redeemable-label\">\n                    <TranslatedString id=\"redeemable.toggle_action\" />\n                </div> }\n                { (isOpen || !shouldCollapseCouponCode) && <div data-test=\"redeemable-collapsable\">\n                    <RedeemableForm { ...formProps } />\n                    { showAppliedRedeemables &&\n                        <AppliedRedeemables { ...formProps } /> }\n                </div> }\n            </Fragment>\n        ) }\n    </Toggle>\n);\n\nconst RedeemableForm: FunctionComponent<Partial<RedeemableProps> & FormikProps<RedeemableFormValues>> = ({\n    appliedRedeemableError,\n    isApplyingRedeemable,\n    clearError = noop,\n    submitForm,\n}) => {\n    const handleKeyDown = useCallback(memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (\n        (event: KeyboardEvent) => {\n            if (appliedRedeemableError) {\n                clearError(appliedRedeemableError);\n            }\n\n            // note: to prevent submitting main form, we manually intercept\n            // the enter key event and submit the \"subform\".\n            if (event.keyCode === 13) {\n                setSubmitted(true);\n                submitForm();\n                event.preventDefault();\n            }\n        }\n    )), [\n        appliedRedeemableError,\n        clearError,\n        submitForm,\n    ]);\n\n    const handleSubmit = useCallback(memoizeOne((setSubmitted: FormContextType['setSubmitted']) => (\n        () => {\n            setSubmitted(true);\n            submitForm();\n        }\n    )), []);\n\n    const renderLabel = useCallback((name: string) => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"redeemable.code_label\" />\n        </Label>\n    ), []);\n\n    const renderErrorMessage = useCallback((errorCode: string) => {\n        switch (errorCode) {\n        case 'min_purchase':\n            return <TranslatedString id=\"redeemable.coupon_min_order_total\" />;\n        case 'not_applicable':\n            return <TranslatedString id=\"redeemable.coupon_location_error\" />;\n        default:\n            return <TranslatedString id=\"redeemable.code_invalid_error\" />;\n        }\n    }, []);\n\n    const renderInput = useCallback((setSubmitted: FormContextType['setSubmitted']) => ({ field }: FieldProps) => (\n        <Fragment>\n            { appliedRedeemableError && appliedRedeemableError.errors && appliedRedeemableError.errors[0] &&\n                <Alert type={ AlertType.Error }>\n                    { renderErrorMessage(appliedRedeemableError.errors[0].code) }\n                </Alert> }\n\n            <div className=\"form-prefixPostfix\">\n                <TextInput\n                    { ...field }\n                    className=\"form-input optimizedCheckout-form-input\"\n                    onKeyDown={ handleKeyDown(setSubmitted) }\n                    testId=\"redeemableEntry-input\"\n                />\n\n                <Button\n                    className=\"form-prefixPostfix-button--postfix\"\n                    id=\"applyRedeemableButton\"\n                    isLoading={ isApplyingRedeemable }\n                    onClick={ handleSubmit(setSubmitted) }\n                    testId=\"redeemableEntry-submit\"\n                    variant={ ButtonVariant.Secondary }\n                >\n                    <TranslatedString id=\"redeemable.apply_action\" />\n                </Button>\n            </div>\n        </Fragment>\n    ), [\n        appliedRedeemableError,\n        handleKeyDown,\n        handleSubmit,\n        isApplyingRedeemable,\n        renderErrorMessage,\n    ]);\n\n    const renderContent = useCallback(memoizeOne(({ setSubmitted }: FormContextType) => (\n        <FormField\n            input={ renderInput(setSubmitted) }\n            label={ renderLabel }\n            name=\"redeemableCode\"\n        />\n    )), [\n        renderLabel,\n        renderInput,\n    ]);\n\n    return <fieldset className=\"form-fieldset redeemable-entry\">\n        <FormProvider>\n            { renderContent }\n        </FormProvider>\n    </fieldset>;\n};\n\nexport default withLanguage(withFormik<RedeemableProps & WithLanguageProps, RedeemableFormValues>({\n    mapPropsToValues() {\n        return {\n            redeemableCode: '',\n        };\n    },\n\n    async handleSubmit({ redeemableCode }, { props: { applyCoupon, applyGiftCertificate, clearError } }) {\n        const code = redeemableCode.trim();\n\n        try {\n            await applyGiftCertificate(code);\n        } catch (error) {\n            clearError(error);\n            applyCoupon(code);\n        }\n    },\n\n    validationSchema({ language }: RedeemableProps & WithLanguageProps) {\n        return object({\n            redeemableCode: string()\n                .required(language.translate('redeemable.code_required_error')),\n        });\n    },\n})(memo(Redeemable)));\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        { termsConditionsUrl ?\n            <TermsConditionsField\n                name=\"terms\"\n                type={ TermsConditionsType.Link }\n                url={ termsConditionsUrl }\n            /> :\n            <TermsConditionsField\n                name=\"terms\"\n                terms={ termsConditionsText }\n                type={ TermsConditionsType.TextArea }\n            /> }\n    </>\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean()\n            .oneOf([true], language.translate('terms_and_conditions.agreement_required_error'));\n    }\n\n    return object(schemaFields);\n}\n","import { connect } from 'formik';\nimport React, { memo, ComponentType, FunctionComponent } from 'react';\nimport shallowEqual from 'shallowequal';\n\nimport ConnectFormikProps from './ConnectFormikProps';\n\nexport default function connectFormik<\n    TProps extends ConnectFormikProps<TValues>,\n    TValues = any\n>(\n    OriginalComponent: ComponentType<TProps>\n): ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>> {\n    const InnerComponent: FunctionComponent<TProps> = memo(\n        props => <OriginalComponent { ...props } />,\n        ({ formik: prevFormik, ...prevProps }, { formik: nextFormik, ...nextProps }) => (\n            shallowEqual(prevFormik, nextFormik) && shallowEqual(prevProps, nextProps)\n        )\n    );\n\n    const DecoratedComponent = connect<TProps, TValues>(InnerComponent) as ComponentType<Omit<TProps, keyof ConnectFormikProps<TValues>>>;\n\n    DecoratedComponent.displayName = `ConnectFormik(${OriginalComponent.displayName || OriginalComponent.name})`;\n\n    return DecoratedComponent;\n}\n","import classNames from 'classnames';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport AccordionContext from './AccordionContext';\n\nexport interface AccordionItemProps {\n    bodyClassName?: string;\n    children?: ReactNode;\n    className?: string;\n    classNameSelected?: string;\n    headerClassName?: string;\n    headerClassNameSelected?: string;\n    itemId: string;\n    headerContent(props: AccordionItemHeaderProps): ReactNode;\n}\n\nexport interface AccordionItemHeaderProps {\n    isSelected: boolean;\n    onToggle(id: string): void;\n}\n\nconst AccordionItem: FunctionComponent<AccordionItemProps> = ({\n    bodyClassName = 'accordion-item-body',\n    children,\n    className = 'accordion-item',\n    classNameSelected = 'accordion-item--selected',\n    headerClassName = 'accordion-item-header',\n    headerClassNameSelected = 'accordion-item-header--selected',\n    headerContent,\n    itemId,\n}) => {\n    const { onToggle, selectedItemId } = useContext(AccordionContext);\n    const isSelected = selectedItemId === itemId;\n\n    const transitionEndListener = useCallback((node, done) => {\n        node.addEventListener('transitionend', ({ target }: Event) => {\n            if (target === node) {\n                done();\n            }\n        });\n    }, []);\n\n    return (\n        <li className={ classNames(\n            className,\n            { [classNameSelected]: isSelected }\n        ) }\n        >\n            <div className={ classNames(\n                headerClassName,\n                { [headerClassNameSelected]: isSelected }\n            ) }\n            >\n                { headerContent({ isSelected, onToggle }) }\n            </div>\n\n            { children && <CSSTransition\n                addEndListener={ transitionEndListener }\n                classNames={ bodyClassName }\n                in={ isSelected }\n                mountOnEnter\n                timeout={ {} }\n                unmountOnExit\n            >\n                <div className={ bodyClassName }>\n                    { children }\n                </div>\n            </CSSTransition> }\n        </li>\n    );\n};\n\nexport default memo(AccordionItem);\n","import React, { FunctionComponent, InputHTMLAttributes } from 'react';\n\nimport Input from './Input';\nimport Label from './Label';\n\nexport interface ChecklistItemInputProps extends InputHTMLAttributes<HTMLInputElement> {\n    isSelected: boolean;\n}\n\nconst ChecklistItemInput: FunctionComponent<ChecklistItemInputProps> = ({\n    id,\n    isSelected,\n    children,\n    ...props\n}) => (\n    <>\n        <Input\n            { ...props }\n            checked={ isSelected }\n            className=\"form-checklist-checkbox optimizedCheckout-form-checklist-checkbox\"\n            id={ id }\n            type=\"radio\"\n        />\n\n        <Label htmlFor={ id }>\n            { children }\n        </Label>\n    </>\n);\n\nexport default ChecklistItemInput;\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, useContext, FunctionComponent, ReactNode } from 'react';\n\nimport { AccordionItem, AccordionItemHeaderProps } from '../accordion';\n\nimport BasicFormField from './BasicFormField';\nimport { ChecklistContext } from './Checklist';\nimport ChecklistItemInput from './ChecklistItemInput';\n\nexport interface ChecklistItemProps {\n    content?: ReactNode;\n    htmlId?: string;\n    label: ReactNode | ((isSelected: boolean) => ReactNode);\n    value: string;\n}\n\nconst ChecklistItem: FunctionComponent<ChecklistItemProps> = ({\n    value,\n    content,\n    htmlId = kebabCase(value),\n    label,\n    ...rest\n}) => {\n    const { name = '' } = useContext(ChecklistContext) || {};\n\n    const renderInput = useCallback(memoizeOne((isSelected: boolean) => ({ field }: FieldProps) => (\n        <ChecklistItemInput\n            { ...field }\n            id={ htmlId }\n            isSelected={ field.value === value }\n            value={ value }\n        >\n            { label instanceof Function ?\n                label(isSelected) :\n                label }\n        </ChecklistItemInput>\n    )), [\n        htmlId,\n        label,\n        value,\n    ]);\n\n    const handleChange = useCallback(memoizeOne((onToggle: (id: string) => void) => (selectedValue: string) => {\n        if (value === selectedValue) {\n            onToggle(value);\n        }\n    }), []);\n\n    const renderHeaderContent = useCallback(({\n        isSelected,\n        onToggle,\n    }: AccordionItemHeaderProps) => (\n        <BasicFormField\n            className=\"form-checklist-option\"\n            name={ name }\n            onChange={ handleChange(onToggle) }\n            render={ renderInput(isSelected) }\n        />\n    ), [\n        handleChange,\n        name,\n        renderInput,\n    ]);\n\n    return (\n        <AccordionItem\n            { ...rest }\n            bodyClassName=\"form-checklist-body\"\n            className=\"form-checklist-item optimizedCheckout-form-checklist-item\"\n            classNameSelected=\"form-checklist-item--selected optimizedCheckout-form-checklist-item--selected\"\n            headerClassName=\"form-checklist-header\"\n            headerClassNameSelected=\"form-checklist-header--selected\"\n            headerContent={ renderHeaderContent }\n            itemId={ value }\n        >\n            { content }\n        </AccordionItem>\n    );\n};\n\nexport default memo(ChecklistItem);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport Alert, { AlertType } from './Alert';\n\nexport interface FlashMessage {\n    type: number;\n    message: string;\n}\n\nexport interface FlashAlertProps {\n    testId?: string;\n    message: FlashMessage;\n}\n\nconst FlashAlert: FunctionComponent<FlashAlertProps> = ({\n    message,\n    testId,\n}) => (\n    <Alert\n        testId={ testId }\n        type={ mapAlertType(message.type) }\n    >\n        { message.message }\n    </Alert>\n);\n\nfunction mapAlertType(type: number): AlertType | undefined {\n    switch (type) {\n    case 0:\n        return AlertType.Error;\n\n    case 1:\n        return AlertType.Success;\n\n    case 2:\n        return AlertType.Info;\n\n    case 3:\n        return AlertType.Warning;\n    }\n}\n\nexport default memo(FlashAlert);\n","import { TranslationData } from '@bigcommerce/checkout-sdk';\nimport { includes } from 'lodash';\n\nexport default function mapSubmitOrderErrorMessage(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string\n): string {\n    switch (error.type) {\n        case 'payment_cancelled':\n            return translate('payment.payment_cancelled');\n\n        case 'payment_method_invalid':\n            return translate('payment.payment_method_disabled_error');\n\n        case 'cart_changed':\n            return translate('shipping.cart_change_error');\n\n        default:\n            if (includes([\n                'order_could_not_be_finalized_error',\n                'provider_fatal_error',\n                'payment_invalid',\n                'provider_error',\n                'provider_widget_error',\n                'user_payment_error',\n            ], error.body && error.body.type)) {\n                return translate('payment.payment_method_error', { message: error.message });\n            }\n\n            if (error.message) {\n                return error.message;\n            }\n\n            return error.type === 'unrecoverable' ?\n                translate('common.unavailable_error') :\n                translate('payment.place_order_error');\n    }\n}\n\nexport function mapSubmitOrderErrorTitle(\n    error: any,\n    translate: (key: string, data?: TranslationData) => string\n): string {\n    if (error.type === 'unrecoverable') {\n        return translate('common.unavailable_heading');\n    }\n\n    return translate('common.error_heading');\n}\n","export interface ExpiryDate {\n    month: string;\n    year: string;\n}\n\nexport default function unformatCreditCardExpiryDate(value: string): ExpiryDate {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n\n    if (!/^\\d+$/.test(month) || !/^\\d+$/.test(year)) {\n        return { month: '', year: '' };\n    }\n\n    return {\n        month: month.length === 1 ? `0${month}` : month.slice(0, 2),\n        year: year.length === 2 ? `20${year}` : year.slice(0, 4),\n    };\n}\n","import { number } from 'card-validator';\n\nexport default function unformatCreditCardNumber(value: string, separator: string = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    return value.replace(new RegExp(separator, 'g'), '');\n}\n","import { compact } from 'lodash';\n\nexport default function getUniquePaymentMethodId(methodId: string, gatewayId?: string): string {\n    return compact([gatewayId, methodId]).join('-');\n}\n\nexport function parseUniquePaymentMethodId(value: string): { methodId: string; gatewayId?: string } {\n    const [gatewayId, methodId] = value.indexOf('-') > -1 ? value.split('-') : [undefined, value];\n\n    return { gatewayId, methodId };\n}\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nexport interface AdyenV2CardValidationProps {\n    verificationFieldsContainerId?: string;\n    shouldShowNumberField: boolean;\n}\n\nconst AdyenV2CardValidation: React.FunctionComponent<AdyenV2CardValidationProps> = ({\n    verificationFieldsContainerId,\n    shouldShowNumberField,\n}) => (\n    <div>\n        { shouldShowNumberField && <p>\n            <strong>\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n            </strong>\n\n            <br />\n\n            <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n        </p> }\n\n        <div className=\"form-ccFields\" id={ verificationFieldsContainerId }>\n            { <div className=\"form-field form-field--ccNumber\" style={ { display: (shouldShowNumberField) ? undefined : 'none' } }>\n                <label htmlFor=\"encryptedCardNumber\">\n                    <TranslatedString id=\"payment.credit_card_number_label\" />\n                </label>\n                <div className=\"form-input optimizedCheckout-form-input has-icon\" data-cse=\"encryptedCardNumber\" id=\"encryptedCardNumber\" />\n            </div> }\n            <div className=\"form-field form-ccFields-field--ccCvv\">\n                <label htmlFor=\"encryptedSecurityCode\">\n                    <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                </label>\n                <div\n                    className={ classNames(\n                        'form-input',\n                        'optimizedCheckout-form-input',\n                        'has-icon'\n                    ) }\n                    data-cse=\"encryptedSecurityCode\"\n                    id=\"encryptedSecurityCode\"\n                />\n            </div>\n        </div>\n    </div>\n);\n\nexport default AdyenV2CardValidation;\n","import React, { memo, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { CheckboxFormField } from '../../ui/form';\n\nexport interface CreditCardStorageFieldProps {\n    name: string;\n}\n\nconst CreditCardStorageField: FunctionComponent<CreditCardStorageFieldProps> = ({ name }) => {\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"payment.instrument_save_payment_method_label\" />\n    ), []);\n\n    return <CheckboxFormField\n        additionalClassName=\"form-field--saveInstrument\"\n        labelContent={ labelContent }\n        name={ name }\n    />;\n};\n\nexport default memo(CreditCardStorageField);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardAmex: FunctionComponent = () => (\n    <svg height=\"104\" viewBox=\"0 0 156 104\" width=\"156\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M144 104H12c-6.15 0-12-5.85-12-12V12C0 5.85 5.85 0 12 0h132c6.15 0 12 5.85 12 12v80c0 6.15-5.85 12-12 12z\" fill=\"#60C7EE\" />\n            <g fill=\"#FFF\">\n                <path d=\"M95.05 46.532v3.68h12.93v4.723H95.05V59.5h12.79l5.244-6.824-4.673-6.144H95.05m-59.707 9.382h5.906l-2.97-8.324-2.94 8.324\" />\n                <path d=\"M128.833 52.77l11.29-15.125h-19.067l-2.536 3.9-2.608-3.9h-46.59l-1.254 4.224-1.264-4.227H31.27L17.72 68.687h17.326l1.31-3.822h3.824l1.345 3.822h73.594l3.28-4.594 3.28 4.594h19.36l-4.867-6.343-7.342-9.574zM83.185 64.744H76.38v-17.66l-5.243 17.66h-6.16l-5.233-17.66v17.66H44.318l-1.345-3.823H33.54l-1.312 3.826h-8.483L33.85 41.588h9.065L52.94 64.56V41.59h10.927l4.214 14.09 4.187-14.09h10.92v23.156zm40.524 0l-5.31-7.44-5.31 7.44H86.72V41.588h27.085l4.76 7.124 4.63-7.124h9.062l-8.37 11.215 9.16 11.94h-9.338z\" />\n            </g>\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardDinersClub: FunctionComponent = () => (\n    <svg height=\"104\" viewBox=\"0 0 152 104\" width=\"152\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n        <defs>\n            <rect height=\"104\" id=\"a\" rx=\"12\" width=\"152\" />\n        </defs>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <mask fill=\"#fff\" id=\"b\">\n                <use xlinkHref=\"#a\" />\n            </mask>\n            <use fill=\"#F4F4F4\" xlinkHref=\"#a\" />\n            <rect fill=\"#F4F4F4\" height=\"104\" mask=\"url(#b)\" rx=\"12\" width=\"152\" x=\"1\" />\n            <g transform=\"translate(42 26)\">\n                <ellipse cx=\"26.716\" cy=\"26\" fill=\"#009FDA\" rx=\"26\" ry=\"26\" />\n                <path d=\"M24.116 0c13 0 25.997 11.643 25.997 26 0 14.355-12.997 26-25.997 26V0z\" fill=\"#009FDA\" />\n                <path d=\"M24.116 52V0H42.75c13 0 25.997 11.643 25.997 26 0 14.355-12.997 26-25.997 26H24.116z\" fill=\"#009FDA\" />\n                <circle cx=\"25.255\" cy=\"27.139\" fill=\"#F3F4F4\" r=\"24.539\" />\n                <path d=\"M38.255 24.983c0-7.09-6.34-13.02-11.54-14.583v29.167c5.2-1.563 11.54-7.488 11.54-14.584zM5.916 24.986c0 7.09 6.34 13.02 11.54 14.583V10.4c-5.2 1.565-11.54 7.493-11.54 14.586z\" fill=\"#009FDA\" />\n            </g>\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardDinersClub);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardDiscover: FunctionComponent = () => (\n    <svg height=\"104\" viewBox=\"0 0 152 104\" width=\"152\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n        <defs>\n            <rect height=\"104\" id=\"a\" rx=\"12\" width=\"152\" />\n        </defs>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <mask fill=\"#fff\" id=\"b\">\n                <use xlinkHref=\"#a\" />\n            </mask>\n            <use fill=\"#F4F4F4\" xlinkHref=\"#a\" />\n            <rect fill=\"#F4F4F4\" height=\"104\" mask=\"url(#b)\" rx=\"12\" width=\"152\" x=\"1\" />\n            <path d=\"M70.553 104H149c2.21 0 4-1.783 4-4.007V46.597C142.305 71.907 111.28 93.04 70.553 104z\" fill=\"#F76E20\" mask=\"url(#b)\" />\n            <g mask=\"url(#b)\" transform=\"translate(19 42)\">\n                <path d=\"M14.763 9.22c0 2.94-.824 5.19-2.47 6.752-1.652 1.56-4.035 2.344-7.15 2.344H.155V.466H5.68c2.876 0 5.106.772 6.69 2.31C13.97 4.31 14.764 6.46 14.764 9.22zm-3.876.1c0-3.834-1.672-5.75-5.004-5.75h-1.99v11.62h1.602c3.596.002 5.392-1.957 5.392-5.87zM17.51 18.316V.466h3.733v17.85H17.51zM34.774 13.608c0 1.616-.57 2.88-1.718 3.81-1.146.927-2.734 1.397-4.773 1.397-1.874 0-3.54-.36-4.987-1.074v-3.516c1.19.543 2.196.915 3.017 1.14.822.218 1.577.327 2.26.327.815 0 1.446-.16 1.882-.475.43-.313.657-.792.657-1.413 0-.35-.095-.66-.292-.933-.188-.277-.474-.54-.85-.79-.374-.25-1.134-.657-2.28-1.21-1.073-.512-1.877-1.008-2.42-1.477-.542-.47-.967-1.018-1.288-1.65-.32-.63-.48-1.363-.48-2.2 0-1.577.526-2.818 1.582-3.72 1.06-.908 2.514-1.356 4.38-1.356.913 0 1.787.108 2.617.328.83.217 1.702.53 2.607.927l-1.203 2.942c-.94-.39-1.72-.67-2.334-.818-.616-.153-1.22-.232-1.81-.232-.71 0-1.254.164-1.627.502-.38.334-.567.768-.567 1.305 0 .335.076.623.23.875.152.25.395.487.728.72.332.23 1.125.647 2.366 1.25 1.643.8 2.77 1.6 3.384 2.4.613.796.92 1.778.92 2.943zM46.018 3.62c-1.406 0-2.49.54-3.263 1.605C41.98 6.295 41.6 7.79 41.6 9.7c0 3.978 1.473 5.97 4.418 5.97 1.238 0 2.727-.305 4.492-.94v3.175c-1.446.613-3.06.916-4.842.916-2.56 0-4.52-.79-5.875-2.367-1.357-1.572-2.034-3.834-2.034-6.782 0-1.855.335-3.48 1.003-4.874.662-1.402 1.623-2.467 2.87-3.212C42.884.84 44.345.467 46.022.467c1.71 0 3.43.42 5.152 1.258l-1.203 3.077c-.663-.317-1.32-.592-1.99-.83-.67-.238-1.322-.352-1.964-.352zM81.828.467h3.77l-5.98 17.85h-4.07L69.578.466h3.772l3.312 10.62c.182.632.38 1.356.572 2.195.19.836.316 1.408.368 1.737.087-.75.387-2.05.902-3.932L81.828.468zM97.072 18.316h-10.14V.466h10.14V3.57h-6.407v3.92h5.964v3.1h-5.965v4.6h6.407v3.126zM105.128 11.467v6.85h-3.732V.466h5.13c2.39 0 4.158.44 5.31 1.326 1.145.882 1.72 2.22 1.72 4.02 0 1.048-.286 1.987-.853 2.802-.57.82-1.376 1.46-2.418 1.925 2.647 4.007 4.37 6.603 5.175 7.773h-4.142l-4.203-6.85-1.987.004zm0-3.077h1.206c1.177 0 2.05-.2 2.612-.596.558-.402.842-1.03.842-1.883 0-.847-.29-1.445-.862-1.806-.573-.36-1.46-.537-2.664-.537h-1.14l.006 4.823z\" fill=\"#414042\" />\n                <ellipse cx=\"61.024\" cy=\"9.393\" fill=\"#F76E20\" rx=\"8.802\" ry=\"8.926\" />\n            </g>\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardDiscover);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardJCB: FunctionComponent = () => (\n    <svg\n        clipRule=\"evenodd\"\n        fillRule=\"evenodd\"\n        strokeLinejoin=\"round\"\n        strokeMiterlimit=\"1.4\"\n        viewBox=\"0 0 480 301\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M444 0H24C12 0 0 12 0 24v240.1c0 24 12 36 36 36h408c24 0 36-12 36-36v-228C480 12 468 0 444 0z\" fill=\"#f4f4f4\" />\n        <path d=\"M314.8 174.9h21.5l2.7-.2c4-.8 7.6-4.5 7.6-9.6 0-5-3.5-8.6-7.6-9.6l-2.7-.3h-21.5V175z\" fill=\"#469951\" fillRule=\"nonzero\" />\n        <path d=\"M333.9 39.2a37.3 37.3 0 0 0-37.3 37.2v38.7h52.6c1.2 0 2.7 0 3.7.2 11.9.7 20.7 6.8 20.7 17.4 0 8.4-6 15.6-17 17v.4c12 .8 21.3 7.6 21.3 18 0 11.3-10.3 18.7-23.8 18.7h-57.7v75.7h54.7a37.3 37.3 0 0 0 37.2-37.3v-186H334z\" fill=\"#469951\" fillRule=\"nonzero\" />\n        <path d=\"M343.9 135.2c0-5-3.5-8.2-7.6-8.8l-2-.2h-19.5v18h19.5c.3 0 1.4 0 2-.2 4.1-.6 7.6-3.9 7.6-8.8z\" fill=\"#469951\" fillRule=\"nonzero\" />\n        <path d=\"M128 39.2a37.3 37.3 0 0 0-37.3 37.2v92a73.7 73.7 0 0 0 32.2 8.3c12.8 0 19.8-7.7 19.8-18.4V115h32v43.2c0 16.8-10.5 30.5-46 30.5-21.4 0-38.2-4.7-38.2-4.7v78.4h54.7a37.3 37.3 0 0 0 37.2-37.3V39.2H128z\" fill=\"#245797\" fillRule=\"nonzero\" />\n        <path d=\"M231 39.2a37.3 37.3 0 0 0-37.3 37.2v48.8c9.4-8 25.8-13.1 52.2-12 14 .7 29.2 4.6 29.2 4.6v15.8a70.9 70.9 0 0 0-28.2-8.2c-20-1.5-32.1 8.4-32.1 25.5 0 17.4 12 27.3 32 25.6a74.3 74.3 0 0 0 28.3-8.2v15.8s-15 3.9-29.2 4.5c-26.4 1.2-42.8-3.9-52.2-11.9v86h54.6a37.3 37.3 0 0 0 37.3-37.3V39.2h-54.7z\" fill=\"#ca4638\" fillRule=\"nonzero\" />\n    </svg>\n);\n\nexport default withIconContainer(IconCardJCB);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardMaestro: FunctionComponent = () => (\n    <svg viewBox=\"0 0 131.4 86.9\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M48.4 15.1h34.7v56.6H48.4z\" fill=\"#ff5f00\" />\n        <path d=\"M52 43.5a36 36 0 0 1 13.7-28.3 36 36 0 1 0 0 56.6 36 36 0 0 1-13.8-28.3z\" fill=\"#eb001b\" />\n        <path d=\"M120.5 65.8v-1.2h.5v-.2h-1.2v.2h.5v1.2zm2.3 0v-1.4h-.3l-.5 1-.4-1h-.3v1.4h.2v-1.1l.4 1h.3l.4-1v1zM124 43.5a36 36 0 0 1-58.3 28.3 36 36 0 0 0 0-56.7 36 36 0 0 1 58.2 28.3z\" fill=\"#f79e1b\" />\n    </svg>\n);\n\nexport default withIconContainer(IconCardMaestro);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardMastercard: FunctionComponent = () => (\n    <svg height=\"104\" viewBox=\"0 0 156 104\" width=\"156\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M144 104H12c-6.15 0-12-5.85-12-12V12C0 5.85 5.85 0 12 0h132c6.15 0 12 5.85 12 12v80c0 6.15-5.85 12-12 12z\" fill=\"#5473CC\" />\n            <path d=\"M78.25 36.84C73.475 31.432 66.5 28 58.71 28c-14.39 0-26.06 11.64-26.06 26 0 14.355 11.67 26 26.058 26 7.79 0 14.766-3.432 19.543-8.843-4.04-4.58-6.51-10.57-6.51-17.157 0-6.588 2.47-12.58 6.516-17.16z\" fill=\"#ED4A4A\" />\n            <path d=\"M78.25 36.84c-4.043 4.58-6.514 10.574-6.514 17.16s2.47 12.576 6.515 17.157c4.05-4.58 6.52-10.57 6.52-17.157 0-6.588-2.47-12.58-6.513-17.16z\" fill=\"#EA564B\" />\n            <path d=\"M97.793 28c-7.79 0-14.766 3.432-19.542 8.84-1.123 1.28-2.11 2.678-2.98 4.16h5.96c.95 1.625 1.69 3.377 2.27 5.2H72.97c-.53 1.672-.912 3.403-1.092 5.2H84.59c.09.858.176 1.716.176 2.6 0 .88-.052 1.745-.138 2.6H71.87c.18 1.797.562 3.528 1.09 5.2h10.57c-.58 1.83-1.36 3.567-2.31 5.2h-5.953c.863 1.477 1.853 2.878 2.98 4.157C83.025 76.567 90 80 97.79 80c14.39 0 26.057-11.645 26.057-26 .003-14.36-11.665-26-26.054-26z\" fill=\"#FFAF38\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardMastercard);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardUnionPay: FunctionComponent = () => (\n    <svg height=\"1597\" viewBox=\"0.3 0.4 295.5 188.8\" width=\"2500\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M281.3.5h-72.8-.2c-10 .3-22.4 8.3-24.7 18.2l-34.4 152.2c-2.3 10 3.9 18.1 13.8 18.3h76.4c9.8-.5 19.3-8.4 21.5-18.2l34.5-152.3c2.3-10-4-18.2-14.1-18.2\" fill=\"#01798a\" />\n        <path d=\"M149.2 171l34.4-152.3c2.3-10 14.7-18 24.7-18.2h-81c-10 .1-22.7 8.2-25 18.2L68 170.9c-2.3 10 4 18.1 13.8 18.3H163c-10-.2-16-8.3-13.8-18.3\" fill=\"#024381\" />\n        <path d=\"M68 171l34.3-152.3c2.3-10 15-18 25-18.3H60.4c-10.1 0-23 8.2-25.3 18.3L.7 170.9a19 19 0 0 0-.4 2.8v2.8c.7 7.3 6.3 12.6 14.3 12.7h67.1c-9.9-.2-16-8.3-13.8-18.3\" fill=\"#dd0228\" />\n        <path d=\"M128.7 111.4h1.2c1.2 0 2-.4 2.3-1.2l3.3-4.9h8.8l-1.8 3.2H153l-1.3 5H139c-1.4 2.2-3.2 3.2-5.3 3h-6.6l1.5-5.1m-1.5 7h23.1l-1.5 5.5h-9.3l-1.4 5.2h9l-1.4 5.3h-9l-2.1 7.7c-.6 1.3.1 1.9 2 1.7h7.4l-1.4 5h-14.1c-2.7 0-3.6-1.5-2.8-4.6l2.7-9.8h-5.8l1.5-5.3h5.7l1.5-5.2h-5.6l1.5-5.4zm36.9-13.1l-.4 3.1s4.4-3.2 8.3-3.2h14.7l-5.6 20.2c-.5 2.3-2.5 3.5-6 3.5h-16.6l-3.9 14.2c-.2.7.1 1.1 1 1.1h3.2l-1.2 4.4h-8.3c-3.1 0-4.5-1-4-2.8l11-40.5h7.8zm12.4 5.7h-13l-1.7 5.5s2.2-1.6 5.9-1.7h7.7l1-3.8zm-4.8 12.7c1 .1 1.5-.3 1.6-1.2l.8-2.9h-13l-1.2 4h11.8zm-8.8 6.5h7.6l-.2 3.3h2c1 0 1.5-.4 1.5-1l.6-2.1h6.3l-.8 3c-.8 2.6-2.6 4-5.7 4.1h-4v5.6c0 .9.7 1.3 2.4 1.3h3.8l-1.3 4.4h-9c-2.5.2-3.8-1-3.8-3.6l.6-15M71.6 78.3c-1 5-3.4 8.9-7 11.6-3.7 2.7-8.4 4-14.1 4-5.5 0-9.4-1.4-12-4.1-1.7-2-2.6-4.5-2.6-7.5 0-1.2.2-2.6.5-4l6-29.5h9.3l-6 29.2a9.4 9.4 0 0 0-.3 2.2c0 1.5.4 2.7 1.2 3.7 1 1.4 2.8 2.1 5.3 2.1 2.9 0 5.2-.7 7-2 1.8-1.5 3-3.5 3.6-6l6-29.2h9.2l-6 29.5m38.8-11.6h7.2L112 93h-7.2l5.7-26.3m2.3-9.6h7.3l-1.4 6.4h-7.3l1.4-6.4M124 91a9.7 9.7 0 0 1-2.8-7.4 17 17 0 0 1 .4-3.7c.8-4.3 2.6-7.7 5.5-10.2 2.8-2.5 6.2-3.8 10.2-3.8 3.2 0 5.8 1 7.7 2.7a9.9 9.9 0 0 1 2.8 7.5V78a33.8 33.8 0 0 1-.4 2c-.8 4.2-2.7 7.5-5.5 10a14.9 14.9 0 0 1-10.1 3.7c-3.3 0-5.9-.9-7.8-2.7m13.8-5.2c1.3-1.4 2.2-3.5 2.8-6.3a15.4 15.4 0 0 0 .3-2.6c0-1.6-.5-2.8-1.3-3.7-.8-1-2-1.4-3.5-1.4-2 0-3.6.7-5 2.1a13.3 13.3 0 0 0-2.7 6.4 33.6 33.6 0 0 0-.3 2.5c0 1.7.4 3 1.3 3.8.8.9 2 1.3 3.5 1.3 2 0 3.7-.7 5-2\" fill=\"#fff\" />\n        <path d=\"M208.5.5h-29.1H208.5\" fill=\"#e02f41\" />\n        <path d=\"M179.4.5h-51.8-.4 52.2\" fill=\"#2e4f7d\" />\n        <path d=\"M195 111.6l1.7-6.1h8.8l-.4 2.2s4.6-2.2 7.8-2.2h11l-1.8 6.1h-1.7l-8.3 29h1.8l-1.7 5.8h-1.7l-.7 2.5h-8.6l.7-2.5h-16.8l1.6-5.8h1.7l8.3-29h-1.8m9.6 0l-2.3 7.9s3.9-1.5 7.2-2l1.7-5.9h-6.6zm-3.3 11.5l-2.3 8.3s4.3-2.1 7.2-2.3l1.7-6h-6.6zm1.6 17.5l1.7-6H198l-1.7 6h6.6zm21.4-35.5h8.3l.4 3c0 .8.4 1.2 1.4 1.2h1.4l-1.5 5.2h-6c-2.4.1-3.6-.8-3.7-2.7l-.3-6.7zm-2.4 11.1h26.9l-1.6 5.6h-8.6l-1.4 5.2h8.5l-1.6 5.5h-9.5l-2.2 3.3h4.7l1 6.5c.2.7.8 1 1.8 1h1.4l-1.5 5.4h-5.1c-2.7.1-4-.8-4.2-2.7l-1.2-6-4.2 6.4a4.6 4.6 0 0 1-4.7 2.5h-7.8l1.5-5.4h2.5c1 0 1.8-.4 2.6-1.4l6.6-9.6h-8.6l1.6-5.5h9.3l1.5-5.2h-9.3l1.6-5.6M80 66.7h6.6l-.8 3.8 1-1.1c2-2.3 4.7-3.4 7.7-3.4 2.7 0 4.7.8 6 2.4 1.2 1.6 1.5 3.8 1 6.7l-3.7 18h-6.7l3.3-16.3c.3-1.7.2-3-.3-3.8-.5-.8-1.5-1.2-2.9-1.2-1.7 0-3.2.6-4.4 1.6a8 8 0 0 0-2.3 4.5l-3 15.2h-6.7L80 66.7m75 0h6.5l-.7 3.8 1-1.1c2-2.3 4.6-3.4 7.6-3.4 2.8 0 4.8.8 6 2.4 1.2 1.6 1.6 3.8 1 6.7l-3.6 18h-6.7l3.2-16.3c.4-1.7.3-3-.2-3.8-.6-.8-1.5-1.2-3-1.2-1.7 0-3.1.6-4.3 1.6-1.2 1.1-2 2.6-2.4 4.5l-3 15.2h-6.7l5.3-26.4m32.3-16.4h19c3.7 0 6.5.8 8.4 2.5 2 1.6 3 4 3 7v.1l-.2 2a29.4 29.4 0 0 1-.3 2.2c-.9 4-2.8 7.3-5.8 9.8-3 2.5-6.6 3.7-10.7 3.7h-10.2l-3.1 15.5h-8.9l8.8-42.8m4.8 19.9h8.4c2.2 0 4-.5 5.2-1.5a8 8 0 0 0 2.6-4.7l.2-1.1v-1c0-1.4-.5-2.5-1.6-3.2-1-.7-2.7-1-5-1h-7.3l-2.5 12.5m65 28c-2.8 5.9-5.5 9.3-7 11-1.6 1.5-4.7 5.2-12.1 5l.6-4.6c6.3-1.9 9.7-10.6 11.6-14.5L248 66.7h8.9l.5 17.8 7.6-17.8h7.7l-15.5 31.5m-21.6-29.4l-3 2.1c-3.3-2.5-6.2-4-11.8-1.4-7.7 3.6-14.2 31 7 22l1.2 1.3 8.4.3 5.4-24.9-7.2.6m-4.7 13.6c-1.4 4-4.4 6.6-6.7 5.8-2.4-.7-3.2-4.5-1.8-8.5 1.3-4 4.3-6.5 6.6-5.8 2.4.8 3.2 4.6 1.9 8.5\" fill=\"#fff\" />\n    </svg>\n);\n\nexport default withIconContainer(IconCardUnionPay);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardVisa: FunctionComponent = () => (\n    <svg height=\"100\" viewBox=\"0 0 148 100\" width=\"148\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M148 84c0 6.6-5.55 12-12 12H12C5.55 96 0 90.6 0 84V12C0 5.4 5.55 0 12 0h124c6.45 0 12 5.4 12 12v72z\" fill=\"#F3F4F4\" />\n            <path d=\"M0 24V12C0 5.4 5.74 0 12 0h124c6.26 0 12 5.4 12 12v12\" fill=\"#01579F\" />\n            <path d=\"M148 76v12c0 8.667-5.74 12-12 12H12c-6.26 0-12-3.333-12-12V76\" fill=\"#FAA41D\" />\n            <path d=\"M55.01 65.267l4.72-29.186h7.546l-4.72 29.19H55.01M89.913 36.8c-1.49-.59-3.85-1.242-6.77-1.242-7.452 0-12.7 3.974-12.73 9.656-.063 4.19 3.756 6.52 6.613 7.918 2.92 1.428 3.913 2.36 3.913 3.633-.04 1.957-2.36 2.857-4.54 2.857-3.014 0-4.628-.465-7.08-1.552l-.996-.466-1.055 6.55c1.77.808 5.03 1.52 8.415 1.553 7.92 0 13.075-3.912 13.137-9.967.03-3.322-1.987-5.868-6.334-7.948-2.64-1.336-4.256-2.236-4.256-3.602.032-1.242 1.367-2.514 4.348-2.514 2.453-.06 4.254.53 5.62 1.12l.684.31L89.91 36.8m10.03 18.13c.62-1.675 3.013-8.165 3.013-8.165-.03.062.62-1.707.994-2.794l.525 2.52s1.428 6.986 1.74 8.445H99.94zm9.317-18.846h-5.84c-1.8 0-3.17.53-3.945 2.424L88.265 65.27h7.918s1.305-3.6 1.585-4.377h9.687c.217 1.024.9 4.377.9 4.377h6.987l-6.082-29.19zm-60.555 0l-7.39 19.904-.807-4.037c-1.37-4.652-5.653-9.713-10.435-12.23l6.77 25.52h7.98L56.68 36.09H48.7\" fill=\"#3B5CAA\" />\n            <path d=\"M34.454 36.08H22.312l-.124.59c9.47 2.423 15.744 8.26 18.32 15.277L37.87 38.534c-.436-1.863-1.77-2.39-3.416-2.453\" fill=\"#F8A51D\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardVisa);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { IconCardAmex, IconCardDinersClub, IconCardDiscover, IconCardJCB, IconCardMaestro, IconCardMastercard, IconCardUnionPay, IconCardVisa, IconSize } from '../../ui/icon';\n\nexport interface CreditCardIconProps {\n    cardType?: string;\n}\n\nconst CreditCardIcon: FunctionComponent<CreditCardIconProps> = ({\n    cardType,\n}) => {\n    const iconProps = {\n        additionalClassName: 'cardIcon-icon',\n        size: IconSize.Medium,\n        testId: `credit-card-icon-${cardType || 'default'}`,\n    };\n\n    switch (cardType) {\n    case 'american-express':\n        return <IconCardAmex { ...iconProps } />;\n\n    case 'diners-club':\n        return <IconCardDinersClub { ...iconProps } />;\n\n    case 'discover':\n        return <IconCardDiscover { ...iconProps } />;\n\n    case 'jcb':\n        return <IconCardJCB { ...iconProps } />;\n\n    case 'maestro':\n        return <IconCardMaestro { ...iconProps } />;\n\n    case 'mastercard':\n        return <IconCardMastercard { ...iconProps } />;\n\n    case 'unionpay':\n        return <IconCardUnionPay { ...iconProps } />;\n\n    case 'visa':\n        return <IconCardVisa { ...iconProps } />;\n\n    default:\n        return <div className=\"cardIcon-icon cardIcon-icon--default icon icon--medium\" />;\n    }\n};\n\nexport default memo(CreditCardIcon);\n","export default function mapFromInstrumentCardType(type: string): string {\n    switch (type) {\n    case 'amex':\n    case 'american_express':\n        return 'american-express';\n\n    case 'diners':\n        return 'diners-club';\n\n    default:\n        return type;\n    }\n}\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { useCallback, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { CreditCardIcon } from '../creditCard';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface InstrumentSelectProps extends FieldProps<string> {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface InstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass InstrumentSelect extends PureComponent<InstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<InstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        this.updateFieldValue();\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <InstrumentMenu\n                            instruments={ instruments }\n                            onSelectInstrument={ onSelectInstrument }\n                            onUseNewInstrument={ onUseNewInstrument }\n                            selectedInstrumentId={ selectedInstrumentId }\n                        />\n                    }\n                >\n                    <InstrumentSelectButton\n                        instrument={ selectedInstrument }\n                        testId=\"instrument-select\"\n                    />\n\n                    <input\n                        type=\"hidden\"\n                        { ...field }\n                    />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId: string = ''): void {\n        const {\n            form,\n            field,\n        } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface InstrumentMenuProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst InstrumentMenu: FunctionComponent<InstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return <ul\n        className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n        data-test=\"instrument-select-menu\"\n    >\n        { instruments.map(instrument => (\n            <li\n                className={ classNames(\n                    'instrumentSelect-option dropdown-menu-item',\n                    { 'instrumentSelect-option--selected': instrument.bigpayToken === selectedInstrumentId }\n                ) }\n                key={ instrument.bigpayToken }\n            >\n                <InstrumentOption\n                    instrument={ instrument }\n                    onClick={ onSelectInstrument }\n                    testId=\"instrument-select-option\"\n                />\n            </li>\n        )) }\n\n        <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n            <InstrumentUseNewButton\n                onClick={ onUseNewInstrument }\n                testId=\"instrument-select-option-use-new\"\n            />\n        </li>\n    </ul>;\n};\n\ninterface InstrumentSelectButtonProps {\n    instrument?: CardInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentSelectButton: FunctionComponent<InstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <InstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={ testId }\n            />\n        );\n    }\n\n    return (\n        <InstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={ instrument }\n            onClick={ onClick }\n            testId={ testId }\n        />\n    );\n};\n\ninterface InstrumentOptionProps {\n    instrument: CardInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst InstrumentOption: FunctionComponent<InstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [\n        onClick,\n        instrument,\n    ]);\n\n    return (\n        <InstrumentMenuItem\n            instrument={ instrument }\n            onClick={ handleClick }\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface InstrumentMenuItemProps {\n    className?: string;\n    instrument: CardInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentMenuItem: FunctionComponent<InstrumentMenuItemProps> = ({\n    className,\n    instrument,\n    testId,\n    onClick,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid === false;\n\n    return (\n        <button\n            className={ className }\n            data-test={ testId }\n            onClick={ onClick }\n            type=\"button\"\n        >\n            <div className={ classNames(\n                'instrumentSelect-details',\n                { 'instrumentSelect-details--expired': isExpired }\n            ) }\n            >\n                <CreditCardIcon cardType={ cardType } />\n\n                <div\n                    className=\"instrumentSelect-card\"\n                    data-test={ `${testId}-last4` }\n                >\n                    { cardInfo ?\n                        <TranslatedString\n                            data={ { cardTitle: cardInfo.niceType, endingIn: instrument.last4 } }\n                            id=\"payment.instrument_ending_in_text\"\n                        /> :\n                        <TranslatedString\n                            data={ { endingIn: instrument.last4 } }\n                            id=\"payment.instrument_default_ending_in_text\"\n                        /> }\n                </div>\n\n                <div\n                    className={ classNames(\n                        'instrumentSelect-expiry',\n                        { 'instrumentSelect-expiry--expired': isExpired }\n                    ) }\n                    data-test={ `${testId}-expiry` }\n                >\n                    { isExpired ?\n                        <TranslatedString\n                            data={ { expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}` } }\n                            id=\"payment.instrument_expired_text\"\n                        /> :\n                        <TranslatedString\n                            data={ { expiryDate: `${instrument.expiryMonth}/${instrument.expiryYear}` } }\n                            id=\"payment.instrument_expires_text\"\n                        /> }\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface InstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst InstrumentUseNewButton: FunctionComponent<InstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button\n        className={ className }\n        data-test={ testId }\n        onClick={ onClick }\n        type=\"button\"\n    >\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <CreditCardIcon />\n\n            <div className=\"instrumentSelect-card\">\n                <TranslatedString id=\"payment.instrument_add_card_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default InstrumentSelect;\n","import { AccountInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isAccountInstrument(instrument: PaymentInstrument): instrument is AccountInstrument {\n    return instrument.type === 'account';\n}\n","import { CardInstrument, PaymentInstrument } from '@bigcommerce/checkout-sdk';\n\nexport default function isCardInstrument(instrument: PaymentInstrument): instrument is CardInstrument {\n    return instrument.type === 'card';\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconPaypal: FunctionComponent = () => (\n    <svg\n        height=\"300\"\n        viewBox=\"0 0 255 300\"\n        width=\"255\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M228.03 77.2c3.6-23.02-.03-38.7-12.48-52.89C201.83 8.7 177.07 2 145.4 2H53.4c-6.47 0-11.99 4.7-12.99 11.11L2.1 256.03a7.9 7.9 0 0 0 7.8 9.14h56.78c79.33-53.38 148.45-81.4 161.35-187.97z\" fill=\"#253B80\" />\n        <path d=\"M228.02 77.2C124 73 95 98 80.5 177.52l-13.82 87.65-3.91 24.85a6.9 6.9 0 0 0 6.82 7.98h47.86c5.67 0 10.48-4.12 11.37-9.71l.48-2.43 9-57.2.59-3.15c.88-5.6 5.7-9.73 11.37-9.73h7.16c46.38 0 82.68-18.83 93.29-73.33 4.43-22.76 2.14-41.77-9.6-55.14a45.77 45.77 0 0 0-13.1-10.1z\" fill=\"#179BD7\" />\n        <path d=\"M215.33 72.14c-3.88-1.12-7.82-2-11.8-2.62a149.83 149.83 0 0 0-23.79-1.73h-72.1a11.49 11.49 0 0 0-11.36 9.73l-15.34 97.16-.44 2.84a13.1 13.1 0 0 1 12.95-11.1h27c53 0 94.5-21.53 106.62-83.82.37-1.85.67-3.64.95-5.4a64.66 64.66 0 0 0-9.98-4.2c-.9-.3-1.8-.59-2.71-.86z\" fill=\"#222D65\" />\n    </svg>\n);\n\nexport default withIconContainer(IconPaypal);\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { IconPaypal, IconSize } from '../../ui/icon';\nimport { LoadingOverlay } from '../../ui/loading';\n\nexport interface ManageAccountInstrumentsTableProps {\n    instruments: AccountInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsTable: FunctionComponent<ManageAccountInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p><TranslatedString id=\"payment.instrument_manage_modal_empty_text\" /></p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isDeletingInstrument }>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th><TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" /></th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    { instruments.map(instrument => (\n                        <ManageInstrumentsRow\n                            instrument={ instrument }\n                            key={ instrument.bigpayToken }\n                            onDeleteInstrument={ onDeleteInstrument }\n                        />\n                    )) }\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: AccountInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [\n        instrument,\n        onDeleteInstrument,\n    ]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-accountExternalId\">\n                <IconPaypal\n                    additionalClassName=\"accountIcon-icon\"\n                    size={ IconSize.Medium }\n                />\n\n                <span className=\"instrumentModal-instrumentAccountExternalId\">\n                    { instrument.externalId }\n                </span>\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={ handleDelete }\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageInstrumentsTable);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { expirationDate } from 'card-validator';\nimport classNames from 'classnames';\nimport creditCardType from 'credit-card-type';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport { CreditCardIcon } from '../creditCard';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\n\nexport interface ManageCardInstrumentsTableProps {\n    instruments: CardInstrument[];\n    isDeletingInstrument: boolean;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageCardInstrumentsTable: FunctionComponent<ManageCardInstrumentsTableProps> = ({\n    instruments,\n    isDeletingInstrument,\n    onDeleteInstrument,\n}) => {\n    if (instruments.length === 0) {\n        return (\n            <p><TranslatedString id=\"payment.instrument_manage_modal_empty_text\" /></p>\n        );\n    }\n\n    return (\n        <LoadingOverlay isLoading={ isDeletingInstrument }>\n            <table className=\"table\">\n                <thead className=\"table-thead\">\n                    <tr>\n                        <th><TranslatedString id=\"payment.instrument_manage_table_header_payment_method_text\" /></th>\n                        <th><TranslatedString id=\"payment.instrument_manage_table_header_ending_in_text\" /></th>\n                        <th><TranslatedString id=\"payment.instrument_manage_table_header_expiry_date_text\" /></th>\n                        <th />\n                    </tr>\n                </thead>\n\n                <tbody className=\"table-tbody\">\n                    { instruments.map(instrument => (\n                        <ManageInstrumentsRow\n                            instrument={ instrument }\n                            key={ instrument.bigpayToken }\n                            onDeleteInstrument={ onDeleteInstrument }\n                        />\n                    )) }\n                </tbody>\n            </table>\n        </LoadingOverlay>\n    );\n};\n\ninterface ManageInstrumentsRowProps {\n    instrument: CardInstrument;\n    onDeleteInstrument(id: string): void;\n}\n\nconst ManageInstrumentsRow: FunctionComponent<ManageInstrumentsRowProps> = ({\n    instrument,\n    onDeleteInstrument,\n}) => {\n    const cardType = mapFromInstrumentCardType(instrument.brand);\n    const cardInfo = creditCardType.getTypeInfo(cardType);\n    const isExpired = expirationDate({\n        month: instrument.expiryMonth,\n        year: instrument.expiryYear,\n    }).isValid === false;\n\n    const handleDelete = useCallback(() => {\n        onDeleteInstrument(instrument.bigpayToken);\n    }, [\n        instrument,\n        onDeleteInstrument,\n    ]);\n\n    return (\n        <tr>\n            <td data-test=\"manage-instrument-cardType\">\n                <CreditCardIcon cardType={ cardType } />\n\n                { cardInfo && <span className=\"instrumentModal-instrumentCardType\">\n                    { cardInfo.niceType }\n                </span> }\n            </td>\n            <td data-test=\"manage-instrument-last4\">\n                { instrument.last4 }\n            </td>\n            <td\n                className={ classNames({ 'instrumentModal-instrumentExpiry--expired': isExpired }) }\n                data-test=\"manage-instrument-expiry\"\n            >\n                { `${instrument.expiryMonth}/${instrument.expiryYear}` }\n            </td>\n            <td>\n                <button\n                    className=\"button button--tiny table-actionButton optimizedCheckout-buttonSecondary\"\n                    data-test=\"manage-instrument-delete-button\"\n                    onClick={ handleDelete }\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.delete_action\" />\n                </button>\n            </td>\n        </tr>\n    );\n};\n\nexport default memo(ManageCardInstrumentsTable);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { Alert, AlertType } from '../../ui/alert';\n\nexport interface ManageInstrumentsAlertProps {\n    error: any; // TODO: Fix typing\n}\n\nconst ManageInstrumentsAlert: FunctionComponent<ManageInstrumentsAlertProps> = ({\n    error,\n}) => {\n    const { status } = error;\n\n    if (status === 401) {\n        return (\n            <Alert type={ AlertType.Error }>\n                <TranslatedString id=\"payment.instrument_manage_delete_auth_error\" />\n            </Alert>\n        );\n    }\n\n    if (status >= 400 && status < 500) {\n        return (\n            <Alert type={ AlertType.Error }>\n                <TranslatedString id=\"payment.instrument_manage_delete_client_error\" />\n            </Alert>\n        );\n    }\n\n    return (\n        <Alert type={ AlertType.Error }>\n            <TranslatedString id=\"payment.instrument_manage_delete_server_error\" />\n        </Alert>\n    );\n};\n\nexport default memo(ManageInstrumentsAlert);\n","import { CheckoutSelectors, PaymentInstrument } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport { TranslatedString } from '../../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../../ui/button';\nimport { Modal, ModalHeader } from '../../ui/modal';\n\nimport isAccountInstrument from './isAccountInstrument';\nimport isCardInstrument from './isCardInstrument';\nimport ManageAccountInstrumentsTable from './ManageAccountInstrumentsTable';\nimport ManageCardInstrumentsTable from './ManageCardInstrumentsTable';\nimport ManageInstrumentsAlert from './ManageInstrumentsAlert';\n\nexport interface ManageInstrumentsModalProps {\n    isOpen: boolean;\n    instruments: PaymentInstrument[];\n    onAfterOpen?(): void;\n    onDeleteInstrumentError?(error: Error): void;\n    onRequestClose?(): void;\n}\n\nexport interface ManageInstrumentsModalState {\n    isConfirmingDelete: boolean;\n    selectedInstrumentId?: string;\n}\n\ninterface WithCheckoutProps {\n    deleteInstrumentError?: Error;\n    isDeletingInstrument: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    deleteInstrument(id: string): Promise<CheckoutSelectors>;\n}\n\nclass ManageInstrumentsModal extends Component<ManageInstrumentsModalProps & WithCheckoutProps, ManageInstrumentsModalState> {\n    state: ManageInstrumentsModalState = {\n        isConfirmingDelete: false,\n    };\n\n    render(): ReactNode {\n        const {\n            deleteInstrumentError,\n            isOpen,\n            onRequestClose,\n        } = this.props;\n\n        return (\n            <Modal\n                closeButtonLabel={ <TranslatedString id=\"common.close_action\" /> }\n                footer={ this.renderFooter() }\n                header={\n                    <ModalHeader>\n                        <TranslatedString id=\"payment.instrument_manage_modal_title_text\" />\n                    </ModalHeader>\n                }\n                isOpen={ isOpen }\n                onAfterOpen={ this.handleAfterOpen }\n                onRequestClose={ onRequestClose }\n            >\n                { deleteInstrumentError && <ManageInstrumentsAlert error={ deleteInstrumentError } /> }\n\n                { this.renderContent() }\n            </Modal>\n        );\n    }\n\n    private renderContent(): ReactNode {\n        const {\n            instruments,\n            isDeletingInstrument,\n        } = this.props;\n\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <p><TranslatedString id=\"payment.instrument_manage_modal_confirmation_label\" /></p>\n            );\n        }\n        const cardInstruments = instruments.filter(isCardInstrument);\n        const accountInstruments = instruments.filter(isAccountInstrument);\n\n        return (\n            accountInstruments.length\n                ? <ManageAccountInstrumentsTable\n                    instruments={ accountInstruments }\n                    isDeletingInstrument={ isDeletingInstrument }\n                    onDeleteInstrument={ this.handleDeleteInstrument }\n                />\n                : <ManageCardInstrumentsTable\n                    instruments={ cardInstruments }\n                    isDeletingInstrument={ isDeletingInstrument }\n                    onDeleteInstrument={ this.handleDeleteInstrument }\n                />\n        );\n    }\n\n    private renderFooter(): ReactNode {\n        const { isDeletingInstrument, onRequestClose } = this.props;\n        const { isConfirmingDelete } = this.state;\n\n        if (isConfirmingDelete) {\n            return (\n                <Fragment>\n                    <Button\n                        data-test=\"manage-instrument-cancel-button\"\n                        onClick={ this.handleCancel }\n                        size={ ButtonSize.Small }\n                    >\n                        <TranslatedString id=\"common.cancel_action\" />\n                    </Button>\n\n                    <Button\n                        data-test=\"manage-instrument-confirm-button\"\n                        disabled={ isDeletingInstrument }\n                        onClick={ this.handleConfirmDelete }\n                        size={ ButtonSize.Small }\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"payment.instrument_manage_modal_confirmation_action\" />\n                    </Button>\n                </Fragment>\n            );\n        }\n\n        return (\n            <Button\n                data-test=\"manage-instrument-close-button\"\n                onClick={ onRequestClose }\n                size={ ButtonSize.Small }\n            >\n                <TranslatedString id=\"common.close_action\" />\n            </Button>\n        );\n    }\n\n    private handleAfterOpen: () => void = () => {\n        const { onAfterOpen } = this.props;\n\n        this.setState({\n            isConfirmingDelete: false,\n        }, onAfterOpen);\n    };\n\n    private handleCancel: () => void = () => {\n        const {\n            clearError,\n            deleteInstrumentError,\n        } = this.props;\n\n        if (deleteInstrumentError) {\n            clearError(deleteInstrumentError);\n        }\n\n        this.setState({\n            isConfirmingDelete: false,\n        });\n    };\n\n    private handleConfirmDelete: () => void = async () => {\n        const { deleteInstrument, onDeleteInstrumentError = noop, onRequestClose = noop } = this.props;\n        const { selectedInstrumentId } = this.state;\n\n        if (!selectedInstrumentId) {\n            return;\n        }\n\n        try {\n            await deleteInstrument(selectedInstrumentId);\n            onRequestClose();\n        } catch (error) {\n            onDeleteInstrumentError(error);\n        }\n    };\n\n    private handleDeleteInstrument: (id: string) => void = id => {\n        this.setState({\n            isConfirmingDelete: true,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nexport function mapFromCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutProps | null {\n    const {\n        errors: { getDeleteInstrumentError },\n        statuses: { isDeletingInstrument },\n    } = checkoutState;\n\n    return {\n        clearError: checkoutService.clearError,\n        deleteInstrument: checkoutService.deleteInstrument,\n        deleteInstrumentError: getDeleteInstrumentError(),\n        isDeletingInstrument: isDeletingInstrument(),\n    };\n}\n\nexport default withCheckout(mapFromCheckoutProps)(ManageInstrumentsModal);\n","import { CardInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport InstrumentSelect from './InstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface CardInstrumentFieldsetProps {\n    instruments: CardInstrument[];\n    selectedInstrumentId?: string;\n    validateInstrument?: React.ReactNode;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface CardInstrumentFieldsetValues {\n    ccCvv?: string;\n    ccNumber?: string;\n    instrumentId: string;\n}\n\nconst CardInstrumentFieldset: FunctionComponent<CardInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrumentId,\n    validateInstrument = null,\n}) => {\n    const renderInput = useCallback((field: FieldProps) => (\n        <InstrumentSelect\n            { ...field }\n            instruments={ instruments }\n            onSelectInstrument={ onSelectInstrument }\n            onUseNewInstrument={ onUseNewInstrument }\n            selectedInstrumentId={ selectedInstrumentId }\n        />\n    ), [\n        instruments,\n        onSelectInstrument,\n        onUseNewInstrument,\n        selectedInstrumentId,\n    ]);\n\n    const renderModal = useCallback((props: ModalTriggerModalProps) => (\n        <ManageInstrumentsModal\n            instruments={ instruments }\n            { ...props }\n        />\n    ), [instruments]);\n\n    return <Fieldset\n        additionalClassName=\"instrumentFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.instrument_text\" />\n            </Legend>\n        }\n    >\n        <ModalTrigger modal={ renderModal }>\n            { ({ onClick }) => <button\n                className=\"instrumentModal-trigger\"\n                onClick={ onClick }\n                type=\"button\"\n            >\n                <TranslatedString id=\"payment.instrument_manage_button\" />\n            </button> }\n        </ModalTrigger>\n\n        <BasicFormField\n            name=\"instrumentId\"\n            render={ renderInput }\n        />\n\n        <div style={ {display: selectedInstrumentId ? undefined : 'none'} }>\n            { validateInstrument }\n        </div>\n    </Fieldset>;\n};\n\nexport default memo(CardInstrumentFieldset);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconLock: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconLock);\n","import creditCardType from 'credit-card-type';\nimport { FieldProps } from 'formik';\nimport { max } from 'lodash';\nimport React, { createRef, memo, useCallback, useMemo, ChangeEventHandler, Fragment, FunctionComponent, PureComponent, ReactNode, RefObject } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconLock } from '../../ui/icon';\n\nimport formatCreditCardNumber from './formatCreditCardNumber';\n\nexport interface CreditCardNumberFieldProps {\n    name: string;\n}\n\nconst CreditCardNumberField: FunctionComponent<CreditCardNumberFieldProps> = ({ name }) => {\n    const renderInput = useCallback(({ field, form }: FieldProps) => (\n        <CreditCardNumberInput\n            field={ field }\n            form={ form }\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"payment.credit_card_number_label\" />\n    ), []);\n\n    return <FormField\n        additionalClassName=\"form-field--ccNumber\"\n        input={ renderInput }\n        labelContent={ labelContent }\n        name={ name }\n    />;\n};\n\nclass CreditCardNumberInput extends PureComponent<FieldProps<string>> {\n    private inputRef: RefObject<HTMLInputElement> = createRef();\n    private nextSelectionEnd: number = 0;\n\n    componentDidUpdate(): void {\n        if (this.inputRef.current && this.inputRef.current.selectionEnd !== this.nextSelectionEnd) {\n            this.inputRef.current.setSelectionRange(this.nextSelectionEnd, this.nextSelectionEnd);\n        }\n    }\n\n    render(): ReactNode {\n        const { field } = this.props;\n\n        return (\n            <Fragment>\n                <TextInput\n                    { ...field }\n                    additionalClassName=\"has-icon\"\n                    autoComplete=\"cc-number\"\n                    id={ field.name }\n                    onChange={ this.handleChange }\n                    ref={ this.inputRef }\n                    type=\"tel\"\n                />\n\n                <IconLock />\n            </Fragment>\n        );\n    }\n\n    private handleChange: ChangeEventHandler<HTMLInputElement> = event => {\n        const separator = ' ';\n        const { value = '' } = event.target;\n        const { field, form } = this.props;\n        const { name, value: previousValue = '' } = field;\n        const selectionEnd = this.inputRef.current && this.inputRef.current.selectionEnd;\n\n        // Only allow digits and spaces\n        if (new RegExp(`[^\\\\d${separator}]`).test(value)) {\n            return form.setFieldValue(name, previousValue);\n        }\n\n        const maxLength = max(\n            creditCardType(value)\n                .map(info => max(info.lengths))\n        );\n\n        const formattedValue = formatCreditCardNumber(\n            value.replace(new RegExp(separator, 'g'), '').slice(0, maxLength),\n            separator\n        );\n\n        if (selectionEnd === value.length && value.length < formattedValue.length) {\n            this.nextSelectionEnd = formattedValue.length;\n        } else {\n            this.nextSelectionEnd = selectionEnd || 0;\n        }\n\n        form.setFieldValue(name, formattedValue);\n    };\n}\n\nexport default memo(CreditCardNumberField);\n","import { number } from 'card-validator';\n\nimport unformatCreditCardNumber from './unformatCreditCardNumber';\n\nexport default function formatCreditCardNumber(value: string, separator: string = ' '): string {\n    const { card } = number(value);\n\n    if (!card) {\n        return value;\n    }\n\n    const unformattedValue = unformatCreditCardNumber(value, separator);\n\n    return card.gaps\n        .filter(gapIndex => unformattedValue.length > gapIndex)\n        .reduce((output, gapIndex, index) => (\n            [\n                output.slice(0, gapIndex + index),\n                output.slice(gapIndex + index),\n            ].join(separator)\n        ), unformattedValue);\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconHelp: FunctionComponent = () => (\n    <svg\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconHelp);\n","import { Placement } from 'popper.js';\nimport React, { Component, ReactEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface TooltipTriggerProps {\n    placement?: Placement;\n    tooltip: ReactNode;\n}\n\nexport interface TooltipTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class TooltipTrigger extends Component<TooltipTriggerProps, TooltipTriggerState> {\n    static defaultProps = {\n        placement: 'bottom',\n    };\n\n    state: Readonly<TooltipTriggerState> = {\n        shouldShow: false,\n    };\n\n    render() {\n        const { children, placement, tooltip } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <span\n                            onBlur={ this.handleHide }\n                            onFocus={ this.handleShow }\n                            onMouseEnter={ this.handleShow }\n                            onMouseLeave={ this.handleHide }\n                            ref={ ref }\n                        >\n                            { children }\n                        </span>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => (\n                        shouldShow && <div\n                            ref={ ref }\n                            style={ style }\n                        >\n                            { tooltip }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleShow: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: true });\n    };\n\n    private handleHide: ReactEventHandler<HTMLElement> = () => {\n        this.setState({ shouldShow: false });\n    };\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeVisa: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV visa, mc, disc</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <path d=\"M0 5h88v12H0z\" fill=\"#838383\" />\n            <path d=\"M3 23h82v10H3z\" fill=\"#FFF\" />\n            <path d=\"M69.81 29.053c.015.297.13.502.343.616.11.058.233.088.37.088.258 0 .477-.107.66-.32.18-.215.31-.65.384-1.306-.12.19-.267.322-.444.4-.176.076-.366.114-.57.114-.412 0-.74-.13-.98-.386-.24-.257-.36-.588-.36-.993 0-.388.12-.73.357-1.025.237-.295.587-.443 1.05-.443.623 0 1.054.28 1.29.842.133.31.2.696.2 1.16 0 .525-.08.99-.238 1.394-.26.674-.703 1.01-1.327 1.01-.42 0-.737-.11-.954-.328-.217-.22-.325-.494-.325-.825h.544zm1.4-1.09c.176-.14.265-.387.265-.737 0-.315-.08-.55-.238-.705-.16-.153-.36-.23-.606-.23-.262 0-.47.088-.625.264-.155.177-.232.412-.232.707 0 .28.068.502.203.667.136.164.352.246.65.246.213 0 .408-.07.584-.21zm3.414-.563c.133-.132.2-.29.2-.474 0-.16-.064-.306-.19-.44-.13-.133-.323-.2-.585-.2-.26 0-.447.067-.563.2-.115.134-.173.29-.173.47 0 .202.075.36.224.473.15.112.326.17.53.17.237 0 .422-.067.556-.2zm.097 2.118c.165-.135.247-.336.247-.603 0-.277-.084-.487-.254-.63-.17-.144-.386-.216-.652-.216-.256 0-.466.072-.628.22-.163.145-.244.348-.244.607 0 .223.074.416.223.58.15.16.38.243.69.243.25 0 .456-.068.62-.202zm-1.735-1.937c-.158-.158-.236-.365-.236-.62 0-.32.114-.594.345-.823.232-.23.56-.344.984-.344.41 0 .732.108.965.325.233.216.35.47.35.758 0 .267-.068.483-.203.65-.076.092-.194.184-.353.274.176.08.316.175.418.28.19.2.284.46.284.778 0 .377-.127.697-.38.96-.253.26-.61.392-1.074.392-.416 0-.77-.113-1.057-.34-.287-.226-.43-.554-.43-.985 0-.253.06-.472.184-.656.124-.186.307-.327.55-.424-.15-.064-.265-.14-.35-.225zm5.614-1.42c.188.248.282.503.282.766h-.532c-.032-.17-.083-.302-.153-.397-.13-.18-.326-.27-.59-.27-.3 0-.54.14-.717.417-.177.278-.276.676-.296 1.194.124-.18.28-.316.467-.405.172-.08.364-.12.575-.12.36 0 .672.115.94.344.266.228.4.57.4 1.025 0 .388-.127.733-.38 1.033-.253.3-.614.45-1.083.45-.4 0-.746-.152-1.037-.456-.29-.304-.437-.816-.437-1.536 0-.532.065-.983.194-1.354.25-.71.705-1.065 1.367-1.065.478 0 .81.124 1 .372zm-.404 3.274c.14-.19.21-.415.21-.674 0-.22-.062-.43-.188-.627-.126-.198-.354-.297-.685-.297-.23 0-.434.076-.608.23-.175.153-.262.385-.262.694 0 .27.08.498.238.683.16.184.38.277.66.277.283 0 .495-.096.636-.286z\" fill=\"#636363\" />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"19\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeVisa);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconCardCodeAmex: FunctionComponent = () => (\n    <svg height=\"54\" viewBox=\"0 0 88 54\" width=\"88\" xmlns=\"http://www.w3.org/2000/svg\">\n        <title>CVV amex</title>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <rect fill=\"#DEDEDE\" height=\"54\" rx=\"3\" width=\"88\" />\n            <text fill=\"#979BA1\" fontFamily=\"Avenir Next\" fontSize=\"6\" fontWeight=\"420\" letterSpacing=\".2\">\n                <tspan x=\"11\" y=\"35\">3712 567890 374</tspan>\n                <tspan x=\"70.21\" y=\"35\">5</tspan>\n            </text>\n            <path d=\"M69.182 26.767h-.55v-3.35l-.762.635-.324-.38 1.142-.926h.494v4.02zm4.19 0H70.75v-.528l1.6-1.59c.122-.126.226-.257.313-.393s.13-.29.13-.46c0-.106-.018-.202-.056-.287-.038-.085-.09-.158-.153-.22-.065-.06-.14-.106-.228-.138-.087-.032-.18-.048-.278-.048-.204 0-.373.065-.505.196-.133.13-.216.298-.25.503l-.54-.09c.023-.153.07-.294.145-.424.074-.132.168-.246.28-.342.115-.097.246-.17.396-.224.15-.053.31-.08.48-.08.166 0 .326.025.48.074.153.05.288.12.406.216.117.094.21.214.28.357.07.145.106.31.106.496 0 .128-.017.248-.05.357-.035.11-.082.214-.14.313-.06.098-.128.192-.208.28-.08.09-.162.178-.25.265l-1.306 1.273h1.97v.494zm1.625-2.328h.176c.114 0 .225-.012.333-.033.107-.02.203-.056.286-.107.084-.052.15-.12.202-.208.05-.087.077-.195.077-.323 0-.104-.018-.196-.056-.277-.038-.08-.09-.15-.156-.207-.067-.057-.142-.102-.227-.134-.085-.032-.175-.048-.27-.048-.17 0-.314.044-.434.13-.12.088-.21.21-.27.364l-.5-.176c.1-.242.257-.433.475-.57.22-.14.47-.208.753-.208.167 0 .325.024.475.07.15.048.28.117.394.208.114.09.204.205.27.34.066.137.1.294.1.472 0 .114-.018.22-.054.318-.036.1-.086.188-.148.267-.063.08-.137.147-.224.204-.087.057-.182.098-.284.125v.01c.117.023.226.063.326.12.1.056.187.127.26.212.07.086.127.183.17.293.04.11.06.23.06.358 0 .2-.036.377-.112.53-.076.154-.176.282-.3.384-.126.102-.27.18-.433.233-.163.053-.33.08-.5.08-.318 0-.598-.073-.84-.216-.242-.144-.418-.368-.528-.67l.51-.17c.06.173.165.315.31.425.146.11.325.164.537.164.102 0 .202-.016.298-.05.097-.03.183-.08.26-.143.074-.064.135-.143.18-.238.046-.095.07-.206.07-.335 0-.14-.032-.257-.092-.352-.06-.095-.14-.17-.236-.23-.097-.06-.205-.1-.327-.125-.12-.025-.24-.037-.357-.037h-.17v-.454zm4.73.953h.58v.47h-.58v.904h-.533v-.903h-1.85v-.5l1.708-2.618h.676v2.647zm-.533-2.016h-.01l-1.273 2.016h1.284v-2.016z\" fill=\"#636363\" opacity=\".9\" />\n            <rect height=\"18\" rx=\"40\" stroke=\"#ED6A6A\" strokeWidth=\"2\" width=\"18\" x=\"65\" y=\"16\" />\n        </g>\n    </svg>\n);\n\nexport default withIconContainer(IconCardCodeAmex);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { IconCardCodeAmex, IconCardCodeVisa, IconSize } from '../../ui/icon';\n\nimport './CreditCardCodeTooltip.scss';\n\nconst CreditCardCodeTooltip: FunctionComponent = () => (\n    <div className=\"dropdown-menu dropdown-menu--content dropdown-menu--card-code\">\n        <div className=\"form-ccFields-cvvExample\">\n            <div className=\"form-ccFields-cvvExampleDescription\">\n                <p>\n                    <TranslatedString id=\"payment.credit_card_cvv_help_text\" />\n                </p>\n            </div>\n\n            <div className=\"form-ccFields-cvvExampleFigures\">\n                <figure>\n                    <IconCardCodeVisa size={ IconSize.Large } />\n                </figure>\n\n                <figure>\n                    <IconCardCodeAmex size={ IconSize.Large } />\n                </figure>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CreditCardCodeTooltip;\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { FormField, TextInput } from '../../ui/form';\nimport { IconHelp, IconLock } from '../../ui/icon';\nimport { TooltipTrigger } from '../../ui/tooltip';\n\nimport CreditCardCodeTooltip from './CreditCardCodeTooltip';\n\nexport interface CreditCardCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCodeField: FunctionComponent<CreditCardCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            <TextInput\n                { ...field }\n                additionalClassName=\"has-icon\"\n                autoComplete=\"cc-csc\"\n                id={ field.name }\n                type=\"tel\"\n            />\n\n            <IconLock />\n        </Fragment>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <Fragment>\n            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n\n            <TooltipTrigger\n                placement=\"top-start\"\n                tooltip={ <CreditCardCodeTooltip /> }\n            >\n                <span className=\"has-tip\">\n                    <IconHelp />\n                </span>\n            </TooltipTrigger>\n        </Fragment>\n    ), []);\n\n    return <FormField\n        additionalClassName=\"form-ccFields-field--ccCvv\"\n        input={ renderInput }\n        labelContent={ labelContent }\n        name={ name }\n    />;\n};\n\nexport default memo(CreditCardCodeField);\n","import React, { Fragment } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { CreditCardCodeField, CreditCardNumberField } from '../creditCard';\n\ninterface CreditCardValidationProps {\n    shouldShowCardCodeField: boolean;\n    shouldShowNumberField: boolean;\n}\n\nconst CreditCardValidation: React.FunctionComponent<CreditCardValidationProps> = ({\n    shouldShowNumberField,\n    shouldShowCardCodeField,\n}) => (\n    <Fragment>\n        { shouldShowNumberField && <p>\n            <strong>\n                <TranslatedString id=\"payment.instrument_trusted_shipping_address_title_text\" />\n            </strong>\n\n            <br />\n\n            <TranslatedString id=\"payment.instrument_trusted_shipping_address_text\" />\n        </p> }\n\n        <div className=\"form-ccFields\">\n            { shouldShowNumberField && <CreditCardNumberField name=\"ccNumber\" /> }\n\n            { shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" /> }\n        </div>\n    </Fragment>\n);\n\nexport default CreditCardValidation;\n","import { LineItemMap, PaymentMethod, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardCodeRequiredState {\n    config: StoreConfig;\n    lineItems: LineItemMap;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentCardCodeRequired({\n    config,\n    lineItems,\n    paymentMethod,\n}: IsInstrumentCardCodeRequiredState): boolean {\n    if (config.checkoutSettings.isTrustedShippingAddressEnabled !== true ||\n        lineItems.digitalItems.length > 0 ||\n        lineItems.giftCertificates.length > 0 ||\n        paymentMethod.config.isVaultingCvvEnabled ||\n        paymentMethod.config.cardCode) {\n        return true;\n    }\n\n    return false;\n}\n","import { CheckoutSelectors, Instrument } from '@bigcommerce/checkout-sdk';\nimport { createSelector } from 'reselect';\n\nimport isInstrumentCardNumberRequired from './isInstrumentCardNumberRequired';\n\nconst isInstrumentCardNumberRequiredSelector = createSelector(\n    ({ data }: CheckoutSelectors) => data.getConfig(),\n    ({ data }: CheckoutSelectors) => {\n        const cart = data.getCart();\n\n        return cart && cart.lineItems;\n    },\n    (config, lineItems) => (instrument: Instrument) => {\n        if (!config || !lineItems) {\n            return false;\n        }\n\n        return isInstrumentCardNumberRequired({\n            config,\n            lineItems,\n            instrument,\n        });\n    }\n);\n\nexport default isInstrumentCardNumberRequiredSelector;\n","import { Instrument, LineItemMap, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentCardNumberRequiredState {\n    config: StoreConfig;\n    lineItems: LineItemMap;\n    instrument: Instrument;\n}\n\nexport default function isInstrumentCardNumberRequired({\n    config,\n    lineItems,\n    instrument,\n}: IsInstrumentCardNumberRequiredState): boolean {\n    if (!(config.checkoutSettings as any).isTrustedShippingAddressEnabled ||\n        lineItems.physicalItems.length === 0) {\n        return false;\n    }\n\n    return !instrument.trustedShippingAddress;\n}\n","import { Customer, PaymentMethod, StoreConfig } from '@bigcommerce/checkout-sdk';\n\nexport interface IsInstrumentFeatureAvailableState {\n    config: StoreConfig;\n    customer: Customer;\n    isUsingMultiShipping: boolean;\n    paymentMethod: PaymentMethod;\n}\n\nexport default function isInstrumentFeatureAvailable({\n    config,\n    customer,\n    isUsingMultiShipping,\n    paymentMethod,\n}: IsInstrumentFeatureAvailableState): boolean {\n    if (!config.checkoutSettings.isCardVaultingEnabled ||\n        !paymentMethod.config.isVaultingEnabled ||\n        customer.isGuest ||\n        isUsingMultiShipping\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { createContext } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { PaymentFormValues } from './PaymentForm';\n\nexport interface PaymentContextProps {\n    disableSubmit(method: PaymentMethod, disabled?: boolean): void;\n    // NOTE: This prop allows certain payment methods to override the default\n    // form submission behaviour. It is not recommended to use it because\n    // generally speaking we want to avoid method-specific snowflake behaviours.\n    // Nevertheless, because of some product / UX decisions made in the past\n    // (i.e.: Amazon), we have to have this backdoor so we can preserve these\n    // snowflake behaviours. In the future, if we decide to change the UX, we\n    // can remove this prop.\n    setSubmit(method: PaymentMethod, fn: ((values: PaymentFormValues) => void) | null): void;\n    setValidationSchema(method: PaymentMethod, schema: ObjectSchema<Partial<PaymentFormValues>> | null): void;\n}\n\nconst PaymentContext = createContext<PaymentContextProps | undefined>(undefined);\n\nexport default PaymentContext;\n","import { createInjectHoc } from '../common/hoc';\n\nimport PaymentContext, { PaymentContextProps } from './PaymentContext';\n\nexport type WithPaymentProps = PaymentContextProps;\n\nconst withPayment = createInjectHoc(PaymentContext, { displayNamePrefix: 'WithPayment' });\n\nexport default withPayment;\n","import { CardInstrument, CheckoutSelectors, CustomerInitializeOptions, CustomerRequestOptions, Instrument, PaymentInitializeOptions, PaymentInstrument, PaymentMethod, PaymentRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport classNames from 'classnames';\nimport { find, noop, some } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { MapToProps } from '../../common/hoc';\nimport { LoadingOverlay } from '../../ui/loading';\nimport { CreditCardStorageField } from '../creditCard';\nimport { isCardInstrument, isInstrumentCardCodeRequired, isInstrumentCardNumberRequiredSelector, isInstrumentFeatureAvailable, CardInstrumentFieldset, CreditCardValidation } from '../storedInstrument';\nimport withPayment, { WithPaymentProps } from '../withPayment';\nimport { PaymentFormValues } from '../PaymentForm';\n\nimport SignOutLink from './SignOutLink';\n\nexport interface HostedWidgetPaymentMethodProps {\n    containerId: string;\n    hideContentWhenSignedOut?: boolean;\n    hideVerificationFields?: boolean;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    isSignInRequired?: boolean;\n    method: PaymentMethod;\n    validateInstrument?(shouldShowNumberField: boolean): React.ReactNode;\n    deinitializeCustomer?(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer?(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions, selectedInstrumentId?: string): Promise<CheckoutSelectors>;\n    onPaymentSelect?(): void;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    signInCustomer?(): void;\n}\n\ninterface WithCheckoutHostedWidgetPaymentMethodProps {\n    instruments: CardInstrument[];\n    isInstrumentCardCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isSignedIn: boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n    signOut(options: CustomerRequestOptions): void;\n}\n\ninterface HostedWidgetPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass HostedWidgetPaymentMethod extends Component<\n    HostedWidgetPaymentMethodProps &\n    WithCheckoutHostedWidgetPaymentMethodProps &\n    ConnectFormikProps<PaymentFormValues> &\n    WithPaymentProps\n> {\n    state: HostedWidgetPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n\n            await this.initializeMethod();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentDidUpdate(_prevProps: Readonly<HostedWidgetPaymentMethodProps>, prevState: Readonly<HostedWidgetPaymentMethodState>): Promise<void> {\n        const {\n            deinitializePayment = noop,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        const {\n            selectedInstrumentId,\n        } = this.state;\n\n        if (selectedInstrumentId !== prevState.selectedInstrumentId) {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n                await this.initializeMethod();\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            deinitializePayment = noop,\n            method,\n            onUnhandledError = noop,\n            setSubmit,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n        setSubmit(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            await deinitializeCustomer({\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            containerId,\n            hideContentWhenSignedOut = false,\n            isInitializing = false,\n            isSignedIn = false,\n            isSignInRequired = false,\n            method,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n        } = this.props;\n\n        const {\n            isAddingNewCard,\n            selectedInstrumentId = this.getDefaultInstrumentId(),\n        } = this.state;\n\n        const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments;\n\n        return (\n            <LoadingOverlay\n                hideContentWhenLoading\n                isLoading={ isLoading }\n            >\n                { shouldShowInstrumentFieldset && <CardInstrumentFieldset\n                    instruments={ instruments }\n                    onSelectInstrument={ this.handleSelectInstrument }\n                    onUseNewInstrument={ this.handleUseNewCard }\n                    selectedInstrumentId={ selectedInstrumentId }\n                    validateInstrument={ this.getValidateInstrument() }\n                /> }\n\n                <div\n                    className={ classNames(\n                        'widget',\n                        `widget--${method.id}`,\n                        'payment-widget'\n                    ) }\n                    id={ containerId }\n                    style={ {\n                        display: (hideContentWhenSignedOut && isSignInRequired && !isSignedIn) || !shouldShowCreditCardFieldset ? 'none' : undefined,\n                    } }\n                    tabIndex={ -1 }\n                />\n\n                { shouldShowCreditCardFieldset && isInstrumentFeatureAvailableProp && <CreditCardStorageField name=\"shouldSaveInstrument\" /> }\n\n                { isSignedIn && <SignOutLink\n                    method={ method }\n                    onSignOut={ this.handleSignOut }\n                /> }\n            </LoadingOverlay>\n        );\n    }\n\n    getValidateInstrument(): ReactNode | undefined {\n        const {\n            hideVerificationFields,\n            instruments,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            validateInstrument,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const shouldShowNumberField = selectedInstrument ? isInstrumentCardNumberRequiredProp(selectedInstrument) : false;\n\n        if (hideVerificationFields) {\n            return;\n        }\n\n        if (validateInstrument) {\n            return validateInstrument(shouldShowNumberField);\n        }\n\n        return (\n            <CreditCardValidation\n                shouldShowCardCodeField={ isInstrumentCardCodeRequiredProp }\n                shouldShowNumberField={ shouldShowNumberField }\n            />\n        );\n    }\n\n    private async initializeMethod(): Promise<CheckoutSelectors | void> {\n        const {\n            isPaymentDataRequired,\n            isSignedIn,\n            isSignInRequired,\n            initializeCustomer = noop,\n            initializePayment = noop,\n            method,\n            setSubmit,\n            signInCustomer = noop,\n        } = this.props;\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n\n        if (!isPaymentDataRequired) {\n            setSubmit(method, null);\n\n            return Promise.resolve();\n        }\n\n        if (isSignInRequired && !isSignedIn) {\n            setSubmit(method, signInCustomer);\n\n            return initializeCustomer({\n                methodId: method.id,\n            });\n        }\n\n        setSubmit(method, null);\n\n        return initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        }, selectedInstrumentId);\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument = (\n            instruments.find(instrument => instrument.defaultInstrument) ||\n            instruments[0]\n        );\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private handleUseNewCard: () => void = async () => {\n        const {\n            deinitializePayment = noop,\n            initializePayment = noop,\n            method,\n        } = this.props;\n\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n\n        await deinitializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n\n        await initializePayment({\n            gatewayId: method.gateway,\n            methodId: method.id,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = id => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n\n    private handleSignOut: () => void = async () => {\n        const {\n            method,\n            onSignOut = noop,\n            onSignOutError = noop,\n            signOut,\n        } = this.props;\n\n        try {\n            await signOut({ methodId: method.id });\n            onSignOut();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n}\n\nfunction mapFromCheckoutProps(): MapToProps<\n    CheckoutContextProps,\n    WithCheckoutHostedWidgetPaymentMethodProps,\n    HostedWidgetPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> {\n    const filterInstruments = memoizeOne((instruments: PaymentInstrument[] = []) => instruments.filter(isCardInstrument));\n\n    return (context, props) => {\n\n        const {\n            formik: { values },\n            isUsingMultiShipping = false,\n            method,\n        } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getCheckout,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n            },\n            statuses: {\n                isLoadingInstruments,\n            },\n        } = checkoutState;\n\n        const cart = getCart();\n        const checkout = getCheckout();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!checkout || !config || !cart || !customer || !method) {\n            return null;\n        }\n\n        return {\n            instruments: filterInstruments(getInstruments(method)),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(values.useStoreCredit),\n            isSignedIn: some(checkout.payments, { providerId: method.id }),\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequired({\n                config,\n                lineItems: cart.lineItems,\n                paymentMethod: method,\n            }),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n            loadInstruments: checkoutService.loadInstruments,\n            signOut: checkoutService.signOutCustomer,\n        };\n    };\n}\n\nexport default connectFormik(withPayment(withCheckout(mapFromCheckoutProps)(HostedWidgetPaymentMethod)));\n","import { AdyenCreditCardComponentOptions } from '@bigcommerce/checkout-sdk';\nimport React, { createRef, useCallback, useRef, useState, FunctionComponent, RefObject } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { TranslatedString } from '../../locale';\nimport { Modal } from '../../ui/modal';\n\nimport AdyenV2CardValidation from './AdyenV2CardValidation';\nimport HostedWidgetPaymentMethod, { HostedWidgetPaymentMethodProps } from './HostedWidgetPaymentMethod';\n\nexport type AdyenPaymentMethodProps = Omit<HostedWidgetPaymentMethodProps, 'containerId' | 'hideContentWhenSignedOut'>;\n\nexport interface AdyenOptions {\n    scheme: AdyenCreditCardComponentOptions;\n    bcmc: AdyenCreditCardComponentOptions;\n}\n\nexport enum AdyenMethodType {\n    scheme = 'scheme',\n    bcmc = 'bcmc',\n}\n\ninterface AdyenPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst AdyenV2PaymentMethod: FunctionComponent<AdyenPaymentMethodProps> = ({\n    initializePayment,\n    method,\n    ...rest\n}) => {\n    const ref = useRef<AdyenPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const containerId = `${method.id}-adyen-component-field`;\n    const threeDS2ContainerId = `${containerId}-3ds`;\n    const cardVerificationContainerId = `${method.id}-tsv`;\n    const component = method.id as AdyenMethodType;\n    const adyenOptions: AdyenOptions = {\n        [AdyenMethodType.scheme]: {\n            hasHolderName: true,\n        },\n        [AdyenMethodType.bcmc]: {\n            hasHolderName: false,\n        },\n    };\n\n    const onLoad = useCallback(cancel => {\n        const div = document.createElement('div');\n        div.setAttribute('id', threeDS2ContainerId);\n\n        setThreeDSecureContent(div);\n        ref.current.cancelThreeDSecureVerification = cancel;\n    }, [threeDS2ContainerId]);\n\n    const onComplete = useCallback(() => {\n        setThreeDSecureContent(undefined);\n        ref.current.cancelThreeDSecureVerification = undefined;\n    }, []);\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    const initializeAdyenPayment: HostedWidgetPaymentMethodProps['initializePayment'] = useCallback((options, selectedInstrumentId) => {\n        return initializePayment({\n            ...options,\n            adyenv2: {\n                cardVerificationContainerId: selectedInstrumentId && cardVerificationContainerId,\n                containerId,\n                options: adyenOptions[component],\n                threeDS2ContainerId,\n                threeDS2Options: {\n                    widgetSize: '05',\n                    onLoad,\n                    onComplete,\n                },\n            },\n        });\n    }, [initializePayment, component, cardVerificationContainerId, containerId, threeDS2ContainerId, adyenOptions, onLoad, onComplete]);\n\n    const validateInstrument = (shouldShowNumberField: boolean) => {\n        return <AdyenV2CardValidation\n            shouldShowNumberField={ shouldShowNumberField }\n            verificationFieldsContainerId={ cardVerificationContainerId }\n        />;\n    };\n\n    return <>\n        <HostedWidgetPaymentMethod\n            { ...rest }\n            containerId={ containerId }\n            hideContentWhenSignedOut\n            initializePayment={ initializeAdyenPayment }\n            method={ method }\n            validateInstrument={ validateInstrument }\n        />\n\n        <Modal\n            additionalBodyClassName=\"modal-body--center\"\n            closeButtonLabel={ <TranslatedString id=\"common.close_action\" /> }\n            isOpen={ !!threeDSecureContent }\n            onAfterOpen={ appendThreeDSecureContent }\n            onRequestClose={ cancelThreeDSecureModalFlow }\n            shouldShowCloseButton={ true }\n        >\n            <div\n                ref={ ref.current.threeDSecureContentRef }\n                style={ { width: '100%' } }\n            />\n        </Modal>\n    </>;\n};\n\nexport default AdyenV2PaymentMethod;\n","\nimport React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconNewAccount: FunctionComponent = () => (\n    <svg\n        height=\"25\"\n        viewBox=\"0 0 35 25\"\n        width=\"35\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path clipRule=\"evenodd\" d=\"M33 2H2L2 23H33V2ZM2 0C0.895431 0 0 0.89543 0 2V23C0 24.1046 0.89543 25 2 25H33C34.1046 25 35 24.1046 35 23V2C35 0.89543 34.1046 0 33 0H2Z\" fill=\"#D1D7E0\" fillRule=\"evenodd\" />\n        <path clipRule=\"evenodd\" d=\"M11 12C11 11.4477 11.4477 11 12 11H24C24.5523 11 25 11.4477 25 12V14C25 14.5523 24.5523 15 24 15H12C11.4477 15 11 14.5523 11 14V12Z\" fill=\"#D1D7E0\" fillRule=\"evenodd\" />\n        <path clipRule=\"evenodd\" d=\"M19 6C19.5523 6 20 6.44772 20 7V19C20 19.5523 19.5523 20 19 20H17C16.4477 20 16 19.5523 16 19V7C16 6.44772 16.4477 6 17 6H19Z\" fill=\"#D1D7E0\" fillRule=\"evenodd\" />\n    </svg>\n);\n\nexport default withIconContainer(IconNewAccount);\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport { FieldProps } from 'formik';\nimport { find, noop } from 'lodash';\nimport React, { useCallback, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { DropdownTrigger } from '../../ui/dropdown';\nimport { IconNewAccount, IconPaypal, IconSize } from '../../ui/icon';\n\nexport interface AccountInstrumentSelectProps extends FieldProps<string> {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentSelectValues {\n    instrumentId: string;\n}\n\nclass AccountInstrumentSelect extends PureComponent<AccountInstrumentSelectProps> {\n    componentDidMount() {\n        const { selectedInstrumentId } = this.props;\n\n        // FIXME: Used setTimeout here because setFieldValue call doesnot set value if called before formik is properly mounted.\n        //        This ensures that update Field value is called after formik has mounted.\n        // See GitHub issue: https://github.com/jaredpalmer/formik/issues/930\n        setTimeout(() => this.updateFieldValue(selectedInstrumentId));\n    }\n\n    componentDidUpdate(prevProps: Readonly<AccountInstrumentSelectProps>) {\n        const { selectedInstrumentId: prevSelectedInstrumentId } = prevProps;\n        const { selectedInstrumentId } = this.props;\n\n        if (prevSelectedInstrumentId !== selectedInstrumentId) {\n            this.updateFieldValue(selectedInstrumentId);\n        }\n    }\n\n    componentWillUnmount() {\n        this.updateFieldValue();\n    }\n\n    render(): ReactNode {\n        const {\n            field,\n            instruments,\n            onSelectInstrument,\n            onUseNewInstrument,\n            selectedInstrumentId,\n        } = this.props;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return (\n            <div className=\"instrumentSelect\">\n                <DropdownTrigger\n                    dropdown={\n                        <AccountInstrumentMenu\n                            instruments={ instruments }\n                            onSelectInstrument={ onSelectInstrument }\n                            onUseNewInstrument={ onUseNewInstrument }\n                            selectedInstrumentId={ selectedInstrumentId }\n                        />\n                    }\n                >\n                    <AccountInstrumentSelectButton\n                        instrument={ selectedInstrument }\n                        testId=\"instrument-select\"\n                    />\n\n                    <input\n                        type=\"hidden\"\n                        { ...field }\n                    />\n                </DropdownTrigger>\n            </div>\n        );\n    }\n\n    private updateFieldValue(instrumentId: string = ''): void {\n        const {\n            form,\n            field,\n        } = this.props;\n\n        form.setFieldValue(field.name, instrumentId);\n    }\n}\n\ninterface AccountInstrumentMenuProps {\n    instruments: AccountInstrument[];\n    selectedInstrumentId?: string;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nconst AccountInstrumentMenu: FunctionComponent<AccountInstrumentMenuProps> = ({\n    instruments,\n    selectedInstrumentId,\n    onSelectInstrument,\n    onUseNewInstrument,\n}) => {\n    return <ul\n        className=\"instrumentSelect-dropdownMenu instrumentSelect-dropdownMenuNext dropdown-menu\"\n        data-test=\"instrument-select-menu\"\n    >\n        { instruments.map(instrument => (\n            <li\n                className={ classNames(\n                    'instrumentSelect-option dropdown-menu-item',\n                    { 'instrumentSelect-option--selected': instrument.bigpayToken === selectedInstrumentId }\n                ) }\n                key={ instrument.bigpayToken }\n            >\n                <AccountInstrumentOption\n                    instrument={ instrument }\n                    onClick={ onSelectInstrument }\n                    testId=\"instrument-select-option\"\n                />\n            </li>\n        )) }\n\n        <li className=\"instrumentSelect-option instrumentSelect-option--addNew dropdown-menu-item\">\n            <AccountInstrumentUseNewButton\n                onClick={ onUseNewInstrument }\n                testId=\"instrument-select-option-use-new\"\n            />\n        </li>\n    </ul>;\n};\n\ninterface AccountInstrumentSelectButtonProps {\n    instrument?: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentSelectButton: FunctionComponent<AccountInstrumentSelectButtonProps> = ({\n    instrument,\n    testId,\n    onClick,\n}) => {\n    if (!instrument) {\n        return (\n            <AccountInstrumentUseNewButton\n                className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n                testId={ testId }\n            />\n        );\n    }\n\n    return (\n        <AccountInstrumentMenuItem\n            className=\"instrumentSelect-button optimizedCheckout-form-select dropdown-button form-input\"\n            instrument={ instrument }\n            onClick={ onClick }\n            testId={ testId }\n        />\n    );\n};\n\ninterface AccountInstrumentOptionProps {\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(token: string): void;\n}\n\nconst AccountInstrumentOption: FunctionComponent<AccountInstrumentOptionProps> = ({\n    instrument,\n    onClick = noop,\n}) => {\n    const handleClick = useCallback(() => {\n        onClick(instrument.bigpayToken);\n    }, [\n        onClick,\n        instrument,\n    ]);\n\n    return (\n        <AccountInstrumentMenuItem\n            instrument={ instrument }\n            onClick={ handleClick }\n            testId=\"instrument-select-option\"\n        />\n    );\n};\n\ninterface AccountInstrumentMenuItemProps {\n    className?: string;\n    instrument: AccountInstrument;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentMenuItem: FunctionComponent<AccountInstrumentMenuItemProps> = ({\n    className,\n    instrument: { externalId },\n    testId,\n    onClick,\n}) => {\n    return (\n        <button\n            className={ className }\n            data-test={ testId }\n            onClick={ onClick }\n            type=\"button\"\n        >\n            <div className=\"instrumentSelect-details\">\n                {\n                    // TODO: When we include new account instrument types we can\n                    // abstract these icons in a similar way we did for credit cards.\n                }\n                <IconPaypal\n                    additionalClassName=\"accountIcon-icon\"\n                    size={ IconSize.Medium }\n                />\n\n                <div\n                    className=\"instrumentSelect-account\"\n                    data-test={ `${testId}-externalId` }\n                >\n                    { externalId }\n                </div>\n            </div>\n        </button>\n    );\n};\n\ninterface AccountInstrumentUseNewButtonProps {\n    className?: string;\n    testId?: string;\n    onClick?(): void;\n}\n\nconst AccountInstrumentUseNewButton: FunctionComponent<AccountInstrumentUseNewButtonProps> = ({\n    className,\n    testId,\n    onClick = noop,\n}) => (\n    <button\n        className={ className }\n        data-test={ testId }\n        onClick={ onClick }\n        type=\"button\"\n    >\n        <div className=\"instrumentSelect-details instrumentSelect-details--addNew\">\n            <IconNewAccount\n                additionalClassName=\"accountIcon-icon\"\n                size={ IconSize.Medium }\n            />\n\n            <div className=\"instrumentSelect-account\">\n                <TranslatedString id=\"payment.account_instrument_add_action\" />\n            </div>\n        </div>\n    </button>\n);\n\nexport default AccountInstrumentSelect;\n","import { AccountInstrument } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\n\nimport { TranslatedHtml, TranslatedString } from '../../locale';\nimport { BasicFormField, Fieldset, Legend } from '../../ui/form';\nimport { ModalTrigger, ModalTriggerModalProps } from '../../ui/modal';\n\nimport AccountInstrumentSelect from './AccountInstrumentSelect';\nimport ManageInstrumentsModal from './ManageInstrumentsModal';\n\nexport interface AccountInstrumentFieldsetProps {\n    instruments: AccountInstrument[];\n    selectedInstrument?: AccountInstrument;\n    onSelectInstrument(id: string): void;\n    onUseNewInstrument(): void;\n}\n\nexport interface AccountInstrumentFieldsetValues {\n    instrumentId: string;\n}\n\nconst AccountInstrumentFieldset: FunctionComponent<AccountInstrumentFieldsetProps> = ({\n    instruments,\n    onSelectInstrument,\n    onUseNewInstrument,\n    selectedInstrument,\n}) => {\n    const renderInput = useCallback((field: FieldProps) => (\n        <AccountInstrumentSelect\n            { ...field }\n            instruments={ instruments }\n            onSelectInstrument={ onSelectInstrument }\n            onUseNewInstrument={ onUseNewInstrument }\n            selectedInstrumentId={ selectedInstrument && selectedInstrument.bigpayToken }\n        />\n    ), [\n        instruments,\n        onSelectInstrument,\n        onUseNewInstrument,\n        selectedInstrument,\n    ]);\n\n    const renderModal = useCallback((props: ModalTriggerModalProps) => (\n        <ManageInstrumentsModal\n            instruments={ instruments }\n            { ...props }\n        />\n    ), [instruments]);\n\n    return <Fieldset\n        additionalClassName=\"instrumentFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.account_instrument_text\" />\n            </Legend>\n        }\n    >\n        <ModalTrigger modal={ renderModal }>\n            { ({ onClick }) => <button\n                className=\"instrumentModal-trigger\"\n                onClick={ onClick }\n                type=\"button\"\n            >\n                <TranslatedString id=\"payment.instrument_manage_button\" />\n            </button> }\n        </ModalTrigger>\n\n        <BasicFormField\n            name=\"instrumentId\"\n            render={ renderInput }\n        />\n\n        { instruments.length === 0 && <div className=\"instrumentSelect-note\">\n            <TranslatedHtml id=\"payment.account_instrument_new_shipping_address\" />\n        </div> }\n    </Fieldset>;\n};\n\nexport default memo(AccountInstrumentFieldset);\n","import { AccountInstrument, CheckoutSelectors, PaymentInitializeOptions, PaymentInstrument, PaymentMethod, PaymentRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { MapToProps } from '../../common/hoc';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../../locale';\nimport { CheckboxFormField } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\nimport { isAccountInstrument, isInstrumentFeatureAvailable, AccountInstrumentFieldset } from '../storedInstrument';\nimport withPayment, { WithPaymentProps } from '../withPayment';\nimport { PaymentFormValues } from '../PaymentForm';\n\nexport interface HostedPaymentMethodProps {\n    description?: ReactNode;\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface HostedPaymentMethodState {\n    isAddingNewInstrument: boolean;\n    selectedInstrument?: AccountInstrument;\n}\n\ninterface WithCheckoutHostedPaymentMethodProps {\n    instruments: AccountInstrument[];\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isNewAddress: boolean;\n    isPaymentDataRequired: boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\nclass HostedPaymentMethod extends Component<\n    HostedPaymentMethodProps &\n        WithCheckoutHostedPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    HostedPaymentMethodState\n> {\n    state: HostedPaymentMethodState = {\n        isAddingNewInstrument: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            description,\n            isInitializing = false,\n            isLoadingInstruments,\n            instruments,\n            isNewAddress,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n        } = this.props;\n\n        const {\n            selectedInstrument = this.getDefaultInstrument(),\n        } = this.state;\n\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && (instruments.length > 0 || isNewAddress);\n        const shouldShowSaveInstrument = isInstrumentFeatureAvailableProp && !selectedInstrument;\n\n        if (!description && !isInstrumentFeatureAvailableProp) {\n            return null;\n        }\n\n        return (\n            <LoadingOverlay\n                hideContentWhenLoading\n                isLoading={ isLoading }\n            >\n                <div className=\"paymentMethod paymentMethod--hosted\">\n                    { description }\n\n                    { shouldShowInstrumentFieldset && <AccountInstrumentFieldset\n                        instruments={ instruments }\n                        onSelectInstrument={ this.handleSelectInstrument }\n                        onUseNewInstrument={ this.handleUseNewInstrument }\n                        selectedInstrument={ selectedInstrument }\n                    /> }\n\n                    { shouldShowSaveInstrument && <CheckboxFormField\n                        additionalClassName=\"form-field--saveInstrument\"\n                        labelContent={ <TranslatedString id=\"payment.account_instrument_save_payment_method_label\" /> }\n                        name=\"shouldSaveInstrument\"\n                    /> }\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrument(): AccountInstrument | undefined {\n        const { isAddingNewInstrument } = this.state;\n        const { instruments } = this.props;\n\n        if (isAddingNewInstrument || !instruments.length) {\n            return;\n        }\n\n        return find(instruments, { defaultInstrument: true }) || instruments[0];\n    }\n\n    private handleUseNewInstrument: () => void = () => {\n        this.setState({\n            isAddingNewInstrument: true,\n            selectedInstrument: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = id => {\n        const {\n            instruments,\n        } = this.props;\n\n        this.setState({\n            isAddingNewInstrument: false,\n            selectedInstrument: find(instruments, { bigpayToken: id }),\n        });\n    };\n}\n\nfunction mapFromCheckoutProps(): MapToProps<\n    CheckoutContextProps,\n    WithCheckoutHostedPaymentMethodProps,\n    HostedPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> {\n    const filterAccountInstruments = memoizeOne((instruments: PaymentInstrument[] = []) => instruments.filter(isAccountInstrument));\n    const filterTrustedInstruments = memoizeOne((instruments: AccountInstrument[] = []) => instruments.filter(({ trustedShippingAddress }) => trustedShippingAddress));\n\n    return (context, props) => {\n        const {\n            formik: { values },\n            isUsingMultiShipping = false,\n            method,\n        } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n                isPaymentDataSubmitted,\n            },\n            statuses: {\n                isLoadingInstruments,\n            },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n        const {\n            features,\n        } = config.checkoutSettings;\n\n        const currentMethodInstruments = filterAccountInstruments(getInstruments(method));\n        const trustedInstruments = filterTrustedInstruments(currentMethodInstruments);\n\n        return {\n            instruments: trustedInstruments,\n            isNewAddress: trustedInstruments.length === 0 && currentMethodInstruments.length > 0,\n            isInstrumentFeatureAvailable: features['PAYMENTS-4579.braintree_paypal_vaulting']\n                && !isPaymentDataSubmitted(method.id, method.gateway)\n                && isInstrumentFeatureAvailable({\n                    config,\n                    customer,\n                    isUsingMultiShipping,\n                    paymentMethod: method,\n                }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(values.useStoreCredit),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n}\n\nexport default connectFormik(withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(HostedPaymentMethod))));\n","import React, { useMemo, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { TranslatedString } from '../../locale';\n\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\n\nexport type AffirmPaymentMethodProps = Omit<HostedPaymentMethodProps, 'description'>;\n\nconst AffirmPaymentMethod: FunctionComponent<AffirmPaymentMethodProps> = props => {\n    const description = useMemo(() => <TranslatedString id=\"payment.affirm_body_text\" />, []);\n\n    return <HostedPaymentMethod\n        { ...props }\n        description={ description }\n    />;\n};\n\nexport default AffirmPaymentMethod;\n","import { CheckoutSelectors, CustomerInitializeOptions, PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { useCallback, useContext, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport PaymentContext from '../PaymentContext';\n\nimport HostedWidgetPaymentMethod, { HostedWidgetPaymentMethodProps } from './HostedWidgetPaymentMethod';\n\nexport interface AmazonPaymentMethodProps extends Omit<HostedWidgetPaymentMethodProps, 'containerId' | 'hideContentWhenSignedOut' | 'isSignInRequired' | 'signInCustomer'> {\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n}\n\nfunction signInAmazon() {\n    const button: HTMLElement | null = document.querySelector('#paymentWidget img');\n\n    if (button) {\n        button.click();\n    }\n}\n\nconst AmazonPaymentMethod: FunctionComponent<AmazonPaymentMethodProps> = ({\n    initializeCustomer,\n    initializePayment,\n    onUnhandledError,\n    ...rest\n}) => {\n    const paymentContext = useContext(PaymentContext);\n    const initializeAmazonCustomer = useCallback((options: CustomerInitializeOptions) => initializeCustomer({\n        ...options,\n        amazon: {\n            container: 'paymentWidget',\n            onError: onUnhandledError,\n        },\n    }), [initializeCustomer, onUnhandledError]);\n\n    const initializeAmazonPayment = useCallback((options: PaymentInitializeOptions) => initializePayment({\n        ...options,\n        amazon: {\n            container: 'paymentWidget',\n            onError: (error: Error) => {\n                if (onUnhandledError) {\n                    onUnhandledError(error);\n                }\n                if (paymentContext) {\n                    paymentContext.disableSubmit(rest.method, true);\n                }\n            },\n            onPaymentSelect: () => {\n                if (paymentContext) {\n                    paymentContext.disableSubmit(rest.method, false);\n                }\n            },\n        },\n    }), [initializePayment, onUnhandledError, paymentContext, rest.method]);\n\n    return <HostedWidgetPaymentMethod\n        { ...rest }\n        containerId=\"paymentWidget\"\n        hideContentWhenSignedOut\n        initializeCustomer={ initializeAmazonCustomer }\n        initializePayment={ initializeAmazonPayment }\n        isSignInRequired={ true }\n        signInCustomer={ signInAmazon }\n    />;\n};\n\nexport default AmazonPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport HostedWidgetPaymentMethod, { HostedWidgetPaymentMethodProps } from './HostedWidgetPaymentMethod';\n\nexport type BarclaycardPaymentMethodProps = Omit< HostedWidgetPaymentMethodProps, 'containerId'>;\n\nconst BarclaycardPaymentMethod: FunctionComponent<BarclaycardPaymentMethodProps> = props => {\n\n    const { method } = props;\n    const containerId = `${method.id}-container`;\n\n    return <HostedWidgetPaymentMethod\n        { ...props }\n        containerId={ containerId }\n        hideVerificationFields\n    />;\n};\n\nexport default BarclaycardPaymentMethod;\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardCustomerCodeFieldProps {\n    name: string;\n}\n\nconst CreditCardCustomerCodeField: FunctionComponent<CreditCardCustomerCodeFieldProps> = ({ name }) => {\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            id={ field.name }\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <Fragment>\n            <TranslatedString id=\"payment.credit_card_customer_code_label\" />\n\n            { ' ' }\n\n            <small className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedString id=\"common.optional_text\" />\n            </small>\n        </Fragment>\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name={ name }\n    />;\n};\n\nexport default memo(CreditCardCustomerCodeField);\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, ChangeEvent, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { FormField, TextInput } from '../../ui/form';\n\nimport formatCreditCardExpiryDate from './formatCreditCardExpiryDate';\n\nexport interface CreditCardExpiryFieldProps {\n    name: string;\n}\n\nconst CreditCardExpiryField: FunctionComponent<CreditCardExpiryFieldProps> = ({ name }) => {\n    const handleChange = useCallback(memoizeOne((field: FieldProps['field'], form: FieldProps['form']) => {\n        return (event: ChangeEvent<any>) => {\n            form.setFieldValue(field.name, formatCreditCardExpiryDate(event.target.value));\n        };\n    }), []);\n\n    const renderInput = useCallback(({ field, form }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete=\"cc-exp\"\n            id={ field.name }\n            onChange={ handleChange(field, form) }\n            placeholder=\"MM / YY\"\n            type=\"tel\"\n        />\n    ), [handleChange]);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"payment.credit_card_expiration_label\" />\n    ), []);\n\n    return <FormField\n        additionalClassName=\"form-field--ccExpiry\"\n        input={ renderInput }\n        labelContent={ labelContent }\n        name={ name }\n    />;\n};\n\nexport default memo(CreditCardExpiryField);\n","export default function formatCreditCardExpiryDate(value: string): string {\n    const separator = '/';\n    const [month = '', year = ''] = value.split(new RegExp(`\\\\s*${separator}\\\\s*`));\n    const trimmedMonth = month.slice(0, 2);\n    const trimmedYear = year.length === 4 ? year.slice(-2) : (year ? year.slice(0, 2) : month.slice(2));\n\n    // i.e.: '1'\n    if (value.length < 2) {\n        return month;\n    }\n\n    // ie.: '10 /' (without trailing space)\n    if (value.length > 3 && !trimmedYear) {\n        return trimmedMonth;\n    }\n\n    return `${trimmedMonth} / ${trimmedYear}`;\n}\n","import React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { FormField, TextInput } from '../../ui/form';\n\nexport interface CreditCardNameFieldProps {\n    name: string;\n}\n\nconst CreditCardNameField: FunctionComponent<CreditCardNameFieldProps> = ({ name }) => {\n    const renderInput = useCallback(({ field }) => (\n        <TextInput\n            { ...field }\n            autoComplete=\"cc-name\"\n            id={ field.name }\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"payment.credit_card_name_label\" />\n    ), []);\n\n    return <FormField\n        additionalClassName=\"form-field--ccName\"\n        input={ renderInput }\n        labelContent={ labelContent }\n        name={ name }\n    />;\n};\n\nexport default memo(CreditCardNameField);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { Fieldset, Legend } from '../../ui/form';\n\nimport CreditCardCodeField from './CreditCardCodeField';\nimport CreditCardCustomerCodeField from './CreditCardCustomerCodeField';\nimport CreditCardExpiryField from './CreditCardExpiryField';\nimport CreditCardNameField from './CreditCardNameField';\nimport CreditCardNumberField from './CreditCardNumberField';\nimport CreditCardStorageField from './CreditCardStorageField';\n\nexport interface CreditCardFieldsetProps {\n    shouldShowCardCodeField?: boolean;\n    shouldShowCustomerCodeField?: boolean;\n    shouldShowSaveCardField?: boolean;\n}\n\nexport interface CreditCardFieldsetValues {\n    ccCustomerCode?: string;\n    ccCvv?: string;\n    ccExpiry: string;\n    ccName: string;\n    ccNumber: string;\n    shouldSaveInstrument?: boolean;\n}\n\nconst CreditCardFieldset: FunctionComponent<CreditCardFieldsetProps> = ({\n    shouldShowCardCodeField,\n    shouldShowCustomerCodeField,\n    shouldShowSaveCardField,\n}) => (\n    <Fieldset\n        additionalClassName=\"creditCardFieldset\"\n        legend={\n            <Legend hidden>\n                <TranslatedString id=\"payment.credit_card_text\" />\n            </Legend>\n        }\n    >\n        <div className=\"form-ccFields\">\n            <CreditCardNumberField name=\"ccNumber\" />\n\n            <CreditCardExpiryField name=\"ccExpiry\" />\n\n            <CreditCardNameField name=\"ccName\" />\n\n            { shouldShowCardCodeField && <CreditCardCodeField name=\"ccCvv\" /> }\n\n            { shouldShowCustomerCodeField && <CreditCardCustomerCodeField name=\"ccCustomerCode\" /> }\n\n            { shouldShowSaveCardField && <CreditCardStorageField name=\"shouldSaveInstrument\" /> }\n        </div>\n    </Fieldset>\n);\n\nexport default memo(CreditCardFieldset);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, expirationDate, number } from 'card-validator';\nimport { object, string, ObjectSchema } from 'yup';\n\nimport { CreditCardFieldsetValues } from './CreditCardFieldset';\n\nexport interface CreditCardValidationSchemaOptions {\n    isCardCodeRequired: boolean;\n    language: LanguageService;\n}\n\nexport default memoize(function getCreditCardValidationSchema({\n    isCardCodeRequired,\n    language,\n}: CreditCardValidationSchemaOptions): ObjectSchema<CreditCardFieldsetValues> {\n    const schema = {\n        ccCustomerCode: string(),\n        ccCvv: string(),\n        ccExpiry: string()\n            .required(language.translate('payment.credit_card_expiration_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_expiration_invalid_error'),\n                test: value => expirationDate(value).isValid,\n            }),\n        ccName: string()\n            .max(200)\n            .required(language.translate('payment.credit_card_name_required_error')),\n        ccNumber: string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: value => number(value).isValid,\n            }),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value) {\n                    const { card } = number(this.parent.ccNumber);\n\n                    return cvv(value, card && card.code ? card.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    return object(schema);\n});\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { cvv, number } from 'card-validator';\nimport creditCardType from 'credit-card-type';\nimport { object, string, ObjectSchema, StringSchema } from 'yup';\n\nimport mapFromInstrumentCardType from './mapFromInstrumentCardType';\nimport { CardInstrumentFieldsetValues } from './CardInstrumentFieldset';\n\nexport interface InstrumentValidationSchemaOptions {\n    instrumentBrand: string;\n    instrumentLast4: string;\n    isCardCodeRequired: boolean;\n    isCardNumberRequired: boolean;\n    language: LanguageService;\n}\n\ninterface InstrumentValidationSchema {\n    ccCvv?: StringSchema;\n    ccNumber?: StringSchema;\n    instrumentId: StringSchema;\n}\n\nexport default memoize(function getInstrumentValidationSchema({\n    instrumentBrand,\n    instrumentLast4,\n    isCardCodeRequired,\n    isCardNumberRequired,\n    language,\n}: InstrumentValidationSchemaOptions): ObjectSchema<CardInstrumentFieldsetValues> {\n    const schema: InstrumentValidationSchema = {\n        instrumentId: string()\n            .required(),\n    };\n\n    if (isCardCodeRequired) {\n        schema.ccCvv = string()\n            .required(language.translate('payment.credit_card_cvv_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_cvv_invalid_error'),\n                test(value = '') {\n                    const cardType = mapFromInstrumentCardType(instrumentBrand);\n                    const cardInfo = creditCardType.getTypeInfo(cardType);\n\n                    return cvv(value, cardInfo && cardInfo.code ? cardInfo.code.size : undefined).isValid;\n                },\n            });\n    }\n\n    if (isCardNumberRequired) {\n        schema.ccNumber = string()\n            .required(language.translate('payment.credit_card_number_required_error'))\n            .test({\n                message: language.translate('payment.credit_card_number_invalid_error'),\n                test: (value = '') => number(value).isValid,\n            })\n            .test({\n                message: language.translate('payment.credit_card_number_mismatch_error'),\n                test: (value = '') => value.slice(-instrumentLast4.length) === instrumentLast4,\n            });\n    }\n\n    return object(schema);\n});\n","import { CardInstrument, CheckoutSelectors, Instrument, PaymentInitializeOptions, PaymentInstrument, PaymentMethod, PaymentRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { find, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { MapToProps } from '../../common/hoc';\nimport { withLanguage, WithLanguageProps } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport { configureCardValidator, getCreditCardValidationSchema, CreditCardFieldset, CreditCardFieldsetValues } from '../creditCard';\nimport { getInstrumentValidationSchema, isCardInstrument, isInstrumentCardCodeRequired, isInstrumentCardNumberRequiredSelector, isInstrumentFeatureAvailable, CardInstrumentFieldset, CardInstrumentFieldsetValues, CreditCardValidation } from '../storedInstrument';\nimport withPayment, { WithPaymentProps } from '../withPayment';\nimport { PaymentFormValues } from '../PaymentForm';\n\nexport interface CreditCardPaymentMethodProps {\n    isInitializing?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport type CreditCardPaymentMethodValues = CreditCardFieldsetValues | CardInstrumentFieldsetValues;\n\ninterface WithCheckoutCreditCardPaymentMethodProps {\n    instruments: CardInstrument[];\n    isInstrumentCardCodeRequired: boolean;\n    isInstrumentFeatureAvailable: boolean;\n    isLoadingInstruments: boolean;\n    isPaymentDataRequired: boolean;\n    isInstrumentCardNumberRequired(instrument: Instrument): boolean;\n    loadInstruments(): Promise<CheckoutSelectors>;\n}\n\ninterface CreditCardPaymentMethodState {\n    isAddingNewCard: boolean;\n    selectedInstrumentId?: string;\n}\n\nclass CreditCardPaymentMethod extends Component<\n    CreditCardPaymentMethodProps &\n        WithCheckoutCreditCardPaymentMethodProps &\n        WithPaymentProps &\n        WithLanguageProps &\n        ConnectFormikProps<PaymentFormValues>,\n    CreditCardPaymentMethodState\n> {\n    state: CreditCardPaymentMethodState = {\n        isAddingNewCard: false,\n    };\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            loadInstruments,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n        configureCardValidator();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n\n            if (isInstrumentFeatureAvailableProp) {\n                await loadInstruments();\n            }\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, null);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(): void {\n        const {\n            method,\n            setValidationSchema,\n        } = this.props;\n\n        setValidationSchema(method, this.getValidationSchema());\n    }\n\n    render(): ReactNode {\n        const {\n            instruments,\n            isInitializing,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isLoadingInstruments,\n            method,\n        } = this.props;\n\n        const {\n            isAddingNewCard,\n            selectedInstrumentId = this.getDefaultInstrumentId(),\n        } = this.state;\n\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n        const shouldShowInstrumentFieldset = isInstrumentFeatureAvailableProp && instruments.length > 0;\n        const shouldShowCreditCardFieldset = !shouldShowInstrumentFieldset || isAddingNewCard;\n        const isLoading = isInitializing || isLoadingInstruments;\n        const shouldShowNumberField = selectedInstrument ? isInstrumentCardNumberRequiredProp(selectedInstrument) : false;\n\n        return (\n            <LoadingOverlay\n                hideContentWhenLoading\n                isLoading={ isLoading }\n            >\n                <div className=\"paymentMethod paymentMethod--creditCard\">\n                    { shouldShowInstrumentFieldset && <CardInstrumentFieldset\n                        instruments={ instruments }\n                        onSelectInstrument={ this.handleSelectInstrument }\n                        onUseNewInstrument={ this.handleUseNewCard }\n                        selectedInstrumentId={ selectedInstrumentId }\n                        validateInstrument={ <CreditCardValidation\n                            shouldShowCardCodeField={ isInstrumentCardCodeRequiredProp }\n                            shouldShowNumberField={ shouldShowNumberField }\n                        /> }\n                    /> }\n\n                    { shouldShowCreditCardFieldset && <CreditCardFieldset\n                        shouldShowCardCodeField={ method.config.cardCode || method.config.cardCode === null }\n                        shouldShowCustomerCodeField={ method.config.requireCustomerCode }\n                        shouldShowSaveCardField={ isInstrumentFeatureAvailableProp }\n                    /> }\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private getDefaultInstrumentId(): string | undefined {\n        const { isAddingNewCard } = this.state;\n\n        if (isAddingNewCard) {\n            return;\n        }\n\n        const { instruments } = this.props;\n        const defaultInstrument = (\n            instruments.find(instrument => instrument.defaultInstrument) ||\n            instruments[0]\n        );\n\n        return defaultInstrument && defaultInstrument.bigpayToken;\n    }\n\n    private getValidationSchema(): ObjectSchema<CreditCardPaymentMethodValues> | null {\n        const {\n            instruments,\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequiredProp,\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredProp,\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailableProp,\n            isPaymentDataRequired,\n            language,\n            method,\n        } = this.props;\n\n        if (!isPaymentDataRequired) {\n            return null;\n        }\n\n        const { selectedInstrumentId = this.getDefaultInstrumentId() } = this.state;\n        const selectedInstrument = find(instruments, { bigpayToken: selectedInstrumentId });\n\n        return isInstrumentFeatureAvailableProp && selectedInstrument ?\n            getInstrumentValidationSchema({\n                instrumentBrand: selectedInstrument.brand,\n                instrumentLast4: selectedInstrument.last4,\n                isCardCodeRequired: isInstrumentCardCodeRequiredProp,\n                isCardNumberRequired: isInstrumentCardNumberRequiredProp(selectedInstrument),\n                language,\n            }) :\n            getCreditCardValidationSchema({\n                isCardCodeRequired: method.config.cardCode === true,\n                language,\n            });\n    }\n\n    private handleUseNewCard: () => void = () => {\n        this.setState({\n            isAddingNewCard: true,\n            selectedInstrumentId: undefined,\n        });\n    };\n\n    private handleSelectInstrument: (id: string) => void = id => {\n        this.setState({\n            isAddingNewCard: false,\n            selectedInstrumentId: id,\n        });\n    };\n}\n\nfunction mapFromCheckoutProps(): MapToProps<\n    CheckoutContextProps,\n    WithCheckoutCreditCardPaymentMethodProps,\n    CreditCardPaymentMethodProps & ConnectFormikProps<PaymentFormValues>\n> {\n    const filterInstruments = memoizeOne((instruments: PaymentInstrument[] = []) => instruments.filter(isCardInstrument));\n\n    return (context, props) => {\n        const {\n            formik: { values },\n            isUsingMultiShipping = false,\n            method,\n        } = props;\n\n        const { checkoutService, checkoutState } = context;\n\n        const {\n            data: {\n                getCart,\n                getConfig,\n                getCustomer,\n                getInstruments,\n                isPaymentDataRequired,\n            },\n            statuses: {\n                isLoadingInstruments,\n            },\n        } = checkoutState;\n\n        const cart = getCart();\n        const config = getConfig();\n        const customer = getCustomer();\n\n        if (!config || !cart || !customer || !method) {\n            return null;\n        }\n\n        return {\n            instruments: filterInstruments(getInstruments(method)),\n            isInstrumentCardCodeRequired: isInstrumentCardCodeRequired({\n                config,\n                lineItems: cart.lineItems,\n                paymentMethod: method,\n            }),\n            isInstrumentCardNumberRequired: isInstrumentCardNumberRequiredSelector(checkoutState),\n            isInstrumentFeatureAvailable: isInstrumentFeatureAvailable({\n                config,\n                customer,\n                isUsingMultiShipping,\n                paymentMethod: method,\n            }),\n            isLoadingInstruments: isLoadingInstruments(),\n            isPaymentDataRequired: isPaymentDataRequired(values.useStoreCredit),\n            loadInstruments: checkoutService.loadInstruments,\n        };\n    };\n}\n\nexport default connectFormik(withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(CreditCardPaymentMethod))));\n","import { creditCardType } from 'card-validator';\n\nexport default function configureCardValidator(): void {\n    const discoverInfo = creditCardType.getTypeInfo('discover');\n    const visaInfo = creditCardType.getTypeInfo('visa');\n\n    // Need to support 13 digit PAN because some gateways only provide test credit card numbers in this format.\n    creditCardType.updateCard('visa', {\n        lengths: [13, ...(visaInfo.lengths || [])],\n    });\n\n    // Add support for 8-BIN Discover Cards.\n    creditCardType.updateCard('discover', {\n        patterns: [\n            ...(discoverInfo.patterns || []),\n            [810, 817],\n        ],\n    });\n}\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { createRef, useCallback, useRef, useState, FunctionComponent, RefObject } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { Modal } from '../../ui/modal';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\n\nexport type BraintreeCreditCardPaymentMethodProps = CreditCardPaymentMethodProps;\n\ninterface BraintreeCreditCardPaymentMethodRef {\n    threeDSecureContentRef: RefObject<HTMLDivElement>;\n    cancelThreeDSecureVerification?(): void;\n}\n\nconst BraintreeCreditCardPaymentMethod: FunctionComponent<BraintreeCreditCardPaymentMethodProps> = ({\n    initializePayment,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const [threeDSecureContent, setThreeDSecureContent] = useState<HTMLElement>();\n    const ref = useRef<BraintreeCreditCardPaymentMethodRef>({\n        threeDSecureContentRef: createRef(),\n    });\n\n    const initializeBraintreePayment = useCallback((options: PaymentInitializeOptions) => {\n        return initializePayment({\n            ...options,\n            braintree: {\n                threeDSecure: {\n                    addFrame(error, content, cancel) {\n                        if (error) {\n                            return onUnhandledError(error);\n                        }\n\n                        setThreeDSecureContent(content);\n                        ref.current.cancelThreeDSecureVerification = cancel;\n                    },\n                    removeFrame() {\n                        setThreeDSecureContent(undefined);\n                        ref.current.cancelThreeDSecureVerification = undefined;\n                    },\n                },\n            },\n        });\n    }, [initializePayment, onUnhandledError]);\n\n    const appendThreeDSecureContent = useCallback(() => {\n        if (ref.current.threeDSecureContentRef.current && threeDSecureContent) {\n            ref.current.threeDSecureContentRef.current.appendChild(threeDSecureContent);\n        }\n    }, [threeDSecureContent]);\n\n    const cancelThreeDSecureModalFlow = useCallback(() => {\n        setThreeDSecureContent(undefined);\n\n        if (ref.current.cancelThreeDSecureVerification) {\n            ref.current.cancelThreeDSecureVerification();\n            ref.current.cancelThreeDSecureVerification = undefined;\n        }\n    }, []);\n\n    return <>\n        <CreditCardPaymentMethod\n            { ...rest }\n            initializePayment={ initializeBraintreePayment }\n        />\n\n        <Modal\n            additionalBodyClassName=\"modal-body--center\"\n            closeButtonLabel={ <TranslatedString id=\"common.close_action\" /> }\n            isOpen={ !!threeDSecureContent }\n            onAfterOpen={ appendThreeDSecureContent }\n            onRequestClose={ cancelThreeDSecureModalFlow }\n        >\n            <div ref={ ref.current.threeDSecureContentRef } />\n        </Modal>\n    </>;\n};\n\nexport default BraintreeCreditCardPaymentMethod;\n","import { CheckoutSelectors, CustomerRequestOptions, PaymentInitializeOptions, PaymentMethod, PaymentRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport { noop, some } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport { preventDefault } from '../../common/dom';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../../locale';\nimport { LoadingOverlay } from '../../ui/loading';\nimport withPayment, { WithPaymentProps } from '../withPayment';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport SignOutLink from './SignOutLink';\n\nexport interface WalletButtonPaymentMethodProps {\n    buttonId: string;\n    editButtonClassName?: string;\n    editButtonLabel?: ReactNode;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    shouldShowEditButton?: boolean;\n    signInButtonClassName?: string;\n    signInButtonLabel?: ReactNode;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onSignOut?(): void;\n    onSignOutError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutWalletButtonPaymentMethodProps {\n    accountMask?: string;\n    cardName?: string;\n    cardType?: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n    isPaymentSelected: boolean;\n    signOut(options: CustomerRequestOptions): void;\n}\n\nclass WalletButtonPaymentMethod extends Component<\n    WalletButtonPaymentMethodProps &\n    WithCheckoutWalletButtonPaymentMethodProps &\n    WithLanguageProps &\n    WithPaymentProps\n> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        this.toggleSubmit();\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            disableSubmit,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        disableSubmit(method, false);\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<PaymentMethodProps & WalletButtonPaymentMethodProps & WithCheckoutWalletButtonPaymentMethodProps & WithLanguageProps>): void {\n        const { method } = this.props;\n        const { method: prevMethod } = prevProps;\n\n        if (method.initializationData !== prevMethod.initializationData) {\n            this.toggleSubmit();\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isInitializing = false,\n            isPaymentSelected,\n        } = this.props;\n\n        return (\n            <LoadingOverlay\n                hideContentWhenLoading\n                isLoading={ isInitializing }\n            >\n                <div className=\"paymentMethod paymentMethod--walletButton\">\n                    { isPaymentSelected ?\n                        this.renderPaymentView() :\n                        this.renderSignInView() }\n                </div>\n            </LoadingOverlay>\n        );\n    }\n\n    private renderSignInView(): ReactNode {\n        const {\n            buttonId,\n            language,\n            signInButtonClassName,\n            signInButtonLabel,\n            method,\n        } = this.props;\n\n        return (\n            <a\n                className={ signInButtonClassName }\n                href=\"#\"\n                id={ buttonId }\n                onClick={ preventDefault() }\n            >\n                { signInButtonLabel || <TranslatedString\n                    data={ { providerName: getPaymentMethodName(language)(method) } }\n                    id=\"remote.sign_in_action\"\n                /> }\n            </a>\n        );\n    }\n\n    private renderPaymentView(): ReactNode {\n        const {\n            accountMask,\n            buttonId,\n            cardName,\n            cardType,\n            editButtonClassName,\n            editButtonLabel,\n            expiryMonth,\n            expiryYear,\n            shouldShowEditButton,\n            method,\n        } = this.props;\n\n        return (\n            <Fragment>\n                { cardName && <p data-test=\"payment-method-wallet-card-name\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_name_label\" />\n                        :\n                    </strong>\n                    { ' ' }\n                    { cardName }\n                </p> }\n\n                { accountMask && <p data-test=\"payment-method-wallet-card-type\">\n                    <strong>\n                        { `${cardType}:` }\n                    </strong>\n                    { ' ' }\n                    { accountMask }\n                </p> }\n\n                { expiryMonth && expiryYear && <p data-test=\"payment-method-wallet-card-expiry\">\n                    <strong>\n                        <TranslatedString id=\"payment.credit_card_expiration_date_label\" />\n                        :\n                        </strong>\n                    { ' ' }\n                    { `${expiryMonth}/${expiryYear}` }\n                </p> }\n\n                { shouldShowEditButton && <p>\n                    <a\n                        className={ editButtonClassName }\n                        href=\"#\"\n                        id={ buttonId }\n                        onClick={ preventDefault() }\n                    >\n                        { editButtonLabel || <TranslatedString id=\"remote.select_different_card_action\" /> }\n                    </a>\n                </p> }\n\n                <SignOutLink\n                    method={ method }\n                    onSignOut={ this.handleSignOut }\n                />\n            </Fragment>\n        );\n    }\n\n    private toggleSubmit(): void {\n        const {\n            disableSubmit,\n            method,\n        } = this.props;\n\n        if (normalizeWalletPaymentData(method.initializationData)) {\n            disableSubmit(method, false);\n        } else {\n            disableSubmit(method, true);\n        }\n    }\n\n    private handleSignOut: () => void = async () => {\n        const {\n            method,\n            signOut,\n            onSignOut = noop,\n            onSignOutError = noop,\n        } = this.props;\n\n        try {\n            await signOut({ methodId: method.id });\n            onSignOut();\n            window.location.reload();\n        } catch (error) {\n            onSignOutError(error);\n        }\n    };\n}\n\ninterface WalletPaymentData {\n    accountMask: string;\n    cardType: string;\n    expiryMonth?: string;\n    expiryYear?: string;\n}\n\n// For some odd reason, `initializationData` is a schema-less object. So in\n// order to use it safely, we have to normalize it first.\nfunction normalizeWalletPaymentData(data: any): WalletPaymentData | undefined {\n    if (!data) {\n        return;\n    }\n\n    if (data.card_information) {\n        return {\n            accountMask: formatAccountMask(data.card_information.number),\n            cardType: data.card_information.type,\n        };\n    }\n\n    if (data.cardData) {\n        return {\n            accountMask: formatAccountMask(data.cardData.accountMask),\n            cardType: data.cardData.cardType,\n            expiryMonth: data.cardData.expMonth,\n            expiryYear: data.cardData.expYear,\n        };\n    }\n\n    if (data.accountNum) {\n        const { card } = number(data.accountNum);\n\n        return {\n            accountMask: formatAccountMask(data.accountMask),\n            expiryMonth: data.expDate && `${data.expDate}`.substr(0, 2),\n            expiryYear: data.expDate && `${data.expDate}`.substr(2, 2),\n            cardType: card ? card.niceType : '',\n        };\n    }\n}\n\nfunction formatAccountMask(accountMask: string = '', padding: string = '****'): string {\n    return accountMask.indexOf('*') > -1\n        ? accountMask\n        : `${padding} ${accountMask}`;\n}\n\nfunction mapFromCheckoutProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: WalletButtonPaymentMethodProps\n): WithCheckoutWalletButtonPaymentMethodProps | null {\n    const { data: { getBillingAddress, getCheckout } } = checkoutState;\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n\n    if (!billingAddress || !checkout) {\n        return null;\n    }\n\n    const walletPaymentData = normalizeWalletPaymentData(method.initializationData);\n\n    return {\n        ...walletPaymentData,\n        // FIXME: I'm not sure how this would work for non-English names.\n        cardName: walletPaymentData && [billingAddress.firstName, billingAddress.lastName].join(' '),\n        isPaymentSelected: some(checkout.payments, { providerId: method.id }),\n        signOut: checkoutService.signOutCustomer,\n    };\n}\n\nexport default withLanguage(withPayment(withCheckout(mapFromCheckoutProps)(WalletButtonPaymentMethod)));\n","enum PaymentMethodProviderType {\n    Api = 'PAYMENT_TYPE_API',\n    Hosted = 'PAYMENT_TYPE_HOSTED',\n    Offline = 'PAYMENT_TYPE_OFFLINE',\n}\n\nexport default PaymentMethodProviderType;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { useCallback, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport WalletButtonPaymentMethod, { WalletButtonPaymentMethodProps } from './WalletButtonPaymentMethod';\n\nexport type CCAvenueMarsPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId' | 'shouldShowEditButton'>;\n\nconst ChasePayPaymentMethod: FunctionComponent<CCAvenueMarsPaymentMethodProps> = ({\n    initializePayment,\n    ...rest\n}) => {\n    const initializeChasePayPayment = useCallback((options: PaymentInitializeOptions) => initializePayment({\n        ...options,\n        chasepay: {\n            walletButton: 'walletButton',\n        },\n    }), [initializePayment]);\n\n    return <WalletButtonPaymentMethod\n        { ...rest }\n        buttonId=\"walletButton\"\n        initializePayment={ initializeChasePayPayment }\n        shouldShowEditButton\n    />;\n};\n\nexport default ChasePayPaymentMethod;\n","import React, { useMemo, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { TranslatedString } from '../../locale';\n\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\n\nexport type CCAvenueMarsPaymentMethodProps = Omit<HostedPaymentMethodProps, 'description'>;\n\nconst CCAvenueMarsPaymentMethod: FunctionComponent<CCAvenueMarsPaymentMethodProps> = props => {\n    const description = useMemo(() => <TranslatedString id=\"payment.ccavenuemars_description_text\" />, []);\n\n    return <HostedPaymentMethod\n        { ...props }\n        description={ description }\n    />;\n};\n\nexport default CCAvenueMarsPaymentMethod;\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport WalletButtonPaymentMethod, { WalletButtonPaymentMethodProps } from './WalletButtonPaymentMethod';\n\nexport type GooglePayPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId' | 'shouldShowEditButton'>;\n\nconst GooglePayPaymentMethod: FunctionComponent<GooglePayPaymentMethodProps> = ({\n    initializePayment,\n    onUnhandledError,\n    ...rest\n}) => {\n    const initializeGooglePayPayment = useCallback(options => initializePayment({\n        ...options,\n        googlepaybraintree: {\n            walletButton: 'walletButton',\n            onError: onUnhandledError,\n        },\n        googlepaystripe: {\n            walletButton: 'walletButton',\n            onError: onUnhandledError,\n        },\n    }), [initializePayment, onUnhandledError]);\n\n    return <WalletButtonPaymentMethod\n        { ...rest }\n        buttonId=\"walletButton\"\n        initializePayment={ initializeGooglePayPayment }\n        shouldShowEditButton\n    />;\n};\n\nexport default GooglePayPaymentMethod;\n","import React, { useCallback, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport HostedWidgetPaymentMethod, { HostedWidgetPaymentMethodProps } from './HostedWidgetPaymentMethod';\n\nexport type KlarnaPaymentMethodProps = Omit<HostedWidgetPaymentMethodProps, 'containerId'>;\n\nconst KlarnaPaymentMethod: FunctionComponent<KlarnaPaymentMethodProps> = ({\n    initializePayment,\n    ...rest\n}) => {\n    const initializeKlarnaPayment = useCallback(options => initializePayment({\n        ...options,\n        klarna: {\n            container: '#paymentWidget',\n        },\n    }), [initializePayment]);\n\n    return <HostedWidgetPaymentMethod\n        { ...rest }\n        containerId=\"paymentWidget\"\n        initializePayment={ initializeKlarnaPayment }\n    />;\n};\n\nexport default KlarnaPaymentMethod;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport { withLanguage, WithLanguageProps } from '../../locale';\n\nimport WalletButtonPaymentMethod, { WalletButtonPaymentMethodProps } from './WalletButtonPaymentMethod';\n\nexport type MasterpassPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId'>;\n\nconst MasterpassPaymentMethod: FunctionComponent<MasterpassPaymentMethodProps & WithLanguageProps> = ({\n    initializePayment,\n    language,\n    ...rest\n}) => {\n    const initializeMasterpassPayment = useCallback((options: PaymentInitializeOptions) => initializePayment({\n        ...options,\n        masterpass: {\n            walletButton: 'walletButton',\n        },\n    }), [initializePayment]);\n\n    const signInButtonLabel = useMemo(() => (\n        <img\n            alt={ language.translate('payment.masterpass_name_text') }\n            id=\"mpbutton\"\n            src=\"https://masterpass.com/dyn/img/btn/global/mp_chk_btn_126x030px.svg\"\n        />\n    ), [language]);\n\n    return <WalletButtonPaymentMethod\n        { ...rest }\n        buttonId=\"walletButton\"\n        initializePayment={ initializeMasterpassPayment }\n        signInButtonLabel={ signInButtonLabel }\n    />;\n};\n\nexport default withLanguage(MasterpassPaymentMethod);\n","import { CheckoutSelectors, PaymentInitializeOptions, PaymentMethod, PaymentRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport { Component, ReactNode } from 'react';\n\nexport interface OfflinePaymentMethodProps {\n    method: PaymentMethod;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport default class OfflinePaymentMethod extends Component<OfflinePaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        return null;\n    }\n}\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { useCallback, FunctionComponent } from 'react';\n\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\n\nexport interface PaypalExpressPaymentMethodProps extends HostedPaymentMethodProps {\n    isEmbedded?: boolean;\n}\n\nconst PaypalExpressPaymentMethod: FunctionComponent<PaypalExpressPaymentMethodProps> = ({\n    initializePayment,\n    isEmbedded = false,\n    ...rest\n}) => {\n    const initializePaypalExpressPayment = useCallback((options: PaymentInitializeOptions) => initializePayment({\n        ...options,\n        paypalexpress: {\n            useRedirectFlow: isEmbedded,\n        },\n    }), [initializePayment, isEmbedded]);\n\n    return <HostedPaymentMethod\n        { ...rest }\n        initializePayment={ initializePaypalExpressPayment }\n    />;\n};\n\nexport default PaypalExpressPaymentMethod;\n","import React, { FunctionComponent } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport { EMPTY_ARRAY } from '../../common/utility';\n\nimport CreditCardPaymentMethod, { CreditCardPaymentMethodProps } from './CreditCardPaymentMethod';\nimport HostedPaymentMethod, { HostedPaymentMethodProps } from './HostedPaymentMethod';\nimport { PaymentMethodProps } from './PaymentMethod';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\n\nexport type PaypalPaymentsProPaymentMethodProps = HostedPaymentMethodProps | CreditCardPaymentMethodProps;\n\ninterface WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    isHostedPayment: boolean;\n}\n\n/**\n * Paypal Payments Pro is a snowflake payment method - it can be a hosted\n * payment method or a credit card payment method depending on where the\n * checkout process is initiated. If it is started from the cart page via the\n * PayPal button, it behaves as a hosted payment method. But if it is started\n * from the checkout page, it behaves as a credit card payment method.\n */\nconst PaypalPaymentsProPaymentMethod: FunctionComponent<\n    PaypalPaymentsProPaymentMethodProps &\n    WithCheckoutPaypalPaymentsProPaymentMethodProps\n> = ({\n    isHostedPayment,\n    ...props\n}) => {\n    if (isHostedPayment) {\n        return <HostedPaymentMethod { ...props } />;\n    }\n\n    return (\n        <CreditCardPaymentMethod { ...props } />\n    );\n};\n\nfunction mapToPaypalPaymentsProPaymentMethodProps(\n    { checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps\n): WithCheckoutPaypalPaymentsProPaymentMethodProps {\n    const { data: { getCheckout } } = checkoutState;\n    const { payments = EMPTY_ARRAY } = getCheckout() || {};\n    const selectedHostedMethod = payments.find(({ providerType }) => providerType === PaymentMethodProviderType.Hosted);\n\n    return {\n        isHostedPayment: selectedHostedMethod ?\n            selectedHostedMethod.providerId === method.id && selectedHostedMethod.gatewayId === method.gateway :\n            false,\n    };\n}\n\nexport default withCheckout(mapToPaypalPaymentsProPaymentMethodProps)(PaypalPaymentsProPaymentMethod);\n","import { CheckoutSelectors, PaymentInitializeOptions, PaymentMethod, PaymentRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { FormFieldContainer, Label } from '../../ui/form';\nimport { LoadingOverlay } from '../../ui/loading';\n\nexport interface HostedFieldPaymentMethodProps {\n    cardCodeId?: string;\n    cardExpiryId: string;\n    cardNumberId: string;\n    isInitializing?: boolean;\n    method: PaymentMethod;\n    postalCodeId?: string;\n    walletButtons?: ReactNode;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nexport default class HostedFieldPaymentMethod extends Component<HostedFieldPaymentMethodProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initializePayment,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializePayment,\n            method,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitializePayment({\n                gatewayId: method.gateway,\n                methodId: method.id,\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            cardCodeId,\n            cardExpiryId,\n            cardNumberId,\n            isInitializing = false,\n            postalCodeId,\n            walletButtons,\n        } = this.props;\n\n        return (\n            <LoadingOverlay\n                hideContentWhenLoading\n                isLoading={ isInitializing }\n            >\n                <div className=\"form-ccFields\">\n                    { walletButtons && <FormFieldContainer>\n                        { walletButtons }\n                    </FormFieldContainer> }\n\n                    <FormFieldContainer additionalClassName=\"form-field--ccNumber\">\n                        <Label>\n                            <TranslatedString id=\"payment.credit_card_number_label\" />\n                        </Label>\n\n                        <div id={ cardNumberId } />\n                    </FormFieldContainer>\n\n                    <FormFieldContainer additionalClassName=\"form-field--ccExpiry\">\n                        <Label>\n                            <TranslatedString id=\"payment.credit_card_expiration_label\" />\n                        </Label>\n\n                        <div id={ cardExpiryId } />\n                    </FormFieldContainer>\n\n                    { cardCodeId && <FormFieldContainer additionalClassName=\"form-field--ccCvv\">\n                        <Label>\n                            <TranslatedString id=\"payment.credit_card_cvv_label\" />\n                        </Label>\n\n                        <div id={ cardCodeId } />\n                    </FormFieldContainer> }\n\n                    { postalCodeId && <FormFieldContainer additionalClassName=\"form-field--postCode\">\n                        <Label>\n                            <TranslatedString id=\"payment.postal_code_label\" />\n                        </Label>\n\n                        <div id={ postalCodeId } />\n                    </FormFieldContainer> }\n                </div>\n            </LoadingOverlay>\n        );\n    }\n}\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport HostedFieldPaymentMethod, { HostedFieldPaymentMethodProps } from './HostedFieldPaymentMethod';\n\nexport type SquarePaymentMethodProps = Omit<HostedFieldPaymentMethodProps, 'cardCodeId' | 'cardExpiryId' | 'cardNumberId' | 'postalCodeId' | 'walletButtons'>;\n\nconst SquarePaymentMethod: FunctionComponent<SquarePaymentMethodProps> = ({\n    initializePayment,\n    method,\n    ...rest\n}) => {\n    const isMasterpassEnabled = method.initializationData && method.initializationData.enableMasterpass;\n\n    const initializeSquarePayment = useCallback((options: PaymentInitializeOptions) => initializePayment({\n        ...options,\n        square: {\n            cardNumber: {\n                elementId: 'sq-card-number',\n            },\n            cvv: {\n                elementId: 'sq-cvv',\n            },\n            expirationDate: {\n                elementId: 'sq-expiration-date',\n            },\n            postalCode: {\n                elementId: 'sq-postal-code',\n            },\n            inputClass: 'form-input',\n            // FIXME: Need to pass the color values of the theme\n            inputStyles: [\n                {\n                    color: '#333',\n                    fontSize: '13px',\n                    lineHeight: '20px',\n                },\n            ],\n            masterpass: isMasterpassEnabled && {\n                elementId: 'sq-masterpass',\n            },\n        },\n    }), [initializePayment, isMasterpassEnabled]);\n\n    const walletButtons = useMemo(() => (\n        <input\n            className=\"button-masterpass\"\n            id=\"sq-masterpass\"\n            type=\"button\"\n        />\n    ), []);\n\n    return <HostedFieldPaymentMethod\n        { ...rest }\n        cardCodeId=\"sq-cvv\"\n        cardExpiryId=\"sq-expiration-date\"\n        cardNumberId=\"sq-card-number\"\n        initializePayment={ initializeSquarePayment }\n        method={ method }\n        postalCodeId=\"sq-postal-code\"\n        walletButtons={ isMasterpassEnabled && walletButtons }\n    />;\n};\n\nexport default SquarePaymentMethod;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport React, { useCallback, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport HostedWidgetPaymentMethod, { HostedWidgetPaymentMethodProps } from './HostedWidgetPaymentMethod';\n\nexport type SquarePaymentMethodProps = Omit<HostedWidgetPaymentMethodProps, 'containerId' | 'hideContentWhenSignedOut'>;\n\nconst StripePaymentMethod: FunctionComponent<SquarePaymentMethodProps> = ({\n    initializePayment,\n    ...rest\n}) => {\n    const initializeStripePayment = useCallback((options: PaymentInitializeOptions) => initializePayment({\n        ...options,\n        stripev3: {\n            containerId: 'stripe-card-field',\n            style: {\n                base: {\n                    color: '#32325d',\n                    fontWeight: 500,\n                    fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n                    fontSize: '16px',\n                    fontSmoothing: 'antialiased',\n                    '::placeholder': {\n                        color: '#aab7c4',\n                    },\n                },\n                invalid: {\n                    color: '#fa755a',\n                    iconColor: '#fa755a',\n                },\n            },\n        },\n    }), [initializePayment]);\n\n    return <HostedWidgetPaymentMethod\n        { ...rest }\n        containerId=\"stripe-card-field\"\n        hideContentWhenSignedOut\n        initializePayment={ initializeStripePayment }\n    />;\n};\n\nexport default StripePaymentMethod;\n","import { PaymentInitializeOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { useCallback, FunctionComponent } from 'react';\nimport { Omit } from 'utility-types';\n\nimport WalletButtonPaymentMethod, { WalletButtonPaymentMethodProps } from './WalletButtonPaymentMethod';\n\nexport type VisaCheckoutPaymentMethodProps = Omit<WalletButtonPaymentMethodProps, 'buttonId' | 'editButtonClassName' | 'shouldShowEditButton' | 'signInButtonClassName'>;\n\nconst VisaCheckoutPaymentMethod: FunctionComponent<VisaCheckoutPaymentMethodProps> = ({\n    deinitializePayment,\n    initializePayment,\n    method,\n    onUnhandledError = noop,\n    ...rest\n}) => {\n    const initializeVisaCheckoutPayment = useCallback((defaultOptions: PaymentInitializeOptions) => {\n        const reinitializePayment = async (options: PaymentInitializeOptions) => {\n            try {\n                await deinitializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                });\n\n                await initializePayment({\n                    gatewayId: method.gateway,\n                    methodId: method.id,\n                    ...options,\n                });\n            } catch (error) {\n                onUnhandledError(error);\n            }\n        };\n\n        const mergedOptions = {\n            ...defaultOptions,\n            braintreevisacheckout: {\n                onError: onUnhandledError,\n                onPaymentSelect: () => reinitializePayment(mergedOptions),\n            },\n        };\n\n        return initializePayment(mergedOptions);\n    }, [\n        deinitializePayment,\n        initializePayment,\n        method,\n        onUnhandledError,\n    ]);\n\n    return (\n        <WalletButtonPaymentMethod\n            { ...rest }\n            buttonId=\"walletButton\"\n            deinitializePayment={ deinitializePayment }\n            editButtonClassName=\"v-button\"\n            initializePayment={ initializeVisaCheckoutPayment }\n            method={ method }\n            shouldShowEditButton\n            signInButtonClassName=\"v-button\"\n        />\n    );\n};\n\nexport default VisaCheckoutPaymentMethod;\n","import { CheckoutSelectors, CustomerInitializeOptions, CustomerRequestOptions, PaymentInitializeOptions, PaymentMethod, PaymentRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\n\nimport AdyenV2PaymentMethod from './AdyenV2PaymentMethod';\nimport AffirmPaymentMethod from './AffirmPaymentMethod';\nimport AmazonPaymentMethod from './AmazonPaymentMethod';\nimport BarclaycardPaymentMethod from './BarclaycardPaymentMethod';\nimport BraintreeCreditCardPaymentMethod from './BraintreeCreditCardPaymentMethod';\nimport ChasePayPaymentMethod from './ChasePayPaymentMethod';\nimport CreditCardPaymentMethod from './CreditCardPaymentMethod';\nimport CCAvenueMarsPaymentMethod from './CCAvenueMarsPaymentMethod';\nimport GooglePayPaymentMethod from './GooglePayPaymentMethod';\nimport HostedPaymentMethod from './HostedPaymentMethod';\nimport KlarnaPaymentMethod from './KlarnaPaymentMethod';\nimport MasterpassPaymentMethod from './MasterpassPaymentMethod';\nimport OfflinePaymentMethod from './OfflinePaymentMethod';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodProviderType from './PaymentMethodProviderType';\nimport PaymentMethodType from './PaymentMethodType';\nimport PaypalExpressPaymentMethod from './PaypalExpressPaymentMethod';\nimport PaypalPaymentsProPaymentMethod from './PaypalPaymentsProPaymentMethod';\nimport SquarePaymentMethod from './SquarePaymentMethod';\nimport StripePaymentMethod from './StripePaymentMethod';\nimport VisaCheckoutPaymentMethod from './VisaCheckoutPaymentMethod';\n\nexport interface PaymentMethodProps {\n    method: PaymentMethod;\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface WithCheckoutPaymentMethodProps {\n    isInitializing: boolean;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors>;\n}\n\n/**\n * If possible, try to avoid having components that are specific to a specific\n * payment provider or method. Instead, try to generalise the requirements and\n * use components that can are reusable for multiple payment methods. i.e.:\n * CreditCardPaymentMethod, HostedPaymentMethod etc... If it is really necessary\n * for a particular payment method, you may write a method-specific component for\n * the purpose of configuring a general-purpose component in order to fulfill\n * its specific product or technical requirements.\n */\n// tslint:disable:cyclomatic-complexity\nconst PaymentMethodComponent: FunctionComponent<PaymentMethodProps & WithCheckoutPaymentMethodProps> = props => {\n    const { method } = props;\n\n    if (method.gateway === PaymentMethodId.AdyenV2) {\n        return <AdyenV2PaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.SquareV2) {\n        return <SquarePaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.StripeV3) {\n        return <StripePaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.Amazon) {\n        return <AmazonPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.Affirm) {\n        return <AffirmPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.Klarna) {\n        return <KlarnaPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.CCAvenueMars) {\n        return <CCAvenueMarsPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.ChasePay) {\n        return <ChasePayPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.BraintreeVisaCheckout) {\n        return <VisaCheckoutPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.BraintreeGooglePay ||\n        method.id === PaymentMethodId.StripeGooglePay) {\n        return <GooglePayPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.Masterpass) {\n        return <MasterpassPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.Braintree) {\n        return <BraintreeCreditCardPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.PaypalExpress) {\n        return <PaypalExpressPaymentMethod { ...props } />;\n    }\n\n    if (method.id === PaymentMethodId.PaypalPaymentsPro) {\n        return <PaypalPaymentsProPaymentMethod { ...props } />;\n    }\n\n    if (method.gateway === PaymentMethodId.Barclaycard) {\n        return <BarclaycardPaymentMethod { ...props } />;\n    }\n\n    if (method.gateway === PaymentMethodId.Afterpay ||\n        method.id === PaymentMethodId.Zip ||\n        method.method === PaymentMethodType.Paypal ||\n        method.method === PaymentMethodType.PaypalCredit ||\n        method.type === PaymentMethodProviderType.Hosted) {\n        return <HostedPaymentMethod { ...props } />;\n    }\n\n    if (method.type === PaymentMethodProviderType.Offline) {\n        return <OfflinePaymentMethod { ...props } />;\n    }\n\n    // NOTE: Some payment methods have `method` as `credit-card` but they are\n    // actually not. Therefore, as a workaround, we are doing the following\n    // check last.\n    if (method.method === PaymentMethodType.CreditCard ||\n        method.type === PaymentMethodProviderType.Api) {\n        return <CreditCardPaymentMethod { ...props } />;\n    }\n\n    return null;\n};\n\nfunction mapToWithCheckoutPaymentMethodProps(\n    { checkoutService, checkoutState }: CheckoutContextProps,\n    { method }: PaymentMethodProps\n): WithCheckoutPaymentMethodProps {\n    const {\n        statuses: { isInitializingPayment },\n    } = checkoutState;\n\n    return {\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        deinitializePayment: checkoutService.deinitializePayment,\n        initializeCustomer: checkoutService.initializeCustomer,\n        initializePayment: checkoutService.initializePayment,\n        isInitializing: isInitializingPayment(method.id),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutPaymentMethodProps)(memo(PaymentMethodComponent));\n","import classNames from 'classnames';\nimport React, { memo, FunctionComponent } from 'react';\n\nimport CreditCardIcon from './CreditCardIcon';\n\nexport const SUPPORTED_CARD_TYPES = [\n    'american-express',\n    'diners-club',\n    'discover',\n    'jcb',\n    'maestro',\n    'mastercard',\n    'unionpay',\n    'visa',\n];\n\nexport interface CreditCardIconListProps {\n    selectedCardType?: string;\n    cardTypes: string[];\n}\n\nconst CreditCardIconList: FunctionComponent<CreditCardIconListProps> = ({\n    selectedCardType,\n    cardTypes,\n}) => {\n    const filteredCardTypes = cardTypes\n        .filter(type => SUPPORTED_CARD_TYPES.indexOf(type) !== -1);\n\n    if (!filteredCardTypes.length) {\n        return null;\n    }\n\n    return (\n        <ul className=\"creditCardTypes-list\">\n            { filteredCardTypes.map(type => (\n                <li\n                    className={ classNames(\n                        'creditCardTypes-list-item',\n                        { 'is-active': selectedCardType === type },\n                        { 'not-active': selectedCardType && selectedCardType !== type}\n                    ) }\n                    key={ type }\n                >\n                    <span className=\"cardIcon\">\n                        <CreditCardIcon cardType={ type } />\n                    </span>\n                </li>\n            )) }\n        </ul>\n    );\n};\n\nexport default memo(CreditCardIconList);\n","export default function mapFromPaymentMethodCardType(type: string): string | undefined {\n    switch (type) {\n    case 'AMEX':\n        return 'american-express';\n\n    case 'DINERS':\n        return 'diners-club';\n\n    case 'DISCOVER':\n        return 'discover';\n\n    case 'JCB':\n        return 'jcb';\n\n    case 'MAESTRO':\n        return 'maestro';\n\n    case 'MC':\n        return 'mastercard';\n\n    case 'CUP':\n        return 'unionpay';\n\n    case 'VISA':\n        return 'visa';\n\n    default:\n        return undefined;\n    }\n}\n","import { LanguageService, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { number } from 'card-validator';\nimport { compact } from 'lodash';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../../checkout';\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { withLanguage, WithLanguageProps } from '../../locale';\nimport { mapFromPaymentMethodCardType, CreditCardIconList } from '../creditCard';\n\nimport getPaymentMethodName from './getPaymentMethodName';\nimport PaymentMethodId from './PaymentMethodId';\nimport PaymentMethodType from './PaymentMethodType';\n\nexport interface PaymentMethodTitleProps {\n    method: PaymentMethod;\n    isSelected?: boolean;\n}\n\ninterface WithCdnPathProps {\n    cdnBasePath: string;\n}\n\nfunction getPaymentMethodTitle(\n    language: LanguageService,\n    basePath: string\n): (method: PaymentMethod) => { logoUrl: string; titleText: string } {\n    const cdnPath = (path: string) => `${basePath}${path}`;\n\n    return method => {\n        const methodName = getPaymentMethodName(language)(method);\n        // TODO: API could provide the data below so UI can read simply read it.\n        // However, I'm not sure how we deal with translation yet. TBC.\n        const customTitles: { [key: string]: { logoUrl: string; titleText: string } } = {\n            [PaymentMethodType.CreditCard]: {\n                logoUrl: '',\n                titleText: methodName,\n            },\n            [PaymentMethodType.PaypalCredit]: {\n                logoUrl: cdnPath('/img/payment-providers/paypal-credit.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.VisaCheckout]: {\n                logoUrl: cdnPath('/img/payment-providers/visa-checkout.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Affirm]: {\n                logoUrl: cdnPath('/img/payment-providers/affirm-checkout-header.png'),\n                titleText: language.translate('payment.affirm_display_name_text'),\n            },\n            [PaymentMethodId.Afterpay]: {\n                logoUrl: cdnPath('/img/payment-providers/afterpay-header.png'),\n                titleText: methodName,\n            },\n            [PaymentMethodId.Amazon]: {\n                logoUrl: cdnPath('/img/payment-providers/amazon-header.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.ChasePay]: {\n                logoUrl: cdnPath('/img/payment-providers/chase-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodType.GooglePay]: {\n                logoUrl: cdnPath('/img/payment-providers/google-pay.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Klarna]: {\n                logoUrl: cdnPath('/img/payment-providers/klarna-header.png'),\n                titleText: method.config && method.config.displayName || '',\n            },\n            [PaymentMethodId.Masterpass]: {\n                logoUrl: 'https://masterpass.com/dyn/img/acc/global/mp_mark_hor_blk.svg',\n                titleText: '',\n            },\n            [PaymentMethodType.Paypal]: {\n                logoUrl: cdnPath('/img/payment-providers/paypalpaymentsprouk.png'),\n                titleText: '',\n            },\n            [PaymentMethodId.Zip]: {\n                logoUrl: cdnPath('/img/payment-providers/zip.png'),\n                titleText: language.translate('payment.zip_display_name_text'),\n            },\n            [PaymentMethodType.Barclaycard]: {\n                logoUrl: cdnPath(`/img/payment-providers/barclaycard_${method.id.toLowerCase()}.png`),\n                titleText: '',\n            },\n        };\n\n        // KLUDGE: 'paypal' is actually a credit card method. It is the only\n        // exception to the rule below. We should probably fix it on API level,\n        // but apparently it would break LCO if we are not careful.\n        if (method.id === PaymentMethodId.PaypalPaymentsPro && method.method === PaymentMethodType.CreditCard) {\n            return customTitles[PaymentMethodType.CreditCard];\n        }\n\n        return (\n            customTitles[method.id] ||\n            customTitles[method.gateway || ''] ||\n            customTitles[method.method] ||\n            customTitles[PaymentMethodType.CreditCard]\n        );\n    };\n}\n\nconst PaymentMethodTitle: FunctionComponent<PaymentMethodTitleProps & WithLanguageProps & WithCdnPathProps & ConnectFormikProps<{ ccNumber: string }>> = ({\n    cdnBasePath,\n    formik: { values },\n    isSelected,\n    language,\n    method,\n}) => {\n    const methodName = getPaymentMethodName(language)(method);\n    const { logoUrl, titleText } = getPaymentMethodTitle(language, cdnBasePath)(method);\n    const { type: selectedCardType = '' } = isSelected ? (number(values.ccNumber).card || {}) : {};\n\n    return (\n        <Fragment>\n            { logoUrl && <img\n                alt={ methodName }\n                className=\"paymentProviderHeader-img\"\n                data-test=\"payment-method-logo\"\n                src={ logoUrl }\n            /> }\n\n            { titleText && <span\n                className=\"paymentProviderHeader-name\"\n                data-test=\"payment-method-name\"\n            >\n                { titleText }\n            </span> }\n\n            <div className=\"paymentProviderHeader-cc\">\n                <CreditCardIconList\n                    cardTypes={ compact(method.supportedCards.map(mapFromPaymentMethodCardType)) }\n                    selectedCardType={ selectedCardType }\n                />\n            </div>\n        </Fragment>\n    );\n};\n\nfunction mapToCdnPathProps({ checkoutState }: CheckoutContextProps): WithCdnPathProps | null {\n    const { data: { getConfig } } = checkoutState;\n    const config = getConfig();\n\n    if (!config) {\n        return null;\n    }\n\n    return {\n        cdnBasePath: config.cdnPath,\n    };\n}\n\nexport default connectFormik(withLanguage(withCheckout(mapToCdnPathProps)(memo(PaymentMethodTitle))));\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { find, noop } from 'lodash';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { connectFormik, ConnectFormikProps } from '../../common/form';\nimport { Checklist, ChecklistItem } from '../../ui/form';\n\nimport getUniquePaymentMethodId, { parseUniquePaymentMethodId } from './getUniquePaymentMethodId';\nimport { default as PaymentMethodComponent } from './PaymentMethod';\nimport PaymentMethodTitle from './PaymentMethodTitle';\n\nexport interface PaymentMethodListProps {\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    onSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n}\n\nfunction getPaymentMethodFromListValue(methods: PaymentMethod[], value: string): PaymentMethod {\n    const { gatewayId: gateway, methodId: id } = parseUniquePaymentMethodId(value);\n    const method = gateway ? find(methods, { gateway, id }) : find(methods, { id });\n\n    if (!method) {\n        throw new Error(`Unable to find payment method with id: ${id}`);\n    }\n\n    return method;\n}\n\nconst PaymentMethodList: FunctionComponent<\n    PaymentMethodListProps &\n    ConnectFormikProps<{ paymentProviderRadio?: string }>\n> = ({\n    formik: { values },\n    isEmbedded,\n    isUsingMultiShipping,\n    methods,\n    onSelect = noop,\n    onUnhandledError,\n}) => {\n    const handleSelect = useCallback((value: string) => {\n        onSelect(getPaymentMethodFromListValue(methods, value));\n    }, [\n        methods,\n        onSelect,\n    ]);\n\n    return <Checklist\n        defaultSelectedItemId={ values.paymentProviderRadio }\n        name=\"paymentProviderRadio\"\n        onSelect={ handleSelect }\n    >\n        { methods.map(method => {\n            const value = getUniquePaymentMethodId(method.id, method.gateway);\n\n            return (\n                <PaymentMethodListItem\n                    isEmbedded={ isEmbedded }\n                    isUsingMultiShipping={ isUsingMultiShipping }\n                    key={ value }\n                    method={ method }\n                    onUnhandledError={ onUnhandledError }\n                    value={ value }\n                />\n            );\n        }) }\n    </Checklist>;\n};\n\ninterface PaymentMethodListItemProps {\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    method: PaymentMethod;\n    value: string;\n    onUnhandledError?(error: Error): void;\n}\n\nconst PaymentMethodListItem: FunctionComponent<PaymentMethodListItemProps> = ({\n    isEmbedded,\n    isUsingMultiShipping,\n    method,\n    onUnhandledError,\n    value,\n}) => {\n    const renderPaymentMethod = useMemo(() => (\n        <PaymentMethodComponent\n            isEmbedded={ isEmbedded }\n            isUsingMultiShipping={ isUsingMultiShipping }\n            method={ method }\n            onUnhandledError={ onUnhandledError }\n        />\n    ), [\n        isEmbedded,\n        isUsingMultiShipping,\n        method,\n        onUnhandledError,\n    ]);\n\n    const renderPaymentMethodTitle = useCallback((isSelected: boolean) => (\n        <PaymentMethodTitle\n            isSelected={ isSelected }\n            method={ method }\n        />\n    ), [method]);\n\n    return (\n        <ChecklistItem\n            content={ renderPaymentMethod }\n            htmlId={ `radio-${value}` }\n            label={ renderPaymentMethodTitle }\n            value={ value }\n        />\n    );\n};\n\nexport default connectFormik(memo(PaymentMethodList));\n","import React, { FunctionComponent } from 'react';\n\nimport './Tooltip.scss';\n\nexport interface TooltipProps {\n    testId?: string;\n}\n\nconst Tooltip: FunctionComponent<TooltipProps> = ({\n    children,\n    testId,\n}) => (\n    <span\n        className=\"tooltip tooltip--basic\"\n        data-test={ testId }\n    >\n        { children }\n    </span>\n);\n\nexport default Tooltip;\n","import React, { useMemo, Fragment, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../../common/dom';\nimport { withCurrency, TranslatedString, WithCurrencyProps } from '../../locale';\nimport { CheckboxFormField } from '../../ui/form';\nimport { Tooltip, TooltipTrigger } from '../../ui/tooltip';\n\nexport interface StoreCreditFieldProps {\n    availableStoreCredit: number;\n    name: string;\n    usableStoreCredit: number;\n    onChange?(value: boolean): void;\n}\n\nconst StoreCreditField: FunctionComponent<StoreCreditFieldProps & WithCurrencyProps> = ({\n    availableStoreCredit,\n    currency,\n    name,\n    onChange,\n    usableStoreCredit,\n}) => {\n    const labelContent = useMemo(() => (\n        <Fragment>\n            <TranslatedString id=\"redeemable.apply_store_credit_before_action\" />\n\n            { ' ' }\n\n            <TooltipTrigger\n                placement=\"top-start\"\n                tooltip={\n                    <Tooltip testId=\"payment-store-credit-tooltip\">\n                        <TranslatedString\n                            data={ { storeCredit: currency.toCustomerCurrency(availableStoreCredit) } }\n                            id=\"redeemable.store_credit_available_text\"\n                        />\n                    </Tooltip>\n                }\n            >\n                <a href=\"#\" onClick={ preventDefault() }>\n                    { currency.toCustomerCurrency(usableStoreCredit) }\n                </a>\n            </TooltipTrigger>\n\n            { ' ' }\n\n            <TranslatedString id=\"redeemable.apply_store_credit_after_action\" />\n        </Fragment>\n    ), [\n        availableStoreCredit,\n        currency,\n        usableStoreCredit,\n    ]);\n\n    return <CheckboxFormField\n        labelContent={ labelContent }\n        name={ name }\n        onChange={ onChange }\n    />;\n};\n\nexport default withCurrency(StoreCreditField);\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nconst StoreCreditOverlay: FunctionComponent = () => (\n    <div\n        className=\"storeCreditOverlay\"\n        data-test=\"payment-store-credit-overlay\"\n    >\n        <p className=\"storeCreditOverlay-text\">\n            <TranslatedString id=\"payment.payment_not_required_text\" />\n        </p>\n    </div>\n);\n\nexport default StoreCreditOverlay;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { mapToRedeemableProps, Redeemable, RedeemableProps } from '../cart';\nimport { withCheckout } from '../checkout';\nimport { Fieldset } from '../ui/form';\n\nconst PaymentRedeemables: FunctionComponent<RedeemableProps> = redeemableProps => (\n    <Fieldset additionalClassName=\"redeemable-payments\">\n        <Redeemable\n            { ...redeemableProps }\n            showAppliedRedeemables={ true }\n        />\n    </Fieldset>\n);\n\nexport default withCheckout(mapToRedeemableProps)(memo(PaymentRedeemables));\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { withCheckout } from '../checkout';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\n\nimport { PaymentMethodId, PaymentMethodType } from './paymentMethod';\n\ninterface PaymentSubmitButtonTextProps {\n    methodId?: string;\n    methodType?: string;\n}\n\nconst PaymentSubmitButtonText: FunctionComponent<PaymentSubmitButtonTextProps> = memo(({ methodId, methodType }) => {\n    if (methodId === PaymentMethodId.Amazon) {\n        return <TranslatedString id=\"payment.amazon_continue_action\" />;\n    }\n\n    if (methodType === PaymentMethodType.VisaCheckout) {\n        return <TranslatedString id=\"payment.visa_checkout_continue_action\" />;\n    }\n\n    if (methodType === PaymentMethodType.Chasepay) {\n        return <TranslatedString id=\"payment.chasepay_continue_action\" />;\n    }\n\n    if (methodType === PaymentMethodType.Paypal) {\n        return <TranslatedString id=\"payment.paypal_continue_action\" />;\n    }\n\n    if (methodType === PaymentMethodType.PaypalCredit) {\n        return <TranslatedString id=\"payment.paypal_credit_continue_action\" />;\n    }\n\n    return <TranslatedString id=\"payment.place_order_action\" />;\n});\n\nexport interface PaymentSubmitButtonProps {\n    methodId?: string;\n    methodType?: string;\n    isDisabled?: boolean;\n}\n\ninterface WithCheckoutPaymentSubmitButtonProps {\n    isInitializing?: boolean;\n    isSubmitting?: boolean;\n}\n\nconst PaymentSubmitButton: FunctionComponent<PaymentSubmitButtonProps & WithCheckoutPaymentSubmitButtonProps> = ({\n    isDisabled,\n    isInitializing,\n    isSubmitting,\n    methodId,\n    methodType,\n}) => (\n    <Button\n        disabled={ isInitializing || isSubmitting || isDisabled }\n        id=\"checkout-payment-continue\"\n        isFullWidth\n        isLoading={ isSubmitting }\n        size={ ButtonSize.Large }\n        type=\"submit\"\n        variant={ ButtonVariant.Action }\n    >\n        <PaymentSubmitButtonText\n            methodId={ methodId }\n            methodType={ methodType }\n        />\n    </Button>\n);\n\nexport default withCheckout(({ checkoutState }) => {\n    const {\n        statuses: {\n            isInitializingCustomer,\n            isInitializingPayment,\n            isSubmittingOrder,\n        },\n    } = checkoutState;\n\n    return {\n        isInitializing: isInitializingCustomer() || isInitializingPayment(),\n        isSubmitting: isSubmittingOrder(),\n    };\n})(memo(PaymentSubmitButton));\n","import { noop } from 'lodash';\nimport React, { Component } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { TranslatedString } from '../locale';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport interface SpamProtectionProps {\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutSpamProtectionProps {\n    isExecutingSpamCheck: boolean;\n    verify(): void;\n}\n\nfunction mapToSpamProtectionProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutSpamProtectionProps {\n    return {\n        isExecutingSpamCheck: checkoutState.statuses.isExecutingSpamCheck(),\n        verify: checkoutService.executeSpamCheck,\n    };\n}\n\nclass SpamProtectionField extends Component<SpamProtectionProps & WithCheckoutSpamProtectionProps> {\n    async componentDidMount() {\n        const {\n            verify,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await verify();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render() {\n        const {\n            isExecutingSpamCheck,\n            verify,\n        } = this.props;\n\n        return (\n            <div className=\"spamProtection-container\">\n                <LoadingOverlay isLoading={ isExecutingSpamCheck }>\n                    <div className=\"spamProtection-panel optimizedCheckout-overlay\">\n                        <a\n                            className=\"spamProtection-panel-message optimizedCheckout-primaryContent\"\n                            data-test=\"customer-continue-button\"\n                            onClick={ verify }\n                        >\n                            <TranslatedString\n                                id=\"spam_protection.verify_action\"\n                            />\n                        </a>\n                    </div>\n                </LoadingOverlay>\n            </div>\n        );\n    }\n}\n\nexport default withCheckout(mapToSpamProtectionProps)(SpamProtectionField);\n","import { PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps, WithFormikConfig } from 'formik';\nimport { noop } from 'lodash';\nimport React, { memo, useCallback, useContext, useMemo, FunctionComponent } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { TermsConditions } from '../termsConditions';\nimport { Fieldset, Form, FormContext, Legend } from '../ui/form';\n\nimport { CreditCardFieldsetValues } from './creditCard';\nimport getPaymentValidationSchema from './getPaymentValidationSchema';\nimport { getUniquePaymentMethodId, PaymentMethodList } from './paymentMethod';\nimport { CardInstrumentFieldsetValues } from './storedInstrument';\nimport { StoreCreditField, StoreCreditOverlay } from './storeCredit';\nimport PaymentRedeemables from './PaymentRedeemables';\nimport PaymentSubmitButton from './PaymentSubmitButton';\nimport SpamProtectionField from './SpamProtectionField';\n\nexport interface PaymentFormProps {\n    availableStoreCredit?: number;\n    defaultGatewayId?: string;\n    defaultMethodId: string;\n    isEmbedded?: boolean;\n    isTermsConditionsRequired?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    selectedMethod?: PaymentMethod;\n    shouldShowStoreCredit?: boolean;\n    shouldDisableSubmit?: boolean;\n    shouldExecuteSpamCheck?: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit?: number;\n    validationSchema?: ObjectSchema<Partial<PaymentFormValues>>;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(values: PaymentFormValues): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport type PaymentFormValues = (\n    CreditCardFieldsetValues & PaymentFormCommonValues |\n    CardInstrumentFieldsetValues & PaymentFormCommonValues |\n    HostedWidgetPaymentMethodValues & PaymentFormCommonValues |\n    PaymentFormCommonValues\n);\n\nexport interface PaymentFormCommonValues {\n    paymentProviderRadio: string; // TODO: Give this property a better name. We need to keep it for now because of legacy reasons.\n    terms?: boolean;\n    useStoreCredit?: boolean;\n}\n\nexport interface HostedWidgetPaymentMethodValues {\n    shouldSaveInstrument: boolean;\n}\n\nexport function isCreditCardFieldsetValues(values: PaymentFormValues): values is CreditCardFieldsetValues & PaymentFormCommonValues {\n    const ccValues = values as CreditCardFieldsetValues;\n\n    return !!ccValues.ccName || !!ccValues.ccExpiry;\n}\n\nexport function isInstrumentFieldsetValues(values: PaymentFormValues): values is CardInstrumentFieldsetValues & PaymentFormCommonValues {\n    const instrumentValues = values as CardInstrumentFieldsetValues;\n\n    return !!instrumentValues.instrumentId;\n}\n\nexport function isHostedWidgetValues(values: PaymentFormValues): values is HostedWidgetPaymentMethodValues & PaymentFormCommonValues {\n    const hostedWidgetValues = values as HostedWidgetPaymentMethodValues;\n\n    return hostedWidgetValues.shouldSaveInstrument;\n}\n\nconst PaymentForm: FunctionComponent<PaymentFormProps & FormikProps<PaymentFormValues> & WithLanguageProps> = ({\n    availableStoreCredit = 0,\n    isEmbedded,\n    isPaymentDataRequired,\n    isTermsConditionsRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect,\n    onStoreCreditChange,\n    onUnhandledError,\n    resetForm,\n    selectedMethod,\n    shouldDisableSubmit,\n    shouldExecuteSpamCheck,\n    termsConditionsText = '',\n    termsConditionsUrl,\n    usableStoreCredit = 0,\n    values,\n}) => {\n    if (shouldExecuteSpamCheck) {\n        return <SpamProtectionField />;\n    }\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            testId=\"payment-form\"\n        >\n            { usableStoreCredit > 0 && isPaymentDataRequired() && <StoreCreditField\n                availableStoreCredit={ availableStoreCredit }\n                name=\"useStoreCredit\"\n                onChange={ onStoreCreditChange }\n                usableStoreCredit={ usableStoreCredit }\n            /> }\n\n            <PaymentMethodListFieldset\n                isEmbedded={ isEmbedded }\n                isPaymentDataRequired={ isPaymentDataRequired }\n                isUsingMultiShipping={ isUsingMultiShipping }\n                methods={ methods }\n                onMethodSelect={ onMethodSelect }\n                onUnhandledError={ onUnhandledError }\n                resetForm={ resetForm }\n                values={ values }\n            />\n\n            <PaymentRedeemables />\n\n            { isTermsConditionsRequired && <TermsConditions\n                termsConditionsText={ termsConditionsText }\n                termsConditionsUrl={ termsConditionsUrl }\n            /> }\n\n            <div className=\"form-actions\">\n                <PaymentSubmitButton\n                    isDisabled={ shouldDisableSubmit }\n                    methodId={ selectedMethod && selectedMethod.id }\n                    methodType={ selectedMethod && selectedMethod.method }\n                />\n            </div>\n        </Form>\n    );\n};\n\ninterface PaymentMethodListFieldsetProps {\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    methods: PaymentMethod[];\n    values: PaymentFormValues;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    onMethodSelect?(method: PaymentMethod): void;\n    onUnhandledError?(error: Error): void;\n    resetForm(nextValues?: PaymentFormValues): void;\n}\n\nconst PaymentMethodListFieldset: FunctionComponent<PaymentMethodListFieldsetProps> = ({\n    isEmbedded,\n    isPaymentDataRequired,\n    isUsingMultiShipping,\n    methods,\n    onMethodSelect = noop,\n    onUnhandledError,\n    resetForm,\n    values,\n}) => {\n    const { setSubmitted } = useContext(FormContext);\n\n    const commonValues = useMemo(\n        () => ({ terms: values.terms, useStoreCredit: values.useStoreCredit }),\n        [values.terms, values.useStoreCredit]\n    );\n\n    const handlePaymentMethodSelect = useCallback((method: PaymentMethod) => {\n        resetForm({\n            ...commonValues,\n            ccCustomerCode: '',\n            ccCvv: '',\n            ccExpiry: '',\n            ccName: '',\n            ccNumber: '',\n            instrumentId: '',\n            paymentProviderRadio: getUniquePaymentMethodId(method.id, method.gateway),\n            shouldSaveInstrument: false,\n        });\n\n        setSubmitted(false);\n        onMethodSelect(method);\n    }, [\n        commonValues,\n        onMethodSelect,\n        resetForm,\n        setSubmitted,\n    ]);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"payment.payment_method_label\" />\n        </Legend>\n    ), []);\n\n    return (\n        <Fieldset legend={ legend }>\n            { !isPaymentDataRequired(values.useStoreCredit) && <StoreCreditOverlay /> }\n\n            <PaymentMethodList\n                isEmbedded={ isEmbedded }\n                isUsingMultiShipping={ isUsingMultiShipping }\n                methods={ methods }\n                onSelect={ handlePaymentMethodSelect }\n                onUnhandledError={ onUnhandledError }\n            />\n        </Fieldset>\n    );\n};\n\nconst paymentFormConfig: WithFormikConfig<PaymentFormProps & WithLanguageProps, PaymentFormValues> = {\n    mapPropsToValues: ({\n        defaultGatewayId,\n        defaultMethodId,\n        usableStoreCredit = 0,\n    }) => ({\n        ccCustomerCode: '',\n        ccCvv: '',\n        ccExpiry: '',\n        ccName: '',\n        ccNumber: '',\n        paymentProviderRadio: getUniquePaymentMethodId(defaultMethodId, defaultGatewayId),\n        instrumentId: '',\n        shouldSaveInstrument: false,\n        terms: false,\n        useStoreCredit: usableStoreCredit > 0,\n    }),\n\n    handleSubmit: (values, { props: { onSubmit = noop } }) => {\n        const commonValues = {\n            paymentProviderRadio: values.paymentProviderRadio,\n            terms: values.terms || undefined,\n            useStoreCredit: values.useStoreCredit || undefined,\n        };\n\n        // Convert values of optional fields into `undefined` as Formik fields\n        // always have an initial value.\n        if (isCreditCardFieldsetValues(values)) {\n            onSubmit({\n                ...commonValues,\n                ccCustomerCode: values.ccCustomerCode || undefined,\n                ccCvv: values.ccCvv || undefined,\n                ccExpiry: values.ccExpiry,\n                ccName: values.ccName,\n                ccNumber: values.ccNumber,\n                shouldSaveInstrument: values.shouldSaveInstrument,\n            });\n        } else if (isInstrumentFieldsetValues(values)) {\n            onSubmit({\n                ...commonValues,\n                ccNumber: values.ccNumber || undefined,\n                ccCvv: values.ccCvv || undefined,\n                instrumentId: values.instrumentId,\n            });\n        } else if (isHostedWidgetValues(values)) {\n            onSubmit({\n                ...commonValues,\n                shouldSaveInstrument: values.shouldSaveInstrument,\n            });\n        } else {\n            onSubmit(commonValues);\n        }\n    },\n\n    validationSchema: ({\n        language,\n        isTermsConditionsRequired = false,\n        validationSchema,\n    }: PaymentFormProps & WithLanguageProps) => (\n        getPaymentValidationSchema({\n            additionalValidation: validationSchema,\n            isTermsConditionsRequired,\n            language,\n        })\n    ),\n};\n\nexport default withLanguage(withFormik(paymentFormConfig)(memo(PaymentForm)));\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, string, ObjectSchema, StringSchema } from 'yup';\n\nimport { getTermsConditionsValidationSchema } from '../termsConditions';\n\nimport { PaymentFormValues } from './PaymentForm';\n\nexport interface PaymentValidationSchemaOptions {\n    additionalValidation?: ObjectSchema<Partial<PaymentFormValues>>;\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPaymentValidationSchema({\n    additionalValidation,\n    isTermsConditionsRequired,\n    language,\n}: PaymentValidationSchemaOptions): ObjectSchema<PaymentFormValues> {\n    const schemaFields: {\n        paymentProviderRadio: StringSchema;\n    } = {\n        paymentProviderRadio: string().required(),\n    };\n\n    const schemaFieldsWithTerms = object(schemaFields)\n        .concat(getTermsConditionsValidationSchema({ isTermsConditionsRequired, language }));\n\n    return additionalValidation ?\n        schemaFieldsWithTerms.concat(additionalValidation as any) :\n        schemaFieldsWithTerms;\n}\n","import { OrderRequestBody } from '@bigcommerce/checkout-sdk';\n\nimport { unformatCreditCardExpiryDate, unformatCreditCardNumber } from './creditCard';\nimport { parseUniquePaymentMethodId } from './paymentMethod';\nimport { isCreditCardFieldsetValues, isHostedWidgetValues, isInstrumentFieldsetValues, PaymentFormValues } from './PaymentForm';\n\nexport default function mapToOrderRequestBody(\n    values: PaymentFormValues,\n    isPaymentDataRequired: boolean\n): OrderRequestBody {\n    const { methodId, gatewayId } = parseUniquePaymentMethodId(values.paymentProviderRadio);\n\n    if (!isPaymentDataRequired) {\n        return {\n            useStoreCredit: values.useStoreCredit,\n        };\n    }\n\n    if (isCreditCardFieldsetValues(values)) {\n        return {\n            payment: {\n                gatewayId,\n                methodId,\n                paymentData: {\n                    ccCustomerCode: values.ccCustomerCode,\n                    ccCvv: values.ccCvv,\n                    ccExpiry: unformatCreditCardExpiryDate(values.ccExpiry),\n                    ccName: values.ccName,\n                    ccNumber: unformatCreditCardNumber(values.ccNumber),\n                    shouldSaveInstrument: values.shouldSaveInstrument,\n                },\n            },\n            useStoreCredit: values.useStoreCredit,\n        };\n    }\n\n    if (isInstrumentFieldsetValues(values)) {\n        return {\n            payment: {\n                gatewayId,\n                methodId,\n                paymentData: {\n                    instrumentId: values.instrumentId,\n                    ccCvv: values.ccCvv,\n                    ccNumber: values.ccNumber ? unformatCreditCardNumber(values.ccNumber) : '',\n                },\n            },\n            useStoreCredit: values.useStoreCredit,\n        };\n    }\n\n    if (isHostedWidgetValues(values)) {\n        return {\n            payment: {\n                gatewayId,\n                methodId,\n                paymentData: {\n                    shouldSaveInstrument: values.shouldSaveInstrument,\n                },\n            },\n        };\n    }\n\n    return {\n        payment: {\n            gatewayId,\n            methodId,\n        },\n        useStoreCredit: values.useStoreCredit,\n    };\n}\n","import { CheckoutSelectors, CheckoutSettings, OrderRequestBody, PaymentMethod } from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport { compact, find, isEmpty, noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { ObjectSchema } from 'yup';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { isRequestError, ErrorModal, ErrorModalOnCloseProps } from '../common/error';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { TermsConditionsType } from '../termsConditions';\nimport { FlashAlert, FlashMessage } from '../ui/alert';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport mapSubmitOrderErrorMessage, { mapSubmitOrderErrorTitle } from './mapSubmitOrderErrorMessage';\nimport mapToOrderRequestBody from './mapToOrderRequestBody';\nimport { getUniquePaymentMethodId, PaymentMethodId, PaymentMethodProviderType } from './paymentMethod';\nimport PaymentContext from './PaymentContext';\nimport PaymentForm, { PaymentFormValues } from './PaymentForm';\n\nexport interface PaymentProps {\n    isEmbedded?: boolean;\n    isUsingMultiShipping?: boolean;\n    flashMessages?: FlashMessage[]; // TODO: Remove once we can read flash messages from SDK\n    checkEmbeddedSupport?(methodIds: string[]): void; // TODO: We're currently doing this check in multiple places, perhaps we should move it up so this check get be done in a single place instead.\n    onCartChangedError?(error: Error): void;\n    onFinalize?(): void;\n    onFinalizeError?(error: Error): void;\n    onReady?(): void;\n    onStoreCreditChange?(useStoreCredit?: boolean): void;\n    onSubmit?(): void;\n    onSubmitError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\ninterface WithCheckoutPaymentProps {\n    availableStoreCredit: number;\n    cartUrl: string;\n    defaultMethod?: PaymentMethod;\n    finalizeOrderError?: Error;\n    isSubmittingOrder: boolean;\n    isTermsConditionsRequired: boolean;\n    methods: PaymentMethod[];\n    shouldExecuteSpamCheck: boolean;\n    submitOrderError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    usableStoreCredit: number;\n    clearError(error: Error): void;\n    finalizeOrderIfNeeded(): Promise<CheckoutSelectors>;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    loadPaymentMethods(): Promise<CheckoutSelectors>;\n    submitOrder(values: OrderRequestBody): Promise<CheckoutSelectors>;\n}\n\ninterface PaymentState {\n    isReady: boolean;\n    selectedMethod?: PaymentMethod;\n    shouldDisableSubmit: { [key: string]: boolean };\n    submitFunctions: { [key: string]: ((values: PaymentFormValues) => void) | null };\n    validationSchemas: { [key: string]: ObjectSchema<Partial<PaymentFormValues>> | null };\n}\n\nclass Payment extends Component<PaymentProps & WithCheckoutPaymentProps & WithLanguageProps, PaymentState> {\n    state: PaymentState = {\n        isReady: false,\n        shouldDisableSubmit: {},\n        validationSchemas: {},\n        submitFunctions: {},\n    };\n\n    private getContextValue = memoizeOne(() => {\n        return {\n            disableSubmit: this.disableSubmit,\n            setSubmit: this.setSubmit,\n            setValidationSchema: this.setValidationSchema,\n        };\n    });\n\n    async componentDidMount(): Promise<void> {\n        const {\n            finalizeOrderIfNeeded,\n            loadPaymentMethods,\n            onFinalize = noop,\n            onFinalizeError = noop,\n            onReady = noop,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await loadPaymentMethods();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n\n        try {\n            await finalizeOrderIfNeeded();\n            onFinalize();\n        } catch (error) {\n            if (error.type !== 'order_finalization_not_required') {\n                return onFinalizeError(error);\n            }\n        }\n\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n        this.setState({ isReady: true });\n        onReady();\n    }\n\n    componentDidUpdate(): void {\n        const {\n            checkEmbeddedSupport = noop,\n            methods,\n        } = this.props;\n\n        checkEmbeddedSupport(methods.map(({ id }) => id));\n    }\n\n    componentWillUnmount(): void {\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n    }\n\n    render(): ReactNode {\n        const {\n            defaultMethod,\n            finalizeOrderError,\n            flashMessages = [],\n            isUsingMultiShipping,\n            methods,\n            onStoreCreditChange,\n            ...rest\n        } = this.props;\n\n        const {\n            isReady,\n            selectedMethod = defaultMethod,\n            shouldDisableSubmit,\n            validationSchemas,\n        } = this.state;\n\n        const uniqueSelectedMethodId = (\n            selectedMethod &&\n            getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)\n        );\n\n        return (\n            <PaymentContext.Provider value={ this.getContextValue() }>\n                <LoadingOverlay\n                    isLoading={ !isReady }\n                    unmountContentWhenLoading\n                >\n                    { flashMessages.map(message =>\n                        <FlashAlert\n                            key={ message.message }\n                            message={ message }\n                        />\n                    ) }\n\n                    { !isEmpty(methods) && defaultMethod && <PaymentForm\n                        { ...rest }\n                        defaultGatewayId={ defaultMethod.gateway }\n                        defaultMethodId={ defaultMethod.id }\n                        isUsingMultiShipping={ isUsingMultiShipping }\n                        methods={ methods }\n                        onMethodSelect={ this.setSelectedMethod }\n                        onStoreCreditChange={ onStoreCreditChange }\n                        onSubmit={ this.handleSubmit }\n                        selectedMethod={ selectedMethod }\n                        shouldDisableSubmit={ uniqueSelectedMethodId && shouldDisableSubmit[uniqueSelectedMethodId] || undefined }\n                        validationSchema={ uniqueSelectedMethodId && validationSchemas[uniqueSelectedMethodId] || undefined }\n                    /> }\n                </LoadingOverlay>\n\n                { this.renderOrderErrorModal() }\n                { this.renderEmbeddedSupportErrorModal() }\n            </PaymentContext.Provider>\n        );\n    }\n\n    private renderOrderErrorModal(): ReactNode {\n        const {\n            finalizeOrderError,\n            language,\n            submitOrderError,\n        } = this.props;\n\n        // FIXME: Export correct TS interface\n        const error: any = submitOrderError || finalizeOrderError;\n\n        if (!error ||\n            error.type === 'order_finalization_not_required' ||\n            error.type === 'payment_cancelled' ||\n            error.type === 'spam_protection_not_completed') {\n            return null;\n        }\n\n        return (\n            <ErrorModal\n                error={ error }\n                message={ mapSubmitOrderErrorMessage(error, language.translate.bind(language)) }\n                onClose={ this.handleCloseModal }\n                title={ mapSubmitOrderErrorTitle(error, language.translate.bind(language)) }\n            />\n        );\n    }\n\n    private renderEmbeddedSupportErrorModal(): ReactNode {\n        const {\n            checkEmbeddedSupport = noop,\n            methods,\n        } = this.props;\n\n        try {\n            checkEmbeddedSupport(methods.map(({ id }) => id));\n        } catch (error) {\n            return (\n                <ErrorModal\n                    error={ error }\n                    onClose={ this.handleCloseModal }\n                />\n            );\n        }\n\n        return null;\n    }\n\n    private disableSubmit: (\n        method: PaymentMethod,\n        disabled?: boolean\n    ) => void = (method, disabled = true) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { shouldDisableSubmit } = this.state;\n\n        if (shouldDisableSubmit[uniqueId] === disabled) {\n            return;\n        }\n\n        this.setState({\n            shouldDisableSubmit: {\n                ...shouldDisableSubmit,\n                [uniqueId]: disabled,\n            },\n        });\n    };\n\n    private handleBeforeUnload: (event: BeforeUnloadEvent) => string | undefined = event => {\n        const { defaultMethod, isSubmittingOrder, language } = this.props;\n        const { selectedMethod = defaultMethod } = this.state;\n\n        // TODO: Perhaps there is a better way to handle `adyen`, `afterpay`, `amazon`,\n        // `converge` and `sagepay``. They require a redirection to another website\n        // during the payment flow but are not categorised as hosted payment methods.\n        if (!isSubmittingOrder ||\n            !selectedMethod ||\n            selectedMethod.type === PaymentMethodProviderType.Hosted ||\n            selectedMethod.id === PaymentMethodId.Amazon ||\n            selectedMethod.id === PaymentMethodId.Converge ||\n            selectedMethod.id === PaymentMethodId.SagePay ||\n            selectedMethod.gateway === PaymentMethodId.AdyenV2 ||\n            selectedMethod.gateway === PaymentMethodId.Afterpay) {\n            return;\n        }\n\n        const message = language.translate('common.leave_warning');\n\n        event.returnValue = message;\n\n        return message;\n    };\n\n    private handleCloseModal: (\n        event: Event,\n        props: ErrorModalOnCloseProps\n    ) => void = (_, { error }) => {\n        if (!error) {\n            return;\n        }\n\n        const { cartUrl, clearError } = this.props;\n        const { type: errorType } = error as any; // FIXME: Export correct TS interface\n\n        if (errorType === 'provider_fatal_error' ||\n            errorType === 'order_could_not_be_finalized_error') {\n            window.location.replace(cartUrl || '/');\n        }\n\n        if (isRequestError(error)) {\n            const { body, headers } = error;\n\n            if (body.type === 'provider_error' && headers.location) {\n                window.top.location.assign(headers.location);\n            }\n        }\n\n        clearError(error);\n    };\n\n    private handleSubmit: (values: PaymentFormValues) => void = async values => {\n        const {\n            defaultMethod,\n            loadPaymentMethods,\n            isPaymentDataRequired,\n            onCartChangedError = noop,\n            onSubmit = noop,\n            onSubmitError = noop,\n            submitOrder,\n        } = this.props;\n\n        const {\n            selectedMethod = defaultMethod,\n            submitFunctions,\n        } = this.state;\n\n        const customSubmit = selectedMethod && submitFunctions[\n            getUniquePaymentMethodId(selectedMethod.id, selectedMethod.gateway)\n        ];\n\n        if (customSubmit) {\n            return customSubmit(values);\n        }\n\n        try {\n            await submitOrder(mapToOrderRequestBody(values, isPaymentDataRequired(values.useStoreCredit)));\n            onSubmit();\n        } catch (error) {\n            if (error.type === 'payment_method_invalid') {\n                return loadPaymentMethods();\n            }\n\n            if (error.type === 'cart_changed') {\n                return onCartChangedError(error);\n            }\n\n            onSubmitError(error);\n        }\n    };\n\n    private setSelectedMethod: (method?: PaymentMethod) => void = method => {\n        const { selectedMethod } = this.state;\n\n        if (selectedMethod === method) {\n            return;\n        }\n\n        this.setState({ selectedMethod: method });\n    };\n\n    private setSubmit: (\n        method: PaymentMethod,\n        fn: (values: PaymentFormValues) => void | null\n    ) => void = (method, fn) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { submitFunctions } = this.state;\n\n        if (submitFunctions[uniqueId] === fn) {\n            return;\n        }\n\n        this.setState({\n            submitFunctions: {\n                ...submitFunctions,\n                [uniqueId]: fn,\n            },\n        });\n    };\n\n    private setValidationSchema: (\n        method: PaymentMethod,\n        schema: ObjectSchema<Partial<PaymentFormValues>> | null\n    ) => void = (method, schema) => {\n        const uniqueId = getUniquePaymentMethodId(method.id, method.gateway);\n        const { validationSchemas } = this.state;\n\n        if (validationSchemas[uniqueId] === schema) {\n            return;\n        }\n\n        this.setState({\n            validationSchemas: {\n                ...validationSchemas,\n                [uniqueId]: schema,\n            },\n        });\n    };\n}\n\nexport function mapToPaymentProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutPaymentProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getOrder,\n            getPaymentMethod,\n            getPaymentMethods,\n            isPaymentDataRequired,\n        },\n        errors: {\n            getFinalizeOrderError,\n            getSubmitOrderError,\n        },\n        statuses: { isSubmittingOrder },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const customer = getCustomer();\n    const { isComplete = false } = getOrder() || {};\n    const methods = getPaymentMethods() || EMPTY_ARRAY;\n\n    if (!checkout || !config || !customer || isComplete) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditionsLocation: termsAndConditionsLocation,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const termsAndConditionsAtPayment = termsAndConditionsLocation === 'payment' ||\n        (termsAndConditionsLocation === 'customer' && !customer.isGuest);\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled && termsAndConditionsAtPayment;\n\n    const selectedPayment = find(checkout.payments, { providerType: PaymentMethodProviderType.Hosted });\n    const selectedPaymentMethod = selectedPayment ? getPaymentMethod(selectedPayment.providerId, selectedPayment.gatewayId) : undefined;\n    const filteredMethods = selectedPaymentMethod ? compact([selectedPaymentMethod]) : methods;\n\n    return {\n        availableStoreCredit: customer.storeCredit,\n        cartUrl: config.links.cartLink,\n        clearError: checkoutService.clearError,\n        defaultMethod: selectedPaymentMethod ? selectedPaymentMethod : filteredMethods[0],\n        finalizeOrderError: getFinalizeOrderError(),\n        finalizeOrderIfNeeded: checkoutService.finalizeOrderIfNeeded,\n        isPaymentDataRequired,\n        isSubmittingOrder: isSubmittingOrder(),\n        isTermsConditionsRequired,\n        loadPaymentMethods: checkoutService.loadPaymentMethods,\n        methods: filteredMethods,\n        shouldExecuteSpamCheck: checkout.shouldExecuteSpamCheck,\n        submitOrder: checkoutService.submitOrder,\n        submitOrderError: getSubmitOrderError(),\n        termsConditionsText: isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea ?\n            termsCondtitionsText :\n            undefined,\n        termsConditionsUrl: isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link ?\n            termsCondtitionsUrl :\n            undefined,\n        usableStoreCredit: Math.min(checkout.grandTotal, customer.storeCredit || 0),\n    };\n}\n\nexport default withLanguage(withCheckout(mapToPaymentProps)(Payment));\n","import { RequestError } from '@bigcommerce/checkout-sdk';\n\nexport default function isRequestError(error: Error): error is RequestError {\n    const requestError = error as RequestError;\n\n    return requestError.type === 'request';\n}\n"],"sourceRoot":""}