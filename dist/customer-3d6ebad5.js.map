{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./src/app/termsConditions/TermsConditionsField.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/termsConditions/TermsConditions.tsx","webpack://checkout/./src/app/termsConditions/getTermsConditionsValidationSchema.ts","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","state","isOpen","canHandleEvent","handleOpen","setState","handleClose","componentDidMount","this","componentWillUnmount","render","children","modal","onClick","onRequestClose","TermsConditionsType","TermsConditionsTranslatedModalLink","language","name","terms","renderInput","split","map","item","key","renderModal","props","additionalBodyClassName","footer","size","Small","translate","header","shouldShowCloseButton","input","termsLabel","url","termsLabelPrefix","replace","termsLabelSuffix","termsLinkLabelMatches","match","labelContent","TermsConditionsExternalLinkField","data","TextArea","areTermsConditionsTextFieldProps","onChange","renderField","field","checked","value","testId","TermsConditions","termsConditionsUrl","termsConditionsText","Link","getTermsConditionsValidationSchema","isTermsConditionsRequired","schemaFields","oneOf","TextInput","autoComplete","TranslatedString","FormField","Input","Label","withLanguage","mapPropsToValues","email","defaultShouldSubscribe","shouldSubscribe","handleSubmit","values","onContinueAsGuest","validationSchema","max","required","concat","canSubscribe","checkoutButtons","isContinuingAsGuest","onChangeEmail","onShowLogin","Form","Fieldset","legend","Legend","hidden","TranslatedHtml","BasicFormField","component","Button","isLoading","variant","Primary","EMAIL_REGEXP","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","openByDefault","toggle","href","rel","target","password","onSignIn","matches","canCancel","createAccountUrl","isSigningIn","onCancel","signInError","Alert","Error","error","body","mapErrorMessage","preventDefault","handleContinueAsGuest","formValues","continueAsGuest","firstName","onContinueAsGuestError","subscribeToNewsletter","draftEmail","undefined","handleSignIn","credentials","signIn","onSignInError","handleCancelSignIn","clearError","onChangeViewType","CustomerViewType","Guest","handleChangeEmail","handleShowLogin","Login","onReady","viewType","renderLoginForm","renderGuestForm","checkEmbeddedSupport","checkoutButtonIds","deinitializeCustomer","initializeCustomer","onUnhandledError","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isGuestEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCheckout","getCustomer","getConfig","getSignInError","statuses","billingAddress","checkout","customer","config","enableTermsAndConditions","orderTermsAndConditionsType","orderTermsAndConditionsLocation","orderTermsAndConditions","orderTermsAndConditionsLink","isTermsConditionsEnabled","termsAndConditionsLocation","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","links","createAccountLink","defaultNewsletterSignup","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","termsConditionsType","termsCondtitionsText","termsCondtitionsUrl","withCheckout"],"mappings":"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","file":"customer-3d6ebad5.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import React, { Component, Fragment, MouseEventHandler, ReactNode } from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent: boolean = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <Fragment>\n                { children({ onClick: this.handleOpen }) }\n\n                { modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                }) }\n            </Fragment>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n}\n","import React, { memo, useCallback, Fragment, FunctionComponent } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, WithLanguageProps } from '../locale';\nimport { Button, ButtonSize } from '../ui/button';\nimport { CheckboxFormField, FormField } from '../ui/form';\nimport { Modal, ModalHeader, ModalTrigger, ModalTriggerModalProps } from '../ui/modal';\n\nexport enum TermsConditionsType {\n    Link = 'link',\n    TextArea = 'textarea',\n}\n\nexport type TermsConditionsFieldProps = TermsConditionsLinkFieldProps | TermsConditionsTextAreaFieldProps;\n\ninterface TermsConditionsLinkFieldProps {\n    name: string;\n    type: TermsConditionsType.Link;\n    url: string;\n}\n\ninterface TermsConditionsTextAreaFieldProps {\n    name: string;\n    terms: string;\n    type: TermsConditionsType.TextArea;\n}\n\ninterface TermsConditionsTextFieldProps {\n    name: string;\n    terms: string;\n}\n\nconst TermsConditionsModalLink: FunctionComponent<TermsConditionsTextFieldProps & WithLanguageProps> = ({\n    language,\n    name,\n    terms,\n}) => {\n    const renderInput = useCallback(() => (\n        <div>\n            { terms.split('\\n').map((item, key) =>\n                <Fragment key={ key }>\n                    { item }\n                    <br />\n                </Fragment>\n            ) }\n        </div>\n    ), [terms]);\n\n    const renderModal = useCallback((props: ModalTriggerModalProps) => (\n        <Modal\n            { ...props }\n            additionalBodyClassName=\"modal--terms\"\n            footer={ (\n                <Button\n                    onClick={ props.onRequestClose }\n                    size={ ButtonSize.Small }\n                >\n                    { language.translate('common.ok_action') }\n                </Button>\n            ) }\n            header={ (\n                <ModalHeader>\n                    { language.translate('terms_and_conditions.terms_and_conditions_heading') }\n                </ModalHeader>\n            ) }\n            shouldShowCloseButton={ true }\n        >\n            <FormField\n                input={ renderInput }\n                name={ `${name}Text` }\n            />\n        </Modal>\n    ), [language, renderInput, name]);\n\n    const termsLabel = language.translate('terms_and_conditions.agreement_with_link_text', { url: '' });\n    const termsLabelPrefix = termsLabel.replace(/(<a.*)/g, '');\n    const termsLabelSuffix = termsLabel.replace(/.*<\\/a>/, '');\n    const termsLinkLabelMatches = termsLabel.match(/<a [^>]+>([^<]+)<\\/a>/);\n\n    const labelContent = (<>\n        { termsLabelPrefix }\n        <ModalTrigger modal={ renderModal }>\n            { ({ onClick }) => (\n                <a onClick={ preventDefault(onClick) }>\n                    { termsLinkLabelMatches && termsLinkLabelMatches[1] }\n                </a>\n            ) }\n        </ModalTrigger>\n        { termsLabelSuffix }\n    </>);\n\n    return (\n        <CheckboxFormField\n            labelContent={ labelContent }\n            name={ name }\n        />\n    );\n};\n\nconst TermsConditionsTranslatedModalLink = withLanguage(TermsConditionsModalLink);\nconst TermsConditionsExternalLinkField: FunctionComponent<TermsConditionsLinkFieldProps> = ({ name, url }) => (\n    <CheckboxFormField\n        labelContent={\n            <TranslatedHtml\n                data={ { url } }\n                id=\"terms_and_conditions.agreement_with_link_text\"\n            />\n        }\n        name={ name }\n    />\n);\n\nconst TermsConditionsCheckboxField: FunctionComponent<TermsConditionsFieldProps> = props => {\n    return areTermsConditionsTextFieldProps(props) ?\n        <TermsConditionsTranslatedModalLink { ...props } /> :\n        <TermsConditionsExternalLinkField { ...props } />;\n};\n\nfunction areTermsConditionsTextFieldProps(props: any): props is TermsConditionsTextFieldProps {\n    return props.type === TermsConditionsType.TextArea;\n}\n\nexport default memo(TermsConditionsCheckboxField);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import React, { FunctionComponent } from 'react';\n\nimport './TermsConditions.scss';\nimport TermsConditionsField, { TermsConditionsType } from './TermsConditionsField';\n\nexport interface TermsConditionsProps {\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n}\n\nexport const TermsConditions: FunctionComponent<TermsConditionsProps> = ({\n    termsConditionsUrl,\n    termsConditionsText = '',\n}) => (\n    <>\n        { termsConditionsUrl ?\n            <TermsConditionsField\n                name=\"terms\"\n                type={ TermsConditionsType.Link }\n                url={ termsConditionsUrl }\n            /> :\n            <TermsConditionsField\n                name=\"terms\"\n                terms={ termsConditionsText }\n                type={ TermsConditionsType.TextArea }\n            /> }\n    </>\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface TermsConditionValidationSchemaOptions {\n    isTermsConditionsRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getTermsConditionsValidationSchema({\n    isTermsConditionsRequired,\n    language,\n}: TermsConditionValidationSchemaOptions): ObjectSchema<{ terms?: boolean }> {\n    const schemaFields: {\n        terms?: BooleanSchema;\n    } = {};\n\n    if (isTermsConditionsRequired) {\n        schemaFields.terms = boolean()\n            .oneOf([true], language.translate('terms_and_conditions.agreement_required_error'));\n    }\n\n    return object(schemaFields);\n}\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean>;\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            checked={ field.value }\n            className=\"form-checkbox\"\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id=\"customer.guest_subscribe_to_newsletter_text\" />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { getTermsConditionsValidationSchema, TermsConditions } from '../termsConditions';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isContinuingAsGuest: boolean;\n    isTermsConditionsRequired: boolean;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n    terms?: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    isContinuingAsGuest,\n    onChangeEmail,\n    onShowLogin,\n    isTermsConditionsRequired,\n    termsConditionsText,\n    termsConditionsUrl,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        id=\"checkout-customer-guest\"\n        testId=\"checkout-customer-guest\"\n    >\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.guest_customer_text\" />\n                </Legend>\n            }\n        >\n            <p>\n                <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n            </p>\n\n            <div className=\"customerEmail-container\">\n                <div className=\"customerEmail-body\">\n                    <EmailField onChange={ onChangeEmail } />\n\n                    { canSubscribe && <BasicFormField\n                        component={ SubscribeField }\n                        name=\"shouldSubscribe\"\n                    /> }\n                    { isTermsConditionsRequired && <TermsConditions\n                        termsConditionsText={ termsConditionsText }\n                        termsConditionsUrl={ termsConditionsUrl }\n                    /> }\n                </div>\n\n                <div className=\"form-actions customerEmail-action\">\n                    <Button\n                        className=\"customerEmail-button\"\n                        id=\"checkout-customer-continue\"\n                        isLoading={ isContinuingAsGuest }\n                        testId=\"customer-continue-as-guest-button\"\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"customer.continue_as_guest_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            <p>\n                <TranslatedString id=\"customer.login_text\" />\n                { ' ' }\n                <a\n                    data-test=\"customer-continue-button\"\n                    id=\"checkout-customer-login\"\n                    onClick={ onShowLogin }\n                >\n                    <TranslatedString id=\"customer.login_action\" />\n                </a>\n            </p>\n\n            { checkoutButtons }\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n    }) => ({\n        email,\n        shouldSubscribe: defaultShouldSubscribe,\n        terms: false,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language, isTermsConditionsRequired }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        return object({ email })\n            .concat(getTermsConditionsValidationSchema({\n                isTermsConditionsRequired,\n                language,\n            }));\n    },\n})(memo(GuestForm)));\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => (\n        <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>\n    ), [forgotPasswordUrl]);\n\n    return <FormField\n        footer={ footer }\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport mapErrorMessage from './mapErrorMessage';\nimport { EMAIL_REGEXP } from './validationPatterns';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    createAccountUrl: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    onCancel?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    createAccountUrl,\n    forgotPasswordUrl,\n    isSigningIn,\n    language,\n    onCancel,\n    onChangeEmail,\n    signInError,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        id=\"checkout-customer-returning\"\n        testId=\"checkout-customer-returning\"\n    >\n        <Fieldset legend={\n            <Legend hidden>\n                <TranslatedString id=\"customer.returning_customer_text\" />\n            </Legend>\n        }\n        >\n            { signInError && <Alert\n                testId=\"customer-login-error-message\"\n                type={ AlertType.Error }\n            >\n                { mapErrorMessage(signInError, key => language.translate(key)) }\n            </Alert> }\n\n            <p>\n                <TranslatedHtml\n                    data={ { url: createAccountUrl } }\n                    id=\"customer.create_account_to_continue_text\"\n                />\n            </p>\n\n            <EmailField onChange={ onChangeEmail } />\n\n            <PasswordField forgotPasswordUrl={ forgotPasswordUrl } />\n\n            <div className=\"form-actions\">\n                <Button\n                    id=\"checkout-customer-continue\"\n                    isLoading={ isSigningIn }\n                    testId=\"customer-continue-button\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"customer.sign_in_action\" />\n                </Button>\n\n                { canCancel && <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a> }\n            </div>\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        object({\n            email: string()\n                .max(256)\n                .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n                .required(language.translate('customer.email_required_error')),\n            password: string()\n                .required(language.translate('customer.password_required_error')),\n        }),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CheckoutSettings, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, GuestCredentials } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { TermsConditionsType } from '../termsConditions';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CustomerViewType from './CustomerViewType';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    subscribeToNewsletter?(data: { email: string; firstName?: string }): void;\n}\n\ninterface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    checkoutButtonIds: string[];\n    createAccountUrl: string;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isGuestEnabled: boolean;\n    isSigningIn: boolean;\n    isTermsConditionsRequired: boolean;\n    signInError?: Error;\n    termsConditionsText?: string;\n    termsConditionsUrl?: string;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps> {\n    private draftEmail?: string;\n\n    componentDidMount(): void {\n        const { onReady = noop } = this.props;\n\n        onReady();\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n\n        return (\n            <Fragment>\n                { viewType === CustomerViewType.Login && this.renderLoginForm() }\n                { viewType === CustomerViewType.Guest && this.renderGuestForm() }\n            </Fragment>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            isTermsConditionsRequired,\n            onUnhandledError = noop,\n            termsConditionsUrl,\n            termsConditionsText,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isContinuingAsGuest={ isContinuingAsGuest }\n                isTermsConditionsRequired={ isTermsConditionsRequired }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n                termsConditionsText={ termsConditionsText }\n                termsConditionsUrl={ termsConditionsUrl }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            createAccountUrl,\n            email,\n            forgotPasswordUrl,\n            isGuestEnabled,\n            isSigningIn,\n            signInError,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                createAccountUrl={ createAccountUrl }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onSignIn={ this.handleSignIn }\n                signInError={ signInError }\n            />\n        );\n    }\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            firstName,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n            subscribeToNewsletter = noop,\n        } = this.props;\n\n        if (canSubscribe && formValues.shouldSubscribe) {\n            subscribeToNewsletter({ email: formValues.email, firstName });\n        }\n\n        try {\n            await continueAsGuest({ email: formValues.email });\n            onContinueAsGuest();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getConfig },\n        errors: { getSignInError },\n        statuses: { isContinuingAsGuest, isSigningIn },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    const {\n        enableTermsAndConditions: isTermsConditionsEnabled,\n        orderTermsAndConditionsType: termsConditionsType,\n        orderTermsAndConditionsLocation: termsAndConditionsLocation,\n        orderTermsAndConditions: termsCondtitionsText,\n        orderTermsAndConditionsLink: termsCondtitionsUrl,\n    } = config.checkoutSettings as CheckoutSettings & { orderTermsAndConditionsLocation: string };\n\n    const isTermsConditionsRequired = isTermsConditionsEnabled && termsAndConditionsLocation === 'customer';\n\n    return {\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        continueAsGuest: checkoutService.continueAsGuest,\n        createAccountUrl: config.links.createAccountLink,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        email: (billingAddress && billingAddress.email) || (customer && customer.email),\n        firstName: customer && customer.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isTermsConditionsRequired,\n        isSigningIn: isSigningIn(),\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n        termsConditionsText: isTermsConditionsRequired && termsConditionsType === TermsConditionsType.TextArea ?\n            termsCondtitionsText :\n            undefined,\n        termsConditionsUrl: isTermsConditionsRequired && termsConditionsType === TermsConditionsType.Link ?\n            termsCondtitionsUrl :\n            undefined,\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}