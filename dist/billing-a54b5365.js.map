{"version":3,"sources":["webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["BillingForm_BillingForm","_super","BillingForm","_this","apply","this","arguments","state","isResettingAddress","addressFormRef","Object","react","handleSelectAddress","address","__awaiter","_a","props","updateAddress","onUnhandledError","setState","_b","sent","e_1","handleUseNewAddress","__extends","prototype","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","addresses","customer","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","hasAddresses","length","hasValidCustomerAddress","isValidCustomerAddress","countryCode","react_default","a","createElement","Form","autoComplete","Fieldset","ref","id","LoadingOverlay","isLoading","AddressSelect","selectedAddress","undefined","onUseNewAddress","onSelectAddress","AddressForm","formFields","OrderComments","className","Button","variant","Primary","disabled","type","TranslatedString","billing_BillingForm","withLanguage","formik_esm","handleSubmit","onSubmit","mapPropsToValues","customerMessage","__assign","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressValidationSchema","isValidSync","validationSchema","lib","enableReinitialize","Billing_Billing","Billing","Billing_awaiter","addressValues","__rest","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","_c","error_1","Billing_extends","componentDidMount","initialize","onReady","lodash","isInitializing","Legend","testId","unmountContentWhenLoading","Billing_assign","__webpack_exports__","withCheckout","checkoutService","checkoutState","data","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","statuses","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkout","cart","_d","checkoutSettings","enableOrderComments","features","emptyData","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress"],"mappings":"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","file":"billing-a54b5365.js","sourcesContent":["import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressValidationSchema, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    customer: Customer;\n    customerMessage: string;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    onSubmit(values: BillingFormValues): void;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n        } = this.props;\n\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset ref={ this.addressFormRef } id=\"checkoutBillingAddress\">\n                    { hasAddresses &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset> }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                setFieldValue={ setFieldValue }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                countryCode={ values.countryCode }\n                                formFields={ getFields(values.countryCode) }\n                            />\n                        </LoadingOverlay> }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments /> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        variant={ ButtonVariant.Primary }\n                        isLoading={ isUpdating || isResettingAddress }\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        type=\"submit\"\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n    }: BillingFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    unmountContentWhenLoading\n                    isLoading={ isInitializing }\n                >\n                    <BillingForm\n                        { ...props }\n                        updateAddress={ updateAddress }\n                        onSubmit={ this.handleSubmit }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}