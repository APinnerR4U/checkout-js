{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts","webpack://checkout/./src/app/address/getFormFieldInputId.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/address/DynamicInput.tsx","webpack://checkout/./src/app/address/MultiCheckboxControl.tsx","webpack://checkout/./src/app/address/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/address/DynamicFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx"],"names":["CheckboxInput","Object","react__WEBPACK_IMPORTED_MODULE_5__","_ref","ref","additionalClassName","label","id","rest","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","_Input__WEBPACK_IMPORTED_MODULE_6__","assign","className","classnames__WEBPACK_IMPORTED_MODULE_4___default","type","_Label__WEBPACK_IMPORTED_MODULE_7__","htmlFor","__webpack_exports__","isEqualAddress","address1","address2","lodash__WEBPACK_IMPORTED_MODULE_7__","normalizeAddress","address","_objectSpread","customFields","filter","fieldValue","getShippableItemsCount","cart","_getLineItemsCount__WEBPACK_IMPORTED_MODULE_1__","lineItems","physicalItems","item","addedByPromotion","DropdownTrigger","_this","_classCallCheck","this","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","react__WEBPACK_IMPORTED_MODULE_15__","_this2","_this$props","props","children","placement","dropdown","react__WEBPACK_IMPORTED_MODULE_15___default","react_popper__WEBPACK_IMPORTED_MODULE_16__","onClick","modifiers","hide","enabled","flip","preventOverflow","_ref2","style","width","zIndex","defaultProps","TextArea","testId","data-test","mapAddressFromFormValues","formValues","customFieldsObject","lodash__WEBPACK_IMPORTED_MODULE_10__","value","key","push","fieldId","toISOString","slice","__webpack_require__","d","isValidCustomerAddress","lodash__WEBPACK_IMPORTED_MODULE_0__","_isEqualAddress__WEBPACK_IMPORTED_MODULE_1__","_isValidAddress__WEBPACK_IMPORTED_MODULE_2__","addresses","formFields","customerAddress","AddressSelect","onSelectAddress","newAddress","selectedAddress","_isEqualAddress__WEBPACK_IMPORTED_MODULE_14__","react__WEBPACK_IMPORTED_MODULE_10__","_this$props2","_onUseNewAddress","onUseNewAddress","react__WEBPACK_IMPORTED_MODULE_10___default","role","_ui_dropdown__WEBPACK_IMPORTED_MODULE_13__","AddressSelectMenu","AddressSelectButton","href","_common_dom__WEBPACK_IMPORTED_MODULE_11__","_locale__WEBPACK_IMPORTED_MODULE_12__","map","_StaticAddress__WEBPACK_IMPORTED_MODULE_15__","react__WEBPACK_IMPORTED_MODULE_1___default","_ui_form__WEBPACK_IMPORTED_MODULE_3__","legend","_ui_form__WEBPACK_IMPORTED_MODULE_4__","_locale__WEBPACK_IMPORTED_MODULE_2__","_ui_form__WEBPACK_IMPORTED_MODULE_5__","name","_ui_form__WEBPACK_IMPORTED_MODULE_6__","hidden","input","field","_ui_form__WEBPACK_IMPORTED_MODULE_7__","maxLength","autoComplete","AddressSelector","googlePlace","address_components","_name","_address","_get","access","element","find","types","indexOf","AddressSelectorUK","AddressSelectorFactory_AddressSelectorFactory","autocompleteData","addressSelector","getCountry","mapToAddress","countries","arguments","length","undefined","accessor","create","getState","countryCode","country","c","code","getStreet2","city","getCity","postalCode","getPostCode","stateName","states","stateOrProvince","stateOrProvinceCode","subdivisions","ADDRESS_FIELD_IDS","getFormFieldLegacyName","concat","getFormFieldInputId","ui_popover_Popover","react_default","getItemClassName","highlightedIndex","index","classes","join","ui_popover_PopoverList","_ref$highlightedIndex","_ref$getItemProps","getItemProps","_ref$menuProps","menuProps","items","content","autocomplete_Autocomplete","Autocomplete","Autocomplete_classCallCheck","_stateReducer","changes","onChange","downshift_esm","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","Autocomplete_objectSpread","inputValue","changeInput","isOpen","keyDownEnter","react","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","_this$props$onToggleO","onToggleOpen","lodash","initialInputValue","defaultHighlightedIndex","onStateChange","stateReducer","itemToString","_itemToString","getInputProps","getMenuProps","_toPopoverItem","_highlightItem","highlightedSlices","lastIndex","reduce","node","i","offset","notHighlightedLength","substr","instance","GoogleAutocompleteScriptLoader_GoogleAutocompleteScriptLoader","GoogleAutocompleteScriptLoader","GoogleAutocompleteScriptLoader_classCallCheck","_scriptLoader","lib","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","GoogleAutocompleteService_GoogleAutocompleteService","GoogleAutocompleteService","_apiKey","GoogleAutocompleteService_classCallCheck","_autocompletePromise","loadMapsSdk","then","googleMapsSdk","AutocompleteService","Error","_placesPromise","PlacesService","address_googleAutocomplete_GoogleAutocomplete","GoogleAutocomplete","GoogleAutocomplete_classCallCheck","GoogleAutocomplete_possibleConstructorReturn","GoogleAutocomplete_getPrototypeOf","call","_this$props$onSelect","nextElement","googleAutocompleteService","getPlacesServices","service","getDetails","placeId","fields","result","focus","isAutocompleteEnabled","_this$props2$onChange","resetAutocomplete","setAutocomplete","setItems","_this$props3","_this$props3$onToggle","_this$props3$inputPro","GoogleAutocomplete_objectSpread","getAutocompleteService","getPlacePredictions","componentRestrictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","googleAutocomplete_GoogleAutocompleteFormField","supportedCountries","parentFieldName","fieldName","FormField","labelContent","TranslatedString","form_RadioInput","checked","Input","classnames_default","Label","address_DynamicInput","fieldType","options","placeholder","DynamicInput_objectWithoutProperties","DynamicFormFieldType","optionValue","radio","_ref3","checkbox","_ref4","Array","isArray","includes","date","es","DynamicInput_objectSpread","target","placeholderText","minDate","min","Date","maxDate","max","popperClassName","calendarClassName","selected","multiline","TextInput","password","address_MultiCheckboxControl","onSelectedAll","onSelectedNone","preventDefault","address_CheckboxGroupFormField","_ref$onChange","_onChange","formik_esm","render","remove","pop","_ref2$form","form","values","errors","FormFieldContainer","hasError","checkedValues","forEach","val","_e$target","FormFieldError","LABEL","company","firstName","lastName","phone","AUTOCOMPLETE","address_DynamicFormField","_ref$field","fieldLabel","custom","required","addressFieldName","fieldInputId","translatedLabelString","_label","helperLabel","rows","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","AddressForm_AddressForm","AddressForm","AddressForm_classCallCheck","containerRef","onAutocompleteSelect","place","autocompleteValue","_this$props$setFieldV","setFieldValue","_this$props$onChange","syncNonFormikValue","_this$props2$setField","dateFormFieldNames","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","translatedPlaceholderId","translate","getDynamicFormFieldType","secret","number","text","telephone","withLanguage"],"mappings":"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","file":"billing~shipping-cc5d01f8-13e68dca.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            ref={ ref }\n            type=\"checkbox\"\n            id={ id }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = ['id', 'stateOrProvinceCode', 'type', 'email'];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    placement={ placement }\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface TextAreaProps extends InputHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport { forIn, isDate } from 'lodash';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields: customFieldsObject, ...address } = formValues;\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n\n    forIn(customFieldsObject, (value, key) =>\n        customFields.push({\n            fieldId: key,\n            fieldValue: isDate(value) ? value.toISOString().slice(0, 10) : value,\n        })\n    );\n\n    return {\n        ...address,\n        customFields,\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { Component, FunctionComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends Component<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger dropdown={\n                        <AddressSelectMenu\n                            addresses={ addresses }\n                            onSelectAddress={ this.onSelectAddress }\n                            onUseNewAddress={ () => onUseNewAddress(selectedAddress) }\n                            selectedAddress={ selectedAddress }\n                        />\n                    }>\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private onSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a href=\"#\" onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }>\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" />\n        }\n    </a>\n);\n\nexport default AddressSelect;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => (\n    <Fieldset testId=\"checkout-shipping-comments\"\n        legend={\n            <Legend>\n                <TranslatedString id=\"shipping.order_comment_label\" />\n            </Legend>\n        }\n    >\n        <FormField\n            name=\"orderComment\"\n            label={ name => (\n                <Label hidden htmlFor={ name }>\n                    <TranslatedString id=\"shipping.order_comment_label\" />\n                </Label>\n            ) }\n            input={ ({ field }) => (\n                <TextInput\n                    { ...field }\n                    maxLength={ 2000 }\n                    autoComplete={'off'}\n                />\n            )}\n        />\n    </Fieldset>\n);\n\nexport default OrderComments;\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { Country, Region } from '../../geography';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n","import { AddressKeyMap } from './DynamicFormField';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getFormFieldInputId(name: string): string {\n    return `${getFormFieldLegacyName(name)}Input`;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            data-test={ testId }\n            className=\"popoverList\" { ...menuProps }\n        >{ items\n            .map((item, index) => (\n                <li\n                    data-test={ testId && `${testId}-item` }\n                    className={ getItemClassName(highlightedIndex, index) }\n                    { ...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    })}\n                    key={ index }\n                >\n                    { item.content }\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default PopoverList;\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Component, Fragment, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends Component<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n            onToggleOpen = noop,\n        } = this.props;\n\n        return (\n            <Downshift\n                initialInputValue={ initialValue }\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                onStateChange={ ({ isOpen, inputValue }) => {\n                    if (isOpen !== undefined) {\n                        onToggleOpen({ isOpen, inputValue: inputValue || ''  });\n                    }\n                }}\n                stateReducer={ (state, changes) => this._stateReducer(state, changes) }\n                onChange={ onSelect }\n                itemToString={ this._itemToString }\n            >\n                {({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    testId={ listTestId }\n                                    menuProps={ getMenuProps() }\n                                    items={ items.map(item => this._toPopoverItem(item)) }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    getItemProps={ getItemProps }\n                                />\n                                { children }\n                            </Popover>\n                        }\n                    </div>\n                )}\n            </Downshift>\n        );\n    }\n\n    private _toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this._highlightItem(item),\n        };\n    }\n\n    private _highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{label.substr(offset, length)}</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private _itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private _stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n    };\n}\n\nexport default Autocomplete;\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    GoogleAutocompleteWindow,\n    GoogleMapsSdk,\n} from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends Component<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n        const { items } = this.state;\n\n        return (\n            <Autocomplete\n                listTestId=\"address-autocomplete-suggestions\"\n                items={ items }\n                initialHighlightedIndex={ 0 }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete: this.state.autoComplete,\n                } }\n                initialValue={ initialValue }\n                onSelect={ this.onSelect }\n                onChange={ this.onChange }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\"></div>\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: this.props.fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: this.props.types || ['geocode'],\n                componentRestrictions: this.props.componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getFormFieldInputId } from '../getFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                name={ fieldName }\n                labelContent={ <TranslatedString id=\"address.address_line_1_label\" />}\n                input={ ({ field }) =>\n                    <GoogleAutocomplete\n                        apiKey={ apiKey }\n                        onSelect={ onSelect }\n                        onChange={ onChange }\n                        initialValue={ field.value }\n                        nextElement={ nextElement }\n                        onToggleOpen={ onToggleOpen }\n                        isAutocompleteEnabled={ countryCode ?\n                            supportedCountries.indexOf(countryCode) > -1 :\n                            false\n                        }\n                        inputProps={ {\n                            className: 'form-input optimizedCheckout-form-input',\n                            id: getFormFieldInputId(name),\n                        } }\n                        componentRestrictions={ countryCode ?\n                            { country: countryCode } :\n                            undefined\n                        }\n                    />\n                }\n            />\n        </div>\n    );\n};\n\nexport default GoogleAutocompleteFormField;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n            id={ id }\n            checked={ checked }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate } from 'lodash';\nimport React, { FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { CheckboxInput, InputProps, RadioInput, TextArea, TextInput } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    additionalClassName,\n    fieldType,\n    options,\n    placeholder,\n    value,\n    id,\n    ...rest\n}) => {\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                id={ id }\n                data-test={ `${id}-select` }\n                className=\"form-select optimizedCheckout-form-select\"\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option>\n                }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                )}\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>{ options.map(({ label, value: optionValue }) =>\n            <RadioInput\n                { ...rest }\n                id={ `${id}-${optionValue}` }\n                testId={ `${id}-${optionValue}-radio` }\n                key={ optionValue }\n                label={ label }\n                value={ optionValue }\n                checked={ optionValue === value }\n            />) }</>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>{ options.map(({ label, value: optionValue }) =>\n            <CheckboxInput\n                { ...rest }\n                id={ `${id}-${optionValue}` }\n                testId={ `${id}-${optionValue}-checkbox` }\n                key={ optionValue }\n                label={ label }\n                value={ optionValue }\n                checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n            />) }</>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                onChange={\n                    (date, event) => rest.onChange && rest.onChange({\n                        ...event,\n                        target: {\n                            name: rest.name,\n                            value: date,\n                        },\n                    } as any)\n                }\n                autoComplete=\"off\"\n                placeholderText=\"MM/DD/YYYY\"\n                minDate={ rest.min ? new Date(rest.min) : undefined }\n                maxDate={ rest.max ? new Date(rest.max) : undefined }\n                className=\"form-input optimizedCheckout-form-input\"\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }`\n                }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default DynamicInput;\n","import React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => (\n    <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ e => {\n                    e.preventDefault();\n                    onSelectedAll();\n                }\n            }>\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ e => {\n                    e.preventDefault();\n                    onSelectedNone();\n                }\n            }>\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>\n);\n\nexport default MultiCheckboxControl;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray } from 'formik';\nimport { difference, kebabCase, noop } from 'lodash';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { FormFieldContainer, FormFieldError } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    name: string;\n    id: string;\n    label: ReactNode;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    label,\n    name,\n    id,\n    options,\n    onChange = noop,\n}) => (\n    <FieldArray\n        name={ name }\n        render={ ({ push, remove, pop, form: { values, errors } }) => (\n            <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n                { label }\n                <MultiCheckboxControl\n                    testId={ id }\n                    onSelectedAll={ () => {\n                        const checkedValues: string[] = getIn(values, name) || [];\n                        difference(options.map(({ value }) => value), checkedValues)\n                            .forEach(val => push(val));\n\n                        onChange(getIn(values, name));\n                    }}\n                    onSelectedNone={ () => {\n                        const checkedValues: string[] = getIn(values, name) || [];\n                        checkedValues.forEach(() => pop());\n                        onChange(getIn(values, name));\n                    }}\n                />\n                <DynamicInput\n                    name={ name }\n                    value={ getIn(values, name) || [] }\n                    onChange={e => {\n                        const checkedValues: string[] = getIn(values, name) || [];\n                        const { value, checked } = e.target;\n\n                        if (checked) {\n                            push(value);\n                        } else {\n                            remove(checkedValues.indexOf(value));\n                        }\n\n                        onChange(getIn(values, name));\n                    } }\n                    fieldType={ DynamicFormFieldType.checkbox }\n                    options={ options }\n                    id={ id }\n                />\n                <FormFieldError\n                    name={ name }\n                    testId={ `${kebabCase(name)}-field-error-message` }\n                />\n            </FormFieldContainer>\n        )}\n    />\n);\n\nexport default CheckboxGroupFormField;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, Label } from '../ui/form';\n\nimport { getFormFieldInputId, getFormFieldLegacyName } from './getFormFieldInputId';\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface AddressKeyMap<T = string> {\n    [fieldName: string]: T;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    parentFieldName?: string;\n    placeholder?: string;\n    fieldType?: DynamicFormFieldType;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        name,\n        label: fieldLabel,\n        custom,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    fieldType,\n    parentFieldName,\n    onChange,\n    placeholder,\n}) => {\n    const addressFieldName = name;\n    const fieldInputId = getFormFieldInputId(addressFieldName);\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const translatedLabelString = LABEL[name];\n    const label = (\n        <Label htmlFor={ fieldInputId }>\n            { custom ?\n                fieldLabel :\n                translatedLabelString && <TranslatedString id={ translatedLabelString } />\n            }\n            { !required &&\n                <> { '' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </>\n            }\n        </Label>\n    );\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--${getFormFieldLegacyName(addressFieldName)}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    onChange={ onChange }\n                    name={ fieldName }\n                    id={ fieldInputId }\n                    label={ label }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    name={ fieldName }\n                    onChange={ onChange }\n                    label={ () => label }\n                    input={ props =>\n                        <DynamicInput\n                            { ...props.field }\n                            maxLength={ maxLength || undefined }\n                            max={ max }\n                            min={ min }\n                            placeholder={ placeholder || (options && options.helperLabel) }\n                            fieldType={ fieldType }\n                            rows={ options && (options as any).rows }\n                            options={ options && options.items }\n                            autoComplete={ AUTOCOMPLETE[addressFieldName] }\n                            id={ fieldInputId }\n                        />\n                    }\n                />\n            }\n        </div>\n    );\n};\n\nexport default DynamicFormField;\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\n\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport DynamicFormField, { AddressKeyMap } from './DynamicFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n        } = this.props;\n\n        return (\n            <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                { formFields.map(field => {\n                    const addressFieldName = field.name;\n                    const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                    if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                        return (\n                            <GoogleAutocompleteFormField\n                                key={ field.id }\n                                parentFieldName={ fieldName }\n                                countryCode={ countryCode }\n                                supportedCountries={ countriesWithAutocomplete }\n                                field={ field }\n                                onSelect={ this.onAutocompleteSelect }\n                                onToggleOpen={ onAutocompleteToggle }\n                                onChange={ (value, isOpen) => {\n                                    if (!isOpen) {\n                                        this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n                                    }\n                                } }\n                                apiKey={ googleMapsApiKey }\n                                nextElement={ this.nextElement || undefined }\n                            />\n                        );\n                    }\n\n                    return (\n                        <DynamicFormField\n                            onChange={ value => this.syncNonFormikValue(addressFieldName, value) }\n                            // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                            key={ `${field.id}-${field.name}` }\n                            parentFieldName={ field.custom ?\n                                (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                fieldName\n                            }\n                            field={ field }\n                            placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            fieldType={ this.getDynamicFormFieldType(field) }\n                        />\n                    );\n                }) }\n            </div>\n        );\n    }\n\n    private getDynamicFormFieldType({\n        custom,\n        name,\n        fieldType,\n        type,\n        secret,\n    }: FormField): DynamicFormFieldType {\n        if (!custom) {\n            const defaultTypes: { [key: string]: DynamicFormFieldType } = {\n                phone: DynamicFormFieldType.telephone,\n                countryCode: DynamicFormFieldType.dropdown,\n                stateOrProvinceCode: DynamicFormFieldType.dropdown,\n            };\n\n            return defaultTypes[name] || DynamicFormFieldType.text;\n        }\n\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }\n\n    private onAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n"],"sourceRoot":""}