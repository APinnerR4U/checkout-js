{"version":3,"file":"customer-ce2da49c.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/common/utility/parseAnchor.ts","webpack://checkout/./packages/core/src/app/customer/validationPatterns.ts","webpack://checkout/./packages/core/src/app/customer/getEmailValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/getCreateCustomerValidationSchema.ts","webpack://checkout/./packages/core/src/app/customer/CreateAccountForm.tsx","webpack://checkout/./packages/core/src/app/customer/EmailField.tsx","webpack://checkout/./packages/core/src/app/customer/EmailLoginForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./packages/core/src/app/customer/SubscribeField.tsx","webpack://checkout/./packages/core/src/app/customer/GuestForm.tsx","webpack://checkout/./packages/core/src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./packages/core/src/app/ui/icon/IconEye.tsx","webpack://checkout/./packages/core/src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./packages/core/src/app/customer/PasswordField.tsx","webpack://checkout/./packages/core/src/app/customer/LoginForm.tsx","webpack://checkout/./packages/core/src/app/customer/mapErrorMessage.ts","webpack://checkout/./packages/core/src/app/customer/mapCreateAccountFromFormValues.ts","webpack://checkout/./packages/core/src/app/customer/Customer.tsx","webpack://checkout/./packages/core/src/app/formFields/mapCustomFormFieldsFromFormValues.ts","webpack://checkout/./packages/core/src/app/locale/TranslatedLink.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./packages/core/src/app/locale/withDate.tsx","webpack://checkout/./packages/core/src/app/ui/form/RadioInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicInput.tsx","webpack://checkout/./packages/core/src/app/ui/form/MultiCheckboxControl.tsx","webpack://checkout/./packages/core/src/app/ui/form/CheckboxGroupFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/DynamicFormField.tsx","webpack://checkout/./packages/core/src/app/ui/form/TextArea.tsx"],"sourcesContent":["export default function parseAnchor(text: string): string[] {\n    const div = document.createElement('div');\n\n    div.innerHTML = text;\n\n    const anchor = div.querySelector('a');\n\n    if (!anchor) {\n        return [];\n    }\n\n    const anchorSiblings = div.innerHTML.split(anchor.outerHTML);\n\n    return [anchorSiblings[0], anchor.text, anchorSiblings[1]];\n}\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP =\n    /^[a-z0-9!#$%&'*+/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport { EMAIL_REGEXP } from './validationPatterns';\n\nexport interface EmailValidationSchemaOptions {\n    language: LanguageService;\n}\n\nexport default function getEmailValidationSchema({\n    language,\n}: EmailValidationSchemaOptions): ObjectSchema<{ email: string }> {\n    return object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n    });\n}\n","import { FormField, LanguageService } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { object, ObjectSchema, string } from 'yup';\n\nimport {\n    CustomFormFieldValues,\n    getCustomFormFieldsValidationSchema,\n    TranslateValidationErrorFunction,\n} from '../formFields';\n\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport { PasswordRequirements } from './getPasswordRequirements';\n\nexport type CreateAccountFormValues = {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    acceptsMarketingEmails?: string[];\n    token?: string;\n} & CustomFormFieldValues;\n\nexport interface CreateCustomerValidationSchema {\n    formFields: FormField[];\n    language: LanguageService;\n    passwordRequirements: PasswordRequirements;\n}\n\nfunction getTranslateCreateCustomerError(\n    language?: LanguageService,\n): TranslateValidationErrorFunction {\n    return (type, { label, min, max }) => {\n        if (!language) {\n            return;\n        }\n\n        if (type === 'required') {\n            return language.translate('customer.required_error', { label });\n        }\n\n        if (type === 'max' && max) {\n            return language.translate('customer.max_error', { label, max });\n        }\n\n        if (type === 'min' && min) {\n            return language.translate('customer.min_error', { label, min });\n        }\n\n        if (type === 'invalid') {\n            return language.translate('customer.invalid_characters_error', { label });\n        }\n    };\n}\n\nexport default memoize(function getCreateCustomerValidationSchema({\n    formFields,\n    language,\n    passwordRequirements: { description, numeric, alpha, minLength },\n}: CreateCustomerValidationSchema): ObjectSchema<CreateAccountFormValues> {\n    return object({\n        firstName: string().required(language.translate('address.first_name_required_error')),\n        lastName: string().required(language.translate('address.last_name_required_error')),\n        password: string()\n            .required(language.translate('customer.password_required_error') || description)\n            .matches(\n                numeric,\n                language.translate('customer.password_number_required_error') || description,\n            )\n            .matches(\n                alpha,\n                language.translate('customer.password_letter_required_error') || description,\n            )\n            .min(\n                minLength,\n                language.translate('customer.password_under_minimum_length_error' || description),\n            )\n            .max(100, language.translate('customer.password_over_maximum_length_error')),\n    })\n        .concat(getEmailValidationSchema({ language }))\n        .concat(\n            getCustomFormFieldsValidationSchema({\n                formFields,\n                translate: getTranslateCreateCustomerError(language),\n            }),\n        );\n});\n","import { FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, useMemo } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { isRequestError } from '../common/error';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset, Form } from '../ui/form';\n\nimport getCreateCustomerValidationSchema, {\n    CreateAccountFormValues,\n} from './getCreateCustomerValidationSchema';\nimport getPasswordRequirements from './getPasswordRequirements';\nimport './CreateAccountForm.scss';\n\nexport interface CreateAccountFormProps {\n    formFields: FormField[];\n    createAccountError?: Error;\n    isCreatingAccount?: boolean;\n    requiresMarketingConsent: boolean;\n    onCancel?(): void;\n    onSubmit?(values: CreateAccountFormValues): void;\n}\n\nconst CreateAccountForm: FunctionComponent<\n    CreateAccountFormProps & WithLanguageProps & FormikProps<CreateAccountFormValues>\n> = ({ formFields, createAccountError, isCreatingAccount, onCancel }) => {\n    const createAccountErrorMessage = useMemo(() => {\n        if (!createAccountError) {\n            return;\n        }\n\n        if (isRequestError(createAccountError) && createAccountError.status === 409) {\n            const splitMessage = createAccountError.message.split(':');\n\n            if (splitMessage.length > 1) {\n                return (\n                    <TranslatedString\n                        data={{ email: splitMessage[1].trim() }}\n                        id=\"customer.email_in_use_text\"\n                    />\n                );\n            }\n\n            return <TranslatedString id=\"customer.unknown_email_in_use_text\" />;\n        }\n\n        return createAccountError.message;\n    }, [createAccountError]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset>\n                {createAccountErrorMessage && (\n                    <Alert type={AlertType.Error}>{createAccountErrorMessage}</Alert>\n                )}\n                <div className=\"create-account-form\">\n                    {formFields.map((field) => (\n                        <DynamicFormField\n                            autocomplete={field.name}\n                            extraClass={`dynamic-form-field--${field.name}`}\n                            field={field}\n                            key={field.id}\n                            parentFieldName={field.custom ? 'customFields' : undefined}\n                        />\n                    ))}\n                </div>\n            </Fieldset>\n\n            <div className=\"form-actions\">\n                <Button\n                    disabled={isCreatingAccount}\n                    id=\"checkout-customer-create\"\n                    testId=\"customer-continue-create\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"customer.create_account_action\" />\n                </Button>\n\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={preventDefault(onCancel)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n            </div>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<CreateAccountFormProps & WithLanguageProps, CreateAccountFormValues>({\n        handleSubmit: (values, { props: { onSubmit = noop } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ requiresMarketingConsent }) => ({\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: '',\n            customFields: {},\n            acceptsMarketingEmails: requiresMarketingConsent ? [] : ['0'],\n        }),\n        validationSchema: ({\n            language,\n            formFields,\n        }: CreateAccountFormProps & WithLanguageProps) => {\n            const passwordRequirements = formFields.find(\n                ({ requirements }) => requirements,\n            )?.requirements;\n\n            if (!passwordRequirements) {\n                throw new Error('Password requirements missing');\n            }\n\n            const schema = getCreateCustomerValidationSchema({\n                language,\n                formFields,\n                passwordRequirements: getPasswordRequirements(passwordRequirements),\n            });\n\n            return schema;\n        },\n    })(CreateAccountForm),\n);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps> = ({ onChange }) => {\n    const renderInput = useCallback(\n        (props: FieldProps) => (\n            <TextInput\n                {...props.field}\n                autoComplete={props.field.name}\n                id={props.field.name}\n                type=\"email\"\n            />\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id=\"customer.email_label\" />, []);\n\n    return (\n        <FormField\n            input={renderInput}\n            labelContent={labelContent}\n            name=\"email\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(EmailField);\n","import { SignInEmail } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport {\n    TranslatedHtml,\n    TranslatedLink,\n    TranslatedString,\n    withLanguage,\n    WithLanguageProps,\n} from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingSpinner } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport EmailField from './EmailField';\nimport getEmailValidationSchema from './getEmailValidationSchema';\n\nexport interface EmailLoginFormProps {\n    email?: string;\n    isOpen: boolean;\n    isSendingEmail?: boolean;\n    emailHasBeenRequested?: boolean;\n    sentEmail?: SignInEmail;\n    sentEmailError?: any;\n    onRequestClose?(): void;\n    onSendLoginEmail?(values: EmailLoginFormValues): void;\n}\n\nexport interface EmailLoginFormValues {\n    email: string;\n}\n\nconst EmailLoginForm: FunctionComponent<\n    EmailLoginFormProps & WithLanguageProps & FormikProps<EmailLoginFormValues>\n> = ({\n    email,\n    isOpen,\n    isSendingEmail = false,\n    emailHasBeenRequested,\n    onRequestClose = noop,\n    sentEmailError,\n    sentEmail,\n    submitForm,\n    values: { email: formEmail },\n}) => {\n    const modalHeaderStringId = useMemo(() => {\n        if (emailHasBeenRequested) {\n            if (sentEmailError) {\n                return 'common.error_heading';\n            }\n\n            return 'login_email.sent_header';\n        }\n\n        if (email) {\n            return 'login_email.header_with_email';\n        }\n\n        return 'login_email.header';\n    }, [emailHasBeenRequested, sentEmailError, email]);\n\n    const okButton = useMemo(\n        () => (\n            <div className=\"modal-footer\">\n                <Button onClick={onRequestClose}>\n                    <TranslatedString id=\"common.ok_action\" />\n                </Button>\n            </div>\n        ),\n        [onRequestClose],\n    );\n\n    const footer = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return okButton;\n        }\n\n        if (emailHasBeenRequested && !sentEmailError) {\n            if (isSendingEmail) {\n                return <LoadingSpinner isLoading />;\n            }\n\n            if (sentEmail && sentEmail.sent_email === 'reset_password') {\n                return okButton;\n            }\n\n            return (\n                <p>\n                    <TranslatedLink id=\"login_email.resend_link\" onClick={submitForm} />\n                    <TranslatedLink id=\"login_email.use_password_link\" onClick={onRequestClose} />\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"modal-footer\">\n                <Button\n                    className=\"optimizedCheckout-buttonSecondary\"\n                    onClick={onRequestClose}\n                    type=\"button\"\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </Button>\n                <Button isLoading={isSendingEmail} type=\"submit\" variant={ButtonVariant.Primary}>\n                    <TranslatedString id=\"login_email.send\" />\n                </Button>\n            </div>\n        );\n    }, [\n        sentEmailError,\n        emailHasBeenRequested,\n        okButton,\n        submitForm,\n        isSendingEmail,\n        onRequestClose,\n        sentEmail,\n    ]);\n\n    const error = useMemo(() => {\n        if (!sentEmailError) {\n            return null;\n        }\n\n        const { status } = sentEmailError;\n\n        return (\n            <Alert type={AlertType.Error}>\n                {status === 429 ? (\n                    <TranslatedString id=\"login_email.error_temporary_disabled\" />\n                ) : (\n                    <TranslatedString\n                        id={\n                            status === 404\n                                ? 'login_email.error_not_found'\n                                : 'login_email.error_server'\n                        }\n                    />\n                )}\n            </Alert>\n        );\n    }, [sentEmailError]);\n\n    const form = useMemo(() => {\n        if (sentEmailError && sentEmailError.status === 429) {\n            return null;\n        }\n\n        if (emailHasBeenRequested && sentEmail && !sentEmailError) {\n            const { expiry, sent_email } = sentEmail;\n\n            return (\n                <p>\n                    <TranslatedHtml\n                        data={{\n                            email: formEmail,\n                            minutes: Math.round(expiry / 60),\n                        }}\n                        id={\n                            sent_email === 'sign_in'\n                                ? 'login_email.sent_text'\n                                : 'customer.reset_password_before_login_error'\n                        }\n                    />\n                </p>\n            );\n        }\n\n        if (emailHasBeenRequested && !sentEmail) {\n            return <EmailField />;\n        }\n\n        return (\n            <>\n                <p>\n                    <TranslatedString id=\"login_email.text\" />\n                </p>\n                <EmailField />\n            </>\n        );\n    }, [sentEmailError, emailHasBeenRequested, sentEmail, formEmail]);\n\n    return (\n        <Modal\n            additionalBodyClassName=\"modal--withText\"\n            additionalModalClassName=\"modal--medium\"\n            header={\n                <ModalHeader>\n                    <TranslatedString id={modalHeaderStringId} />\n                </ModalHeader>\n            }\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n            shouldShowCloseButton={true}\n        >\n            <Form>\n                <LoadingSpinner isLoading={isSendingEmail && !email} />\n                {error}\n                {form}\n                {footer}\n            </Form>\n        </Modal>\n    );\n};\n\nexport default withLanguage(\n    withFormik<EmailLoginFormProps & WithLanguageProps, EmailLoginFormValues>({\n        mapPropsToValues: ({ email = '' }) => ({\n            email,\n        }),\n        handleSubmit: (values, { props: { onSendLoginEmail = noop } }) => {\n            onSendLoginEmail(values);\n        },\n        validationSchema: ({ language }: WithLanguageProps) =>\n            getEmailValidationSchema({ language }),\n    })(memo(EmailLoginForm)),\n);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedHtml } from '../locale';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({ url }) => (\n    <CheckboxFormField\n        labelContent={<TranslatedHtml data={{ url }} id=\"privacy_policy.label\" />}\n        name=\"privacyPolicy\"\n    />\n);\n\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({ url }) => (\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\n        <PrivacyPolicyCheckboxFieldLink url={url} />\n    </Fieldset>\n);\n\nexport default memo(PrivacyPolicyFieldset);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean> & {\n    requiresMarketingConsent: boolean;\n};\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({\n    field,\n    requiresMarketingConsent,\n}) => (\n    <>\n        <Input\n            {...field}\n            checked={field.value}\n            className=\"form-checkbox\"\n            id={field.name}\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={field.name}>\n            <TranslatedString\n                id={\n                    requiresMarketingConsent\n                        ? 'customer.guest_marketing_consent'\n                        : 'customer.guest_subscribe_to_newsletter_text'\n                }\n            />\n        </Label>\n    </>\n);\n\nexport default memo(SubscribeField);\n","import { FieldProps, FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\nimport { object, string } from 'yup';\n\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    continueAsGuestButtonLabelId: string;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isLoading: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<\n    GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>\n> = ({\n    canSubscribe,\n    checkoutButtons,\n    continueAsGuestButtonLabelId,\n    isLoading,\n    onChangeEmail,\n    onShowLogin,\n    privacyPolicyUrl,\n    requiresMarketingConsent,\n}) => {\n    const renderField = useCallback(\n        (fieldProps: FieldProps<boolean>) => (\n            <SubscribeField {...fieldProps} requiresMarketingConsent={requiresMarketingConsent} />\n        ),\n        [requiresMarketingConsent],\n    );\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField onChange={onChangeEmail} />\n\n                        {(canSubscribe || requiresMarketingConsent) && (\n                            <BasicFormField name=\"shouldSubscribe\" render={renderField} />\n                        )}\n\n                        {privacyPolicyUrl && <PrivacyPolicyField url={privacyPolicyUrl} />}\n                    </div>\n\n                    <div className=\"form-actions customerEmail-action\">\n                        <Button\n                            className=\"customerEmail-button\"\n                            id=\"checkout-customer-continue\"\n                            isLoading={isLoading}\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ButtonVariant.Primary}\n                        >\n                            <TranslatedString id={continueAsGuestButtonLabelId} />\n                        </Button>\n                    </div>\n                </div>\n\n                {!isLoading && (\n                    <p>\n                        <TranslatedString id=\"customer.login_text\" />{' '}\n                        <a\n                            data-test=\"customer-continue-button\"\n                            id=\"checkout-customer-login\"\n                            onClick={onShowLogin}\n                        >\n                            <TranslatedString id=\"customer.login_action\" />\n                        </a>\n                    </p>\n                )}\n\n                {checkoutButtons}\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n        mapPropsToValues: ({\n            email = '',\n            defaultShouldSubscribe = false,\n            requiresMarketingConsent,\n        }) => ({\n            email,\n            shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n            privacyPolicy: false,\n        }),\n        handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n            onContinueAsGuest(values);\n        },\n        validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\n            const email = string()\n                .email(language.translate('customer.email_invalid_error'))\n                .max(256)\n                .required(language.translate('customer.email_required_error'));\n\n            const baseSchema = object({ email });\n\n            if (privacyPolicyUrl) {\n                return baseSchema.concat(\n                    getPrivacyPolicyValidationSchema({\n                        isRequired: !!privacyPolicyUrl,\n                        language,\n                    }),\n                );\n            }\n\n            return baseSchema;\n        },\n    })(memo(GuestForm)),\n);\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, BooleanSchema, object, ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean().oneOf(\n            [true],\n            language.translate('privacy_policy.required_error'),\n        );\n    }\n\n    return object(schemaFields);\n}\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg viewBox=\"0 0 576 512\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg viewBox=\"0 0 640 512\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { FunctionComponent, memo, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nconst PasswordField: FunctionComponent = () => {\n    const renderInput = useCallback(\n        (props: FieldProps) => (\n            <Toggle openByDefault={false}>\n                {({ isOpen, toggle }) => (\n                    <div className=\"form-field-password\">\n                        <TextInput\n                            {...props.field}\n                            additionalClassName=\"form-input--withIcon\"\n                            id={props.field.name}\n                            type={isOpen ? 'text' : 'password'}\n                        />\n                        <a\n                            className=\"form-toggle-password form-input-icon\"\n                            href=\"#\"\n                            onClick={toggle}\n                        >\n                            {isOpen ? <IconEye /> : <IconEyeSlash />}\n                        </a>\n                    </div>\n                )}\n            </Toggle>\n        ),\n        [],\n    );\n\n    const labelContent = useMemo(() => <TranslatedString id=\"customer.password_label\" />, []);\n\n    return <FormField input={renderInput} labelContent={labelContent} name=\"password\" />;\n};\n\nexport default memo(PasswordField);\n","import { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport {\n    TranslatedHtml,\n    TranslatedLink,\n    TranslatedString,\n    withLanguage,\n    WithLanguageProps,\n} from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport CustomerViewType from './CustomerViewType';\nimport EmailField from './EmailField';\nimport getEmailValidationSchema from './getEmailValidationSchema';\nimport mapErrorMessage from './mapErrorMessage';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    continueAsGuestButtonLabelId: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSignInEmailEnabled?: boolean;\n    isSendingSignInEmail?: boolean;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    signInEmailError?: Error;\n    viewType?: Omit<CustomerViewType, 'guest'>;\n    passwordlessLogin?: boolean;\n    shouldShowCreateAccountLink?: boolean;\n    onCancel?(): void;\n    onCreateAccount?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n    onSendLoginEmail?(): void;\n    onContinueAsGuest?(): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<\n    LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>\n> = ({\n    canCancel,\n    continueAsGuestButtonLabelId,\n    forgotPasswordUrl,\n    email,\n    isSignInEmailEnabled,\n    isSigningIn,\n    language,\n    onCancel = noop,\n    onChangeEmail,\n    onContinueAsGuest,\n    onCreateAccount = noop,\n    onSendLoginEmail = noop,\n    signInError,\n    shouldShowCreateAccountLink,\n    viewType = CustomerViewType.Login,\n}) => {\n    const changeEmailLink = useCallback(() => {\n        if (!email) {\n            return null;\n        }\n\n        return (\n            <p className=\"optimizedCheckout-contentSecondary\">\n                <TranslatedLink\n                    data={{ email }}\n                    id=\"customer.guest_could_login_change_email\"\n                    onClick={onCancel}\n                    testId=\"change-email\"\n                />\n            </p>\n        );\n    }, [email, onCancel]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-returning\"\n            testId=\"checkout-customer-returning\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.returning_customer_text\" />\n                    </Legend>\n                }\n            >\n                {signInError && (\n                    <Alert testId=\"customer-login-error-message\" type={AlertType.Error}>\n                        {mapErrorMessage(signInError, (key) => language.translate(key))}\n                    </Alert>\n                )}\n\n                {viewType === CustomerViewType.SuggestedLogin && (\n                    <Alert type={AlertType.Info}>\n                        <TranslatedHtml data={{ email }} id=\"customer.guest_could_login\" />\n                    </Alert>\n                )}\n\n                {viewType === CustomerViewType.CancellableEnforcedLogin && (\n                    <Alert type={AlertType.Info}>\n                        <TranslatedHtml data={{ email }} id=\"customer.guest_must_login\" />\n                    </Alert>\n                )}\n\n                {viewType === CustomerViewType.EnforcedLogin && (\n                    <Alert type={AlertType.Error}>\n                        <TranslatedLink\n                            id=\"customer.guest_temporary_disabled\"\n                            onClick={onCreateAccount}\n                        />\n                    </Alert>\n                )}\n\n                {(viewType === CustomerViewType.Login ||\n                    viewType === CustomerViewType.EnforcedLogin) && (\n                    <EmailField onChange={onChangeEmail} />\n                )}\n\n                <PasswordField />\n\n                <p className=\"form-legend-container\">\n                    <span>\n                        { isSignInEmailEnabled &&\n                            <TranslatedLink\n                                id=\"login_email.link\"\n                                onClick={ onSendLoginEmail }\n                                testId=\"customer-signin-link\"\n                            />\n                        }\n                        { !isSignInEmailEnabled &&\n                            <a\n                                data-test=\"forgot-password-link\"\n                                href={ forgotPasswordUrl }\n                                rel=\"noopener noreferrer\"\n                                target=\"_blank\"\n                            >\n                                <TranslatedString id=\"customer.forgot_password_action\" />\n                            </a>\n                        }\n                    </span>\n                    { viewType === CustomerViewType.Login && shouldShowCreateAccountLink &&\n                        <span>\n                            <TranslatedLink\n                                id=\"customer.create_account_to_continue_text\"\n                                onClick={onCreateAccount}\n                            />\n                        </span>\n                    }\n                </p>\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={isSigningIn}\n                        id=\"checkout-customer-continue\"\n                        testId=\"customer-continue-button\"\n                        type=\"submit\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"customer.sign_in_action\" />\n                    </Button>\n\n                    {viewType === CustomerViewType.SuggestedLogin && (\n                        <a\n                            className=\"button optimizedCheckout-buttonSecondary\"\n                            data-test=\"customer-guest-continue\"\n                            href=\"#\"\n                            id=\"checkout-guest-continue\"\n                            onClick={preventDefault(onContinueAsGuest)}\n                        >\n                            <TranslatedString id={continueAsGuestButtonLabelId} />\n                        </a>\n                    )}\n\n                    {canCancel &&\n                        viewType !== CustomerViewType.EnforcedLogin &&\n                        viewType !== CustomerViewType.SuggestedLogin && (\n                            <a\n                                className=\"button optimizedCheckout-buttonSecondary\"\n                                data-test=\"customer-cancel-button\"\n                                href=\"#\"\n                                id=\"checkout-customer-cancel\"\n                                onClick={preventDefault(onCancel)}\n                            >\n                                <TranslatedString\n                                    id={\n                                        viewType === CustomerViewType.CancellableEnforcedLogin\n                                            ? 'login_email.use_another_email'\n                                            : 'common.cancel_action'\n                                    }\n                                />\n                            </a>\n                        )}\n                </div>\n\n                {viewType === CustomerViewType.SuggestedLogin && changeEmailLink()}\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(\n    withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n        mapPropsToValues: ({ email = '' }) => ({\n            email,\n            password: '',\n        }),\n        handleSubmit: (values, { props: { onSignIn } }) => {\n            onSignIn(values);\n        },\n        validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n            getEmailValidationSchema({ language }).concat(\n                object({\n                    password: string().required(\n                        language.translate('customer.password_required_error'),\n                    ),\n                }),\n            ),\n    })(memo(LoginForm)),\n);\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string,\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n        case 'throttled_login':\n            return translate('customer.sign_in_throttled_error');\n\n        case 'reset_password_before_login':\n            return translate('customer.reset_password_before_login_error');\n\n        default:\n            return translate('customer.sign_in_error');\n    }\n}\n","import { CustomerAccountRequestBody } from '@bigcommerce/checkout-sdk';\n\nimport { mapCustomFormFieldsFromFormValues } from '../formFields';\n\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\n\nexport default function mapCreateAccountFromFormValues({\n    acceptsMarketingEmails,\n    customFields,\n    ...values\n}: CreateAccountFormValues): CustomerAccountRequestBody {\n    return {\n        ...values,\n        acceptsMarketingEmails: acceptsMarketingEmails && acceptsMarketingEmails.length > 0,\n        customFields: mapCustomFormFieldsFromFormValues(customFields),\n    };\n}\n","import {\n    CheckoutSelectors,\n    CustomerAccountRequestBody,\n    CustomerCredentials,\n    CustomerInitializeOptions,\n    CustomerRequestOptions,\n    ExecutePaymentMethodCheckoutOptions,\n    FormField,\n    GuestCredentials,\n    SignInEmail,\n    StoreConfig,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { CheckoutContextProps, withCheckout } from '../checkout';\nimport { isErrorWithType } from '../common/error';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CreateAccountForm from './CreateAccountForm';\nimport CustomerViewType from './CustomerViewType';\nimport EmailLoginForm, { EmailLoginFormValues } from './EmailLoginForm';\nimport { CreateAccountFormValues } from './getCreateCustomerValidationSchema';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\nimport mapCreateAccountFromFormValues from './mapCreateAccountFromFormValues';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    isEmbedded?: boolean;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onAccountCreated?(): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    customerAccountFields: FormField[];\n    checkoutButtonIds: string[];\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isCreatingAccount: boolean;\n    isExecutingPaymentMethodCheckout: boolean;\n    isGuestEnabled: boolean;\n    isInitializing: boolean;\n    isSendingSignInEmail: boolean;\n    isSignInEmailEnabled: boolean;\n    isSigningIn: boolean;\n    privacyPolicyUrl?: string;\n    providerWithCustomCheckout?: string;\n    requiresMarketingConsent: boolean;\n    signInEmail?: SignInEmail;\n    signInEmailError?: Error;\n    isAccountCreationEnabled: boolean;\n    createAccountError?: Error;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    executePaymentMethodCheckout(\n        options: ExecutePaymentMethodCheckoutOptions,\n    ): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    sendLoginEmail(params: { email: string }): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n    createAccount(values: CustomerAccountRequestBody): Promise<CheckoutSelectors>;\n}\n\nexport interface CustomerState {\n    isEmailLoginFormOpen: boolean;\n    isReady: boolean;\n    hasRequestedLoginEmail: boolean;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps, CustomerState> {\n    state: CustomerState = {\n        isEmailLoginFormOpen: false,\n        isReady: false,\n        hasRequestedLoginEmail: false,\n    };\n\n    private draftEmail?: string;\n\n    async componentDidMount(): Promise<void> {\n        const {\n            initializeCustomer,\n            email,\n            onReady = noop,\n            onUnhandledError = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        this.draftEmail = email;\n\n        try {\n            await initializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n\n        this.setState({ isReady: true });\n\n        onReady();\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitializeCustomer = noop,\n            providerWithCustomCheckout,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitializeCustomer({ methodId: providerWithCustomCheckout });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n        const { isEmailLoginFormOpen, isReady } = this.state;\n        const shouldRenderGuestForm = viewType === CustomerViewType.Guest;\n        const shouldRenderCreateAccountForm = viewType === CustomerViewType.CreateAccount;\n        const shouldRenderLoginForm = !shouldRenderGuestForm && !shouldRenderCreateAccountForm;\n\n        return (\n            <LoadingOverlay isLoading={!isReady} unmountContentWhenLoading>\n                {isEmailLoginFormOpen && this.renderEmailLoginLinkForm()}\n                {shouldRenderLoginForm && this.renderLoginForm()}\n                {shouldRenderGuestForm && this.renderGuestForm()}\n                {shouldRenderCreateAccountForm && this.renderCreateAccountForm()}\n            </LoadingOverlay>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            isExecutingPaymentMethodCheckout = false,\n            isInitializing = false,\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={canSubscribe}\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={checkEmbeddedSupport}\n                        deinitialize={deinitializeCustomer}\n                        initialize={initializeCustomer}\n                        isInitializing={isInitializing}\n                        methodIds={checkoutButtonIds}\n                        onError={onUnhandledError}\n                    />\n                }\n                continueAsGuestButtonLabelId=\"customer.continue\"\n                defaultShouldSubscribe={defaultShouldSubscribe}\n                email={this.draftEmail || email}\n                isLoading={\n                    isContinuingAsGuest || isInitializing || isExecutingPaymentMethodCheckout\n                }\n                onChangeEmail={this.handleChangeEmail}\n                onContinueAsGuest={this.handleContinueAsGuest}\n                onShowLogin={this.handleShowLogin}\n                privacyPolicyUrl={privacyPolicyUrl}\n                requiresMarketingConsent={requiresMarketingConsent}\n            />\n        );\n    }\n\n    private renderEmailLoginLinkForm(): ReactNode {\n        const { isEmailLoginFormOpen, hasRequestedLoginEmail } = this.state;\n\n        const { isSendingSignInEmail, signInEmailError, signInEmail } = this.props;\n\n        return (\n            <EmailLoginForm\n                email={this.draftEmail}\n                emailHasBeenRequested={hasRequestedLoginEmail}\n                isOpen={isEmailLoginFormOpen}\n                isSendingEmail={isSendingSignInEmail}\n                onRequestClose={this.closeEmailLoginFormForm}\n                onSendLoginEmail={this.handleSendLoginEmail}\n                sentEmail={signInEmail}\n                sentEmailError={signInEmailError}\n            />\n        );\n    }\n\n    private closeEmailLoginFormForm: () => void = () => {\n        this.setState({\n            isEmailLoginFormOpen: false,\n            hasRequestedLoginEmail: false,\n        });\n    };\n\n    private renderCreateAccountForm(): ReactNode {\n        const {\n            customerAccountFields,\n            isCreatingAccount,\n            createAccountError,\n            requiresMarketingConsent,\n        } = this.props;\n\n        return (\n            <CreateAccountForm\n                createAccountError={createAccountError}\n                formFields={customerAccountFields}\n                isCreatingAccount={isCreatingAccount}\n                onCancel={this.handleCancelCreateAccount}\n                onSubmit={this.handleCreateAccount}\n                requiresMarketingConsent={requiresMarketingConsent}\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            isEmbedded,\n            email,\n            forgotPasswordUrl,\n            isSignInEmailEnabled,\n            isGuestEnabled,\n            isSendingSignInEmail,\n            isSigningIn,\n            isAccountCreationEnabled,\n            providerWithCustomCheckout,\n            signInError,\n            viewType,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={isGuestEnabled}\n                continueAsGuestButtonLabelId={\n                    providerWithCustomCheckout\n                        ? 'customer.continue'\n                        : 'customer.continue_as_guest_action'\n                }\n                email={this.draftEmail || email}\n                forgotPasswordUrl={forgotPasswordUrl}\n                isSendingSignInEmail={isSendingSignInEmail}\n                isSignInEmailEnabled={isSignInEmailEnabled && !isEmbedded}\n                isSigningIn={isSigningIn}\n                onCancel={this.handleCancelSignIn}\n                onChangeEmail={this.handleChangeEmail}\n                onContinueAsGuest={this.executePaymentMethodCheckoutOrContinue}\n                onCreateAccount={this.showCreateAccount}\n                onSendLoginEmail={this.handleEmailLoginClicked}\n                onSignIn={this.handleSignIn}\n                shouldShowCreateAccountLink={isAccountCreationEnabled}\n                signInError={signInError}\n                viewType={viewType}\n            />\n        );\n    }\n\n    private handleEmailLoginClicked: () => void = async () => {\n        const { viewType } = this.props;\n\n        try {\n            if (viewType !== CustomerViewType.Login && this.draftEmail) {\n                await this.handleSendLoginEmail({ email: this.draftEmail });\n            }\n        } finally {\n            this.setState({\n                isEmailLoginFormOpen: true,\n            });\n        }\n    };\n\n    private handleSendLoginEmail: (values: EmailLoginFormValues) => Promise<void> = async (\n        values,\n    ) => {\n        const { sendLoginEmail } = this.props;\n\n        try {\n            await sendLoginEmail(values);\n        } finally {\n            this.setState({\n                hasRequestedLoginEmail: true,\n            });\n        }\n    };\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async (\n        formValues,\n    ) => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            onChangeViewType = noop,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n        } = this.props;\n\n        const email = formValues.email.trim();\n\n        try {\n            const { data } = await continueAsGuest({\n                email,\n                acceptsMarketingNewsletter:\n                    canSubscribe && formValues.shouldSubscribe ? true : undefined,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\n            });\n\n            const customer = data.getCustomer();\n\n            if (customer && customer.shouldEncourageSignIn && customer.isGuest) {\n                return onChangeViewType(CustomerViewType.SuggestedLogin);\n            }\n\n            await this.executePaymentMethodCheckoutOrContinue();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            if (\n                isErrorWithType(error) &&\n                (error.type === 'update_subscriptions' ||\n                    error.type === 'payment_method_client_invalid')\n            ) {\n                this.draftEmail = undefined;\n\n                onContinueAsGuest();\n            }\n\n            if (isErrorWithType(error) && error.status === 429) {\n                return onChangeViewType(CustomerViewType.EnforcedLogin);\n            }\n\n            if (isErrorWithType(error) && error.status === 403) {\n                return onChangeViewType(CustomerViewType.CancellableEnforcedLogin);\n            }\n\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async (\n        credentials,\n    ) => {\n        const { signIn, onSignIn = noop, onSignInError = noop } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCreateAccount: (values: CreateAccountFormValues) => void = async (values) => {\n        const { createAccount = noop, onAccountCreated = noop } = this.props;\n\n        await createAccount(mapCreateAccountFromFormValues(values));\n\n        onAccountCreated();\n    };\n\n    private showCreateAccount: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.CreateAccount);\n    };\n\n    private handleCancelCreateAccount: () => void = () => {\n        const { clearError, onChangeViewType = noop, createAccountError } = this.props;\n\n        if (createAccountError) {\n            clearError(createAccountError);\n        }\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const { clearError, onChangeViewType = noop, signInError } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = (email) => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n\n    private executePaymentMethodCheckoutOrContinue: () => void = async () => {\n        const {\n            executePaymentMethodCheckout,\n            onContinueAsGuest = noop,\n            providerWithCustomCheckout,\n        } = this.props;\n\n        if (providerWithCustomCheckout) {\n            await executePaymentMethodCheckout({\n                methodId: providerWithCustomCheckout,\n                continueWithCheckoutCallback: onContinueAsGuest,\n            });\n        } else {\n            onContinueAsGuest();\n        }\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutCustomerProps | null {\n    const {\n        data: {\n            getBillingAddress,\n            getCustomerAccountFields,\n            getCheckout,\n            getCustomer,\n            getSignInEmail,\n            getConfig,\n        },\n        errors: { getSignInError, getSignInEmailError, getCreateCustomerAccountError },\n        statuses: {\n            isContinuingAsGuest,\n            isExecutingPaymentMethodCheckout,\n            isInitializingCustomer,\n            isSigningIn,\n            isSendingSignInEmail,\n            isCreatingCustomerAccount,\n        },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const signInEmail = getSignInEmail();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            isSignInEmailEnabled,\n            isAccountCreationEnabled,\n        },\n    } = config as StoreConfig & { checkoutSettings: { isAccountCreationEnabled: boolean } };\n\n    return {\n        customerAccountFields: getCustomerAccountFields(),\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        createAccount: checkoutService.createCustomerAccount,\n        continueAsGuest: checkoutService.continueAsGuest,\n        sendLoginEmail: checkoutService.sendSignInEmail,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        executePaymentMethodCheckout: checkoutService.executePaymentMethodCheckout,\n        email: billingAddress?.email || customer?.email,\n        firstName: customer?.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isCreatingAccount: isCreatingCustomerAccount(),\n        createAccountError: getCreateCustomerAccountError(),\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isExecutingPaymentMethodCheckout: isExecutingPaymentMethodCheckout(),\n        isInitializing: isInitializingCustomer(),\n        isSignInEmailEnabled,\n        isAccountCreationEnabled,\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        isSendingSignInEmail: isSendingSignInEmail(),\n        signInEmail,\n        signInEmailError: getSignInEmailError(),\n        privacyPolicyUrl,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        requiresMarketingConsent,\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n","import { forIn, isDate, padStart } from 'lodash';\n\nexport default function mapCustomFormFieldsFromFormValues(customFieldsObject: {\n    [id: string]: any;\n}): Array<{ fieldId: string; fieldValue: string }> {\n    const customFields: Array<{ fieldId: string; fieldValue: string }> = [];\n\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart(value.getDate().toString(), 2, '0');\n\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return customFields;\n}\n","import React, { FunctionComponent, MouseEventHandler } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { parseAnchor } from '../common/utility';\n\nimport { TranslatedStringProps } from './TranslatedString';\nimport withLanguage, { WithLanguageProps } from './withLanguage';\n\nexport type TranslatedLinkProps = TranslatedStringProps & {\n    testId?: string;\n    onClick: MouseEventHandler;\n};\n\nconst TranslatedLink: FunctionComponent<TranslatedLinkProps & WithLanguageProps> = ({\n    data,\n    id,\n    language,\n    onClick,\n    testId,\n}) => {\n    const translatedString = language.translate(id, data);\n    const parsedString = parseAnchor(translatedString);\n\n    return parsedString.length ? (\n        <>\n            {parsedString[0]}\n            <a data-test={testId} href=\"#\" onClick={preventDefault(onClick)}>\n                {parsedString[1]}\n            </a>\n            {parsedString[2]}\n        </>\n    ) : (\n        <>{translatedString}</>\n    );\n};\n\nexport default withLanguage(TranslatedLink);\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    disabled?: boolean;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    disabled = false,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(\n        ({ field }: FieldProps) => (\n            <>\n                <CheckboxInput\n                    {...field}\n                    checked={!!field.value}\n                    disabled={disabled}\n                    id={id || field.name}\n                    label={labelContent}\n                />\n\n                <FormFieldError\n                    errorId={`${id ?? name}-field-error-message`}\n                    name={name}\n                    testId={`${kebabCase(name)}-field-error-message`}\n                />\n            </>\n        ),\n        [disabled, id, labelContent, name],\n    );\n\n    return (\n        <BasicFormField\n            additionalClassName={additionalClassName}\n            name={name}\n            onChange={onChange}\n            render={renderField}\n        />\n    );\n};\n\nexport default memo(CheckboxFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef(\n    (\n        { additionalClassName, label, id, ...rest }: CheckboxInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                className={classNames(\n                    'form-checkbox',\n                    'optimizedCheckout-form-checkbox',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"checkbox\"\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default CheckboxInput;\n","import { createInjectHoc, InjectHoc } from '../common/hoc';\n\nimport LocaleContext from './LocaleContext';\n\nexport interface WithDateProps {\n    date: {\n        inputFormat: string;\n    };\n}\n\nconst withDate: InjectHoc<WithDateProps> = createInjectHoc(LocaleContext, {\n    displayNamePrefix: 'withDate',\n    pickProps: (value, key) => key === 'date' && !!value,\n});\n\nexport default withDate;\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef(\n    (\n        { additionalClassName, label, value, checked, id, ...rest }: RadioInputProps,\n        ref: Ref<HTMLInputElement>,\n    ) => (\n        <>\n            <Input\n                {...rest}\n                checked={checked}\n                className={classNames(\n                    'form-radio',\n                    'optimizedCheckout-form-radio',\n                    additionalClassName,\n                )}\n                id={id}\n                ref={ref}\n                type=\"radio\"\n                value={value}\n            />\n            <Label htmlFor={id}>{label}</Label>\n        </>\n    ),\n);\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { withDate, WithDateProps } from '../../locale';\n\nimport CheckboxInput from './CheckboxInput';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport { InputProps } from './Input';\nimport RadioInput from './RadioInput';\nimport TextArea from './TextArea';\nimport TextInput from './TextInput';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps & WithDateProps> = ({\n    additionalClassName,\n    date,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const { inputFormat } = date;\n    const handleDateChange = useCallback(\n        (dateValue, event) =>\n            onChange({\n                ...event,\n                target: {\n                    name,\n                    value: dateValue,\n                },\n            }),\n        [onChange, name],\n    );\n\n    switch (fieldType) {\n        case DynamicFormFieldType.dropdown:\n            return (\n                <select\n                    {...(rest as any)}\n                    className=\"form-select optimizedCheckout-form-select\"\n                    data-test={`${id}-select`}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    value={value === null ? '' : value}\n                >\n                    {placeholder && <option value=\"\">{placeholder}</option>}\n                    {options &&\n                        options.map(({ label, value: optionValue }) => (\n                            <option key={optionValue} value={optionValue}>\n                                {label}\n                            </option>\n                        ))}\n                </select>\n            );\n\n        case DynamicFormFieldType.radio:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <RadioInput\n                            {...rest}\n                            checked={optionValue === value}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-radio`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.checkbox:\n            if (!options || !options.length) {\n                return null;\n            }\n\n            return (\n                <>\n                    {options.map(({ label, value: optionValue }) => (\n                        <CheckboxInput\n                            {...rest}\n                            checked={Array.isArray(value) ? value.includes(optionValue) : false}\n                            id={`${id}-${optionValue}`}\n                            key={optionValue}\n                            label={label}\n                            name={name}\n                            onChange={onChange}\n                            testId={`${id}-${optionValue}-checkbox`}\n                            value={optionValue}\n                        />\n                    ))}\n                </>\n            );\n\n        case DynamicFormFieldType.date:\n            return (\n                <ReactDatePicker\n                    {...(rest as any)}\n                    autoComplete=\"off\"\n                    // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                    // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                    // onChangeRaw={ rest.onChange }\n                    calendarClassName=\"optimizedCheckout-contentPrimary\"\n                    className=\"form-input optimizedCheckout-form-input\"\n                    dateFormat={inputFormat}\n                    maxDate={rest.max ? new Date(`${rest.max}T00:00:00Z`) : undefined}\n                    minDate={rest.min ? new Date(`${rest.min}T00:00:00Z`) : undefined}\n                    name={name}\n                    onChange={handleDateChange}\n                    placeholderText={inputFormat.toUpperCase()}\n                    popperClassName=\"optimizedCheckout-contentPrimary\"\n                    selected={isDate(value) ? value : undefined}\n                />\n            );\n\n        case DynamicFormFieldType.multiline:\n            return (\n                <TextArea\n                    {...(rest as any)}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    testId={`${id}-text`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n\n        default:\n            return (\n                <TextInput\n                    {...rest}\n                    id={id}\n                    name={name}\n                    onChange={onChange}\n                    placeholder={placeholder}\n                    testId={`${id}-${\n                        fieldType === DynamicFormFieldType.password ? 'password' : 'text'\n                    }`}\n                    type={fieldType}\n                    value={value}\n                />\n            );\n    }\n};\n\nexport default memo(withDate(DynamicInput));\n","import React, { FunctionComponent, memo, MouseEvent, useCallback } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport './MultiCheckboxControl.scss';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedAll();\n        },\n        [onSelectedAll],\n    );\n\n    const handleSelectNoneClick = useCallback(\n        (event: MouseEvent) => {\n            event.preventDefault();\n            onSelectedNone();\n        },\n        [onSelectedNone],\n    );\n\n    return (\n        <ul className=\"multiCheckbox--controls\">\n            <li className=\"multiCheckbox--control\">\n                <TranslatedString id=\"address.select\" />\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId}Checkbox-all-button`}\n                    href=\"#\"\n                    onClick={handleSelectAllClick}\n                >\n                    <TranslatedString id=\"address.select_all\" />\n                </a>\n            </li>\n\n            <li className=\"multiCheckbox--control\">\n                <a\n                    data-test={`${testId}Checkbox-none-button`}\n                    href=\"#\"\n                    onClick={handleSelectNoneClick}\n                >\n                    <TranslatedString id=\"address.select_none\" />\n                </a>\n            </li>\n        </ul>\n    );\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { FieldArray, FieldArrayRenderProps, getIn } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { ChangeEvent, FunctionComponent, memo, ReactNode, useCallback } from 'react';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormFieldContainer from './FormFieldContainer';\nimport FormFieldError from './FormFieldError';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>;\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(\n            options.map(({ value }) => value),\n            checkedValues,\n        ).forEach((val) => push(val));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, options, push, values]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => remove(0));\n\n        onChange(getIn(values, name));\n    }, [name, onChange, remove, values]);\n\n    const handleInputChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) => {\n            const checkedValues: string[] = getIn(values, name) || [];\n            const { value, checked } = event.target;\n\n            if (checked) {\n                push(value);\n            } else {\n                remove(checkedValues.indexOf(value));\n            }\n\n            onChange(getIn(values, name));\n        },\n        [name, onChange, push, remove, values],\n    );\n\n    return (\n        <FormFieldContainer hasError={getIn(errors, name) && getIn(errors, name).length}>\n            {label}\n\n            {options.length > 1 && (\n                <MultiCheckboxControl\n                    onSelectedAll={handleSelectAll}\n                    onSelectedNone={handleSelectNone}\n                    testId={id}\n                />\n            )}\n\n            <DynamicInput\n                fieldType={DynamicFormFieldType.checkbox}\n                id={id}\n                name={name}\n                onChange={handleInputChange}\n                options={options}\n                value={getIn(values, name) || []}\n            />\n\n            <FormFieldError\n                errorId={`${id ?? name}-field-error-message`}\n                name={name}\n                testId={`${kebabCase(name)}-field-error-message`}\n            />\n        </FormFieldContainer>\n    );\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback(\n        (renderProps: FieldArrayRenderProps) => (\n            <MultiCheckboxFormField\n                id={id}\n                label={label}\n                name={name}\n                onChange={onChange}\n                options={options}\n                {...pick(renderProps, ['form', 'pop', 'push', 'remove'])}\n            />\n        ),\n        [id, label, name, onChange, options],\n    );\n\n    return <FieldArray name={name} render={renderField} />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport { includes } from 'lodash';\nimport React, { FunctionComponent, memo, ReactNode, useCallback, useMemo } from 'react';\n\nimport { TranslatedString } from '../../locale';\n\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport FormField from './FormField';\nimport Label from './Label';\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    inputId?: string;\n    extraClass?: string;\n    autocomplete?: string;\n    parentFieldName?: string;\n    placeholder?: string;\n    label?: ReactNode;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps> = ({\n    field: {\n        fieldType,\n        type,\n        secret,\n        name,\n        label: fieldLabel,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    parentFieldName,\n    onChange,\n    placeholder,\n    inputId,\n    autocomplete,\n    label,\n    extraClass,\n}) => {\n    const fieldInputId = inputId || name;\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelComponent = useMemo(\n        () => (\n            <Label htmlFor={fieldInputId} id={`${fieldInputId}-label`}>\n                {label || fieldLabel}\n                {!required && (\n                    <>\n                        {' '}\n                        <small className=\"optimizedCheckout-contentSecondary\">\n                            <TranslatedString id=\"common.optional_text\" />\n                        </small>\n                    </>\n                )}\n            </Label>\n        ),\n        [fieldInputId, fieldLabel, required, label],\n    );\n\n    const dynamicFormFieldType = useMemo((): DynamicFormFieldType => {\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            if (includes(name, 'phone') || includes(name, 'tel')) {\n                return DynamicFormFieldType.telephone;\n            }\n\n            return secret ? DynamicFormFieldType.password : DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }, [fieldType, type, secret]);\n\n    const renderInput = useCallback(\n        ({ field }: FieldProps<string>) => (\n            <DynamicInput\n                {...field}\n                aria-labelledby={`${fieldInputId}-label ${fieldInputId}-field-error-message`}\n                autoComplete={autocomplete}\n                fieldType={dynamicFormFieldType}\n                id={fieldInputId}\n                max={max}\n                maxLength={maxLength || undefined}\n                min={min}\n                options={options && options.items}\n                placeholder={placeholder || (options && options.helperLabel)}\n                rows={options && (options as any).rows}\n            />\n        ),\n        [\n            fieldInputId,\n            max,\n            maxLength,\n            min,\n            options,\n            placeholder,\n            dynamicFormFieldType,\n            autocomplete,\n        ],\n    );\n\n    return (\n        <div className={`dynamic-form-field ${extraClass}`}>\n            {fieldType === DynamicFormFieldType.checkbox ? (\n                <CheckboxGroupFormField\n                    id={fieldInputId}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                    options={(options && options.items) || []}\n                />\n            ) : (\n                <FormField\n                    id={fieldInputId}\n                    input={renderInput}\n                    label={labelComponent}\n                    name={fieldName}\n                    onChange={onChange}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef(\n    (\n        { additionalClassName, testId, className, ...rest }: TextAreaProps,\n        ref: Ref<HTMLTextAreaElement>,\n    ) => (\n        <textarea\n            {...rest}\n            className={\n                className ||\n                classNames('form-input', 'optimizedCheckout-form-input', additionalClassName)\n            }\n            data-test={testId}\n            ref={ref}\n        />\n    ),\n);\n\nexport default TextArea;\n"],"names":["parseAnchor","text","div","document","createElement","innerHTML","anchor","querySelector","anchorSiblings","split","outerHTML","EMAIL_REGEXP","getEmailValidationSchema","language","email","max","matches","translate","required","getTranslateCreateCustomerError","type","label","min","formFields","passwordRequirements","description","numeric","alpha","minLength","firstName","lastName","password","concat","getCustomFormFieldsValidationSchema","withLanguage","withFormik","handleSubmit","values","onSubmit","noop","mapPropsToValues","customFields","acceptsMarketingEmails","validationSchema","find","requirements","Error","getCreateCustomerValidationSchema","getPasswordRequirements","createAccountError","isCreatingAccount","onCancel","createAccountErrorMessage","useMemo","isRequestError","status","splitMessage","message","length","TranslatedString","data","trim","id","Form","className","testId","Fieldset","Alert","map","field","DynamicFormField","autocomplete","name","extraClass","key","parentFieldName","custom","undefined","Button","disabled","variant","href","onClick","preventDefault","memo","onChange","renderInput","useCallback","props","TextInput","autoComplete","labelContent","FormField","input","onSendLoginEmail","isOpen","isSendingEmail","emailHasBeenRequested","onRequestClose","sentEmailError","sentEmail","submitForm","formEmail","modalHeaderStringId","okButton","footer","LoadingSpinner","isLoading","sent_email","TranslatedLink","error","form","expiry","TranslatedHtml","minutes","Math","round","Modal","additionalBodyClassName","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","additionalClassName","requiresMarketingConsent","Input","checked","value","Label","htmlFor","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","onContinueAsGuest","privacyPolicyUrl","baseSchema","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","continueAsGuestButtonLabelId","onChangeEmail","onShowLogin","renderField","fieldProps","legend","Legend","hidden","BasicFormField","render","PrivacyPolicyField","withIconContainer","viewBox","xmlns","d","Toggle","openByDefault","toggle","onSignIn","canCancel","forgotPasswordUrl","isSignInEmailEnabled","isSigningIn","onCreateAccount","signInError","shouldShowCreateAccountLink","viewType","CustomerViewType","changeEmailLink","body","mapErrorMessage","rel","target","mapCreateAccountFromFormValues","mapCustomFormFieldsFromFormValues","state","isEmailLoginFormOpen","isReady","hasRequestedLoginEmail","closeEmailLoginFormForm","setState","handleEmailLoginClicked","this","draftEmail","handleSendLoginEmail","sendLoginEmail","handleContinueAsGuest","formValues","continueAsGuest","onChangeViewType","onContinueAsGuestError","acceptsMarketingNewsletter","acceptsAbandonedCartEmails","customer","getCustomer","shouldEncourageSignIn","isGuest","executePaymentMethodCheckoutOrContinue","isErrorWithType","handleSignIn","credentials","signIn","onSignInError","handleCreateAccount","createAccount","onAccountCreated","showCreateAccount","handleCancelCreateAccount","clearError","handleCancelSignIn","handleChangeEmail","handleShowLogin","executePaymentMethodCheckout","providerWithCustomCheckout","methodId","continueWithCheckoutCallback","componentDidMount","initializeCustomer","onReady","onUnhandledError","componentWillUnmount","deinitializeCustomer","shouldRenderGuestForm","shouldRenderCreateAccountForm","shouldRenderLoginForm","LoadingOverlay","unmountContentWhenLoading","renderEmailLoginLinkForm","renderLoginForm","renderGuestForm","renderCreateAccountForm","checkEmbeddedSupport","checkoutButtonIds","isContinuingAsGuest","isExecutingPaymentMethodCheckout","isInitializing","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isSendingSignInEmail","signInEmailError","signInEmail","customerAccountFields","isEmbedded","isGuestEnabled","isAccountCreationEnabled","Component","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCustomerAccountFields","getCheckout","getSignInEmail","getConfig","getSignInError","getSignInEmailError","getCreateCustomerAccountError","isInitializingCustomer","isCreatingCustomerAccount","billingAddress","checkout","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","createCustomerAccount","sendSignInEmail","defaultNewsletterSignup","links","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout","Customer","customFieldsObject","forIn","fieldValue","isDate","padMonth","padStart","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","translatedString","parsedString","errorId","kebabCase","forwardRef","ref","rest","createInjectHoc","LocaleContext","displayNamePrefix","pickProps","date","fieldType","options","placeholder","inputFormat","handleDateChange","dateValue","event","DynamicFormFieldType","optionValue","CheckboxInput","Array","isArray","includes","calendarClassName","dateFormat","maxDate","Date","minDate","placeholderText","toUpperCase","popperClassName","selected","TextArea","onSelectedAll","onSelectedNone","handleSelectAllClick","handleSelectNoneClick","MultiCheckboxFormField","errors","remove","handleSelectAll","checkedValues","getIn","difference","forEach","val","handleSelectNone","handleInputChange","indexOf","FormFieldContainer","hasError","FormFieldError","renderProps","pick","FieldArray","secret","fieldLabel","maxLength","inputId","fieldInputId","fieldName","labelComponent","dynamicFormFieldType","items","helperLabel","rows"],"sourceRoot":""}