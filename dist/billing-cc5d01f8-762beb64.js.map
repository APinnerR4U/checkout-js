{"version":3,"sources":["webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["BillingForm_BillingForm","BillingForm","_this","_classCallCheck","this","state","isResettingAddress","addressFormRef","Object","react","onSelectAddress","_ref","regeneratorRuntime","mark","_callee","address","_this$props","updateAddress","onUnhandledError","wrap","_context","prev","next","props","setState","t0","finish","stop","_x","apply","arguments","_this2","_this$props2","googleMapsApiKey","billingAddress","countriesWithAutocomplete","addresses","customer","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","hasAddresses","length","hasValidCustomerAddress","isValidCustomerAddress","countryCode","react_default","a","createElement","Form","autoComplete","Fieldset","ref","id","LoadingOverlay","isLoading","AddressSelect","selectedAddress","undefined","onUseNewAddress","AddressForm","formFields","OrderComments","className","Button","variant","Primary","disabled","type","TranslatedString","billing_BillingForm","withLanguage","formik_esm","handleSubmit","_ref2","onSubmit","mapPropsToValues","_ref3","customerMessage","_objectSpread","mapAddressToFormValues","orderComment","isInitialValid","_ref4","language","getAddressValidationSchema","isValidSync","validationSchema","_ref5","lib","enableReinitialize","Billing_Billing","Billing","Billing_classCallCheck","Billing_asyncToGenerator","addressValues","updateCheckout","navigateNextStep","promises","_objectWithoutProperties","mapAddressFromFormValues","isEqualAddress","push","Promise","all","initialize","onReady","lodash","_context2","_this$props3","isInitializing","Legend","testId","unmountContentWhenLoading","assign","__webpack_exports__","withCheckout","checkoutService","checkoutState","_checkoutState$data","data","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","_checkoutState$status","statuses","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkout","cart","_config$checkoutSetti","checkoutSettings","enableOrderComments","features","emptyData","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress"],"mappings":"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","file":"billing-cc5d01f8-762beb64.js","sourcesContent":["import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressValidationSchema, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    customer: Customer;\n    customerMessage: string;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    onSubmit(values: BillingFormValues): void;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends Component<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n        } = this.props;\n\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset ref={ this.addressFormRef } id=\"checkoutBillingAddress\">\n                    { hasAddresses &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                    onUseNewAddress={ () => this.onSelectAddress({}) }\n                                    onSelectAddress={ this.onSelectAddress }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset>\n                    }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                setFieldValue={ setFieldValue }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                countryCode={ values.countryCode }\n                                formFields={ getFields(values.countryCode) }\n                            />\n                        </LoadingOverlay>\n                    }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments />\n                }\n\n                <div className=\"form-actions\">\n                    <Button\n                        variant={ ButtonVariant.Primary }\n                        isLoading={ isUpdating || isResettingAddress }\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        type=\"submit\"\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private onSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n    }: BillingFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    unmountContentWhenLoading\n                    isLoading={ isInitializing }\n                >\n                    <BillingForm\n                        { ...props }\n                        updateAddress={ updateAddress }\n                        onSubmit={ this.handleSubmit }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}