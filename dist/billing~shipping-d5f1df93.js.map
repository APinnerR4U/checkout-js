{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/address/getFormFieldInputId.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/address/DynamicInput.tsx","webpack://checkout/./src/app/address/MultiCheckboxControl.tsx","webpack://checkout/./src/app/address/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/address/DynamicFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts"],"names":["CheckboxInput","Object","react__WEBPACK_IMPORTED_MODULE_1__","_a","ref","additionalClassName","label","id","rest","__rest","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","_Input__WEBPACK_IMPORTED_MODULE_2__","__assign","className","classnames__WEBPACK_IMPORTED_MODULE_0___default","type","_Label__WEBPACK_IMPORTED_MODULE_3__","htmlFor","__webpack_exports__","isEqualAddress","address1","address2","lodash__WEBPACK_IMPORTED_MODULE_0__","normalizeAddress","address","customFields","filter","fieldValue","__webpack_require__","d","getShippableItemsCount","_getLineItemsCount__WEBPACK_IMPORTED_MODULE_0__","cart","lineItems","physicalItems","item","addedByPromotion","DropdownTrigger","_super","_this","apply","this","arguments","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","__extends","prototype","componentWillUnmount","render","props","children","placement","dropdown","react__WEBPACK_IMPORTED_MODULE_0___default","react_popper__WEBPACK_IMPORTED_MODULE_1__","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","react__WEBPACK_IMPORTED_MODULE_0__","TextArea","testId","data-test","mapAddressFromFormValues","formValues","customFieldsObject","value","key","push","fieldId","toISOString","slice","isValidCustomerAddress","_isEqualAddress__WEBPACK_IMPORTED_MODULE_1__","_isValidAddress__WEBPACK_IMPORTED_MODULE_2__","addresses","formFields","customerAddress","AddressSelect","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","_isEqualAddress__WEBPACK_IMPORTED_MODULE_4__","handleUseNewAddress","onUseNewAddress","role","_ui_dropdown__WEBPACK_IMPORTED_MODULE_3__","AddressSelectMenu","AddressSelectButton","href","_common_dom__WEBPACK_IMPORTED_MODULE_1__","_locale__WEBPACK_IMPORTED_MODULE_2__","map","_StaticAddress__WEBPACK_IMPORTED_MODULE_5__","renderLabel","name","_ui_form__WEBPACK_IMPORTED_MODULE_2__","hidden","_locale__WEBPACK_IMPORTED_MODULE_1__","renderInput","field","_ui_form__WEBPACK_IMPORTED_MODULE_3__","maxLength","autoComplete","legend","_ui_form__WEBPACK_IMPORTED_MODULE_4__","_ui_form__WEBPACK_IMPORTED_MODULE_5__","_ui_form__WEBPACK_IMPORTED_MODULE_6__","input","AddressSelector","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","indexOf","AddressSelectorUK","googleAutocomplete_AddressSelector","AddressSelectorFactory","create","autocompleteData","addressSelector","AddressSelectorUk","ADDRESS_FIELD_IDS","postalCode","stateOrProvince","stateOrProvinceCode","getFormFieldLegacyName","getFormFieldInputId","popover_Popover","react_default","getItemClassName","highlightedIndex","index","classes","join","instance","popover_PopoverList","react","_b","_c","getItemProps","_d","menuProps","items","length","PopoverList_assign","content","autocomplete_Autocomplete","Autocomplete","stateReducer","changes","onChange","downshift_esm","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","Autocomplete_assign","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","lodash","undefined","Autocomplete_extends","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","initialInputValue","defaultHighlightedIndex","onStateChange","itemToString","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","i","offset","notHighlightedLength","substr","GoogleAutocompleteScriptLoader","_scriptLoader","script_loader_lib","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","GoogleAutocompleteService","_apiKey","googleAutocomplete_GoogleAutocompleteScriptLoader","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","_placesPromise","PlacesService","address_googleAutocomplete_GoogleAutocomplete","GoogleAutocomplete","call","nextElement","googleAutocompleteService","service","getDetails","placeId","fields","result","focus","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","googleAutocomplete_GoogleAutocompleteService","GoogleAutocomplete_extends","GoogleAutocomplete_assign","getPlacePredictions","componentRestrictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","googleAutocomplete_GoogleAutocompleteFormField","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","TranslatedString","country","FormField","form_RadioInput","checked","Input","RadioInput_assign","classnames_default","Label","address_DynamicInput","fieldType","options","placeholder","DynamicInput_rest","handleDateChange","date","DynamicInput_assign","target","DynamicFormFieldType","optionValue","radio","checkbox","Array","isArray","includes","es","placeholderText","minDate","min","Date","maxDate","max","popperClassName","calendarClassName","selected","multiline","TextInput","password","address_MultiCheckboxControl","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","MultiCheckboxFormField","form","values","errors","pop","remove","handleSelectAll","checkedValues","formik_esm","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","address_CheckboxGroupFormField","renderField","renderProps","CheckboxGroupFormField_assign","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","address_DynamicFormField","fieldLabel","custom","required","addressFieldName","fieldInputId","translatedLabelString","DynamicFormField_assign","helperLabel","rows","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","AddressForm_AddressForm","AddressForm","containerRef","handleDynamicFormFieldChange","lib","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","autocompleteValue","countries","setFieldValue","accessor","googleAutocomplete_AddressSelectorFactory","c","code","street2","stateName","states","subdivisions","mapToAddress","dateFormFieldNames","AddressForm_extends","componentDidMount","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","translatedPlaceholderId","translate","getDynamicFormFieldType","secret","number","text","telephone","withLanguage"],"mappings":"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","file":"billing~shipping-d5f1df93.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            ref={ ref }\n            type=\"checkbox\"\n            id={ id }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = ['id', 'stateOrProvinceCode', 'type', 'email'];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    placement={ placement }\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, InputHTMLAttributes, Ref } from 'react';\n\nexport interface TextAreaProps extends InputHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport { forIn, isDate } from 'lodash';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields: customFieldsObject, ...address } = formValues;\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n\n    forIn(customFieldsObject, (value, key) =>\n        customFields.push({\n            fieldId: key,\n            fieldValue: isDate(value) ? value.toISOString().slice(0, 10) : value,\n        })\n    );\n\n    return {\n        ...address,\n        customFields,\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a href=\"#\" onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }>\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            maxLength={ 2000 }\n            autoComplete={ 'off' }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset testId=\"checkout-shipping-comments\" legend={ legend }>\n        <FormField\n            name=\"orderComment\"\n            label={ renderLabel }\n            input={ renderInput }\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import { AddressKeyMap } from './DynamicFormField';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getFormFieldInputId(name: string): string {\n    return `${getFormFieldLegacyName(name)}Input`;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            data-test={ testId }\n            className=\"popoverList\" { ...menuProps }\n        >{ items\n            .map((item, index) => (\n                <li\n                    data-test={ testId && `${testId}-item` }\n                    className={ getItemClassName(highlightedIndex, index) }\n                    { ...getItemProps({\n                        key: item.id,\n                        index,\n                        item,\n                    }) }\n                    key={ index }\n                >\n                    { item.content }\n                </li>\n            )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                initialInputValue={ initialValue }\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n                onChange={ onSelect }\n                itemToString={ this.itemToString }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    testId={ listTestId }\n                                    menuProps={ getMenuProps() }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    getItemProps={ getItemProps }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport {\n    GoogleAutocompleteWindow,\n    GoogleMapsSdk,\n} from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n        const { items } = this.state;\n\n        return (\n            <Autocomplete\n                listTestId=\"address-autocomplete-suggestions\"\n                items={ items }\n                initialHighlightedIndex={ 0 }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete: this.state.autoComplete,\n                } }\n                initialValue={ initialValue }\n                onSelect={ this.onSelect }\n                onChange={ this.onChange }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: this.props.fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: this.props.types || ['geocode'],\n                componentRestrictions: this.props.componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getFormFieldInputId } from '../getFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getFormFieldInputId(name),\n    }), [name]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            onSelect={ onSelect }\n            onChange={ onChange }\n            initialValue={ field.value }\n            nextElement={ nextElement }\n            onToggleOpen={ onToggleOpen }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            inputProps={ inputProps }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                name={ fieldName }\n                labelContent={ labelContent }\n                input={ renderInput }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n            id={ id }\n            checked={ checked }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { CheckboxInput, InputProps, RadioInput, TextArea, TextInput } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    additionalClassName,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const handleDateChange = useCallback((date, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: date,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                name={ name }\n                onChange={ onChange }\n                id={ id }\n                data-test={ `${id}-select` }\n                className=\"form-select optimizedCheckout-form-select\"\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>{ options.map(({ label, value: optionValue }) =>\n            <RadioInput\n                { ...rest }\n                name={ name }\n                onChange={ onChange }\n                id={ `${id}-${optionValue}` }\n                testId={ `${id}-${optionValue}-radio` }\n                key={ optionValue }\n                label={ label }\n                value={ optionValue }\n                checked={ optionValue === value }\n            />) }</>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>{ options.map(({ label, value: optionValue }) =>\n            <CheckboxInput\n                { ...rest }\n                name={ name }\n                onChange={ onChange }\n                id={ `${id}-${optionValue}` }\n                testId={ `${id}-${optionValue}-checkbox` }\n                key={ optionValue }\n                label={ label }\n                value={ optionValue }\n                checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n            />) }</>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                name={ name }\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                onChange={ handleDateChange }\n                autoComplete=\"off\"\n                placeholderText=\"MM/DD/YYYY\"\n                minDate={ rest.min ? new Date(rest.min) : undefined }\n                maxDate={ rest.max ? new Date(rest.max) : undefined }\n                className=\"form-input optimizedCheckout-form-input\"\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                name={ name }\n                onChange={ onChange }\n                id={ id }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                name={ name }\n                onChange={ onChange }\n                id={ id }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(DynamicInput);\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport { FormFieldContainer, FormFieldError } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    pop,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => pop());\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        pop,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        <MultiCheckboxControl\n            testId={ id }\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n        />\n\n        <DynamicInput\n            name={ name }\n            value={ getIn(values, name) || [] }\n            onChange={ handleInputChange }\n            fieldType={ DynamicFormFieldType.checkbox }\n            options={ options }\n            id={ id }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, Label } from '../ui/form';\n\nimport { getFormFieldInputId, getFormFieldLegacyName } from './getFormFieldInputId';\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface AddressKeyMap<T = string> {\n    [fieldName: string]: T;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    parentFieldName?: string;\n    placeholder?: string;\n    fieldType?: DynamicFormFieldType;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        name,\n        label: fieldLabel,\n        custom,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    fieldType,\n    parentFieldName,\n    onChange,\n    placeholder,\n}) => {\n    const addressFieldName = name;\n    const fieldInputId = getFormFieldInputId(addressFieldName);\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const translatedLabelString = LABEL[name];\n\n    const label = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { custom ?\n                fieldLabel :\n                translatedLabelString && <TranslatedString id={ translatedLabelString } /> }\n            { !required &&\n                <> { '' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        custom,\n        fieldInputId,\n        fieldLabel,\n        required,\n        translatedLabelString,\n    ]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            maxLength={ maxLength || undefined }\n            max={ max }\n            min={ min }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            fieldType={ fieldType }\n            rows={ options && (options as any).rows }\n            options={ options && options.items }\n            autoComplete={ AUTOCOMPLETE[addressFieldName] }\n            id={ fieldInputId }\n        />\n    ), [\n        addressFieldName,\n        fieldInputId,\n        fieldType,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--${getFormFieldLegacyName(addressFieldName)}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    onChange={ onChange }\n                    name={ fieldName }\n                    id={ fieldInputId }\n                    label={ label }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    name={ fieldName }\n                    onChange={ onChange }\n                    label={ label }\n                    input={ renderInput }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\n\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport DynamicFormField, { AddressKeyMap } from './DynamicFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n        } = this.props;\n\n        return (\n            <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                { formFields.map(field => {\n                    const addressFieldName = field.name;\n                    const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                    if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                        return (\n                            <GoogleAutocompleteFormField\n                                key={ field.id }\n                                parentFieldName={ fieldName }\n                                countryCode={ countryCode }\n                                supportedCountries={ countriesWithAutocomplete }\n                                field={ field }\n                                onSelect={ this.handleAutocompleteSelect }\n                                onToggleOpen={ onAutocompleteToggle }\n                                onChange={ this.handleAutocompleteChange }\n                                apiKey={ googleMapsApiKey }\n                                nextElement={ this.nextElement || undefined }\n                            />\n                        );\n                    }\n\n                    return (\n                        <DynamicFormField\n                            onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                            // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                            key={ `${field.id}-${field.name}` }\n                            parentFieldName={ field.custom ?\n                                (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                fieldName }\n                            field={ field }\n                            placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                            fieldType={ this.getDynamicFormFieldType(field) }\n                        />\n                    );\n                }) }\n            </div>\n        );\n    }\n\n    private getDynamicFormFieldType({\n        custom,\n        name,\n        fieldType,\n        type,\n        secret,\n    }: FormField): DynamicFormFieldType {\n        if (!custom) {\n            const defaultTypes: { [key: string]: DynamicFormFieldType } = {\n                phone: DynamicFormFieldType.telephone,\n                countryCode: DynamicFormFieldType.dropdown,\n                stateOrProvinceCode: DynamicFormFieldType.dropdown,\n            };\n\n            return defaultTypes[name] || DynamicFormFieldType.text;\n        }\n\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address } from '@bigcommerce/checkout-sdk';\n\nimport { Country, Region } from '../../geography';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n"],"sourceRoot":""}