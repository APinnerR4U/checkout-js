{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/ui/form/CheckboxFormField.tsx","webpack://checkout/./src/app/privacyPolicy/PrivacyPolicyField.tsx","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/privacyPolicy/getPrivacyPolicyValidationSchema.ts","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","labelContent","onChange","name","renderField","field","checked","value","testId","render","PrivacyPolicyCheckboxFieldLink","url","CheckboxFormField","TranslatedHtml","data","Fieldset","renderInput","props","TextInput","autoComplete","TranslatedString","FormField","input","requiresMarketingConsent","Input","Label","withLanguage","mapPropsToValues","email","defaultShouldSubscribe","shouldSubscribe","privacyPolicy","handleSubmit","values","onContinueAsGuest","validationSchema","language","privacyPolicyUrl","translate","max","required","baseSchema","concat","isRequired","schemaFields","oneOf","getPrivacyPolicyValidationSchema","canSubscribe","checkoutButtons","isContinuingAsGuest","onChangeEmail","onShowLogin","fieldProps","Form","legend","Legend","hidden","BasicFormField","PrivacyPolicyField","Button","isLoading","variant","Primary","onClick","EMAIL_REGEXP","withIconContainer","viewBox","xmlns","d","forgotPasswordUrl","Toggle","openByDefault","isOpen","toggle","href","footer","rel","target","password","onSignIn","matches","canCancel","createAccountUrl","isSigningIn","accountExists","onCancel","signInError","Alert","Error","error","body","mapErrorMessage","key","formEmail","Info","preventDefault","state","guestMustLogIn","guestAttemptsLimitReached","handleContinueAsGuest","formValues","this","continueAsGuest","onContinueAsGuestError","trim","acceptsMarketingNewsletter","undefined","acceptsAbandonedCartEmails","draftEmail","status","setState","handleSignIn","credentials","signIn","onSignInError","handleCancelSignIn","clearError","onChangeViewType","CustomerViewType","Guest","handleChangeEmail","handleShowLogin","Login","componentDidMount","onReady","viewType","renderLoginForm","renderGuestForm","checkEmbeddedSupport","checkoutButtonIds","deinitializeCustomer","initializeCustomer","onUnhandledError","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isGuestEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCheckout","getCustomer","getConfig","getSignInError","statuses","billingAddress","checkout","customer","config","checkoutSettings","shopperConfig","showNewsletterSignup","remoteCheckoutProviders","links","createAccountLink","defaultNewsletterSignup","firstName","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","withCheckout"],"mappings":"yKAaMA,EAAgB,sBAAW,SAC7B,EAMAC,GALI,IAAAC,EAAA,EAAAA,oBACAC,EAAA,EAAAA,MACAC,EAAA,EAAAA,GACA,mDAGH,OACD,oCACI,kBAAC,IAAK,cACGC,EAAI,CACTC,UAAY,IACR,gBACA,kCACAJ,GAEJE,GAAKA,EACLH,IAAMA,EACNM,KAAK,cAET,kBAAC,IAAK,CAACC,QAAUJ,GACXD,OAKC,O,gGCWA,oBAnCsD,SAAC,G,IAClED,EAAA,EAAAA,oBACAO,EAAA,EAAAA,aACAC,EAAA,EAAAA,SACAC,EAAA,EAAAA,KACAP,EAAA,EAAAA,GAEMQ,EAAc,uBAAY,SAAC,G,IAAEC,EAAA,EAAAA,MAAwB,OACvD,kBAAC,WAAQ,KACH,kBAAC,IAAa,cACPA,EAAK,CACVC,UAAYD,EAAME,MAClBX,GAAKA,GAAMS,EAAMF,KACjBR,MAAQM,KAGZ,kBAAC,IAAc,CACXE,KAAOA,EACPK,OAAY,oBAAUL,GAAK,4BAGpC,CACCP,EACAK,EACAE,IAGJ,OAAO,kBAAC,IAAc,CAClBT,oBAAsBA,EACtBS,KAAOA,EACPD,SAAWA,EACXO,OAASL,Q,+LC1CXM,EAAqE,SAAC,G,IACxEC,EAAA,EAAAA,IACE,OACF,kBAACC,EAAA,EAAiB,CACdX,aAAe,kBAACY,EAAA,EAAc,CAACC,KAAO,CAAEH,IAAG,GAAKf,GAAG,yBACnDO,KAAK,mBAYE,kBARmD,SAAC,G,IAC/DQ,EAAA,EAAAA,IACE,OACF,kBAACI,EAAA,EAAQ,CAACrB,oBAAoB,2BAC1B,kBAACgB,EAA8B,CAACC,IAAMA,Q,wECgB/B,kBAxByC,SAAC,G,IACrDT,EAAA,EAAAA,SAEMc,EAAc,uBAAY,SAACC,GAAsB,OACnD,kBAACC,EAAA,EAAS,cACDD,EAAMZ,MAAK,CAChBc,aAAeF,EAAMZ,MAAMF,KAC3BP,GAAKqB,EAAMZ,MAAMF,KACjBJ,KAAK,aAEV,IAEGE,EAAe,mBAAQ,WAAM,OAC/B,kBAACmB,EAAA,EAAgB,CAACxB,GAAG,2BACtB,IAEH,OAAO,kBAACyB,EAAA,EAAS,CACbC,MAAQN,EACRf,aAAeA,EACfE,KAAK,QACLD,SAAWA,O,4BCDJ,kBAnBgD,SAAC,G,IAAEG,EAAA,EAAAA,MAAOkB,EAAA,EAAAA,yBAA+B,OACpG,kBAAC,WAAQ,KACL,kBAACC,EAAA,EAAK,cACGnB,EAAK,CACVC,QAAUD,EAAME,MAChBT,UAAU,gBACVF,GAAKS,EAAMF,KACXJ,KAAK,cAGT,kBAAC0B,EAAA,EAAK,CAACzB,QAAUK,EAAMF,MACnB,kBAACiB,EAAA,EAAgB,CAACxB,GAAK2B,EACnB,mCACA,qDC0FD,SAAAG,EAAA,GAAa,qBAAgE,CACxFC,iBAAkB,SAAC,G,IACf,IAAAC,aAAA,IAAQ,EAAR,KACA,IAAAC,8BAAA,IAAyB,GAAzB,EAEE,OACFD,MAAK,EACLE,iBAHA,EAAAP,0BAGoDM,EACpDE,eAAe,IAEnBC,aAAc,SAACC,EAAQ,IACnBC,EAD8B,QAAAA,mBACZD,IAEtBE,iBAAkB,SAAC,G,IAAEC,EAAA,EAAAA,SAAUC,EAAA,EAAAA,iBACrBT,EAAQ,mBACTA,MAAMQ,EAASE,UAAU,iCACzBC,IAAI,KACJC,SAASJ,EAASE,UAAU,kCAE3BG,EAAa,iBAAO,CAAEb,MAAK,IAEjC,OAAIS,EACOI,EAAWC,OC/Hf,SAA0C,G,IACrDC,EAAA,EAAAA,WACAP,EAAA,EAAAA,SAEMQ,EAEF,GAOJ,OALID,IACAC,EAAab,cAAgB,oBACxBc,MAAM,EAAC,GAAOT,EAASE,UAAU,mCAGnC,iBAAOM,GDkHmBE,CAAiC,CACtDH,aAAcN,EACdD,SAAQ,KAITK,IA5Ba,CA8BzB,gBA/GqG,SAAC,G,IACrGM,EAAA,EAAAA,aACAC,EAAA,EAAAA,gBACAC,EAAA,EAAAA,oBACAC,EAAA,EAAAA,cACAC,EAAA,EAAAA,YACAd,EAAA,EAAAA,iBACAd,EAAA,EAAAA,yBAEMnB,EAAc,uBAAY,SAACgD,GAAoC,OACjE,kBAAC,EAAc,cACNA,EAAU,CACf7B,yBAA2BA,OAEhC,CACCA,IAGJ,OACI,kBAAC8B,EAAA,EAAI,CACDvD,UAAU,gBACVF,GAAG,0BACHY,OAAO,2BAEP,kBAACO,EAAA,EAAQ,CACLuC,OACI,kBAACC,EAAA,EAAM,CAACC,QAAM,GACV,kBAACpC,EAAA,EAAgB,CAACxB,GAAG,mCAI7B,2BACI,kBAACiB,EAAA,EAAc,CAACjB,GAAG,qCAGvB,yBAAKE,UAAU,2BACX,yBAAKA,UAAU,sBACX,kBAAC,EAAU,CAACI,SAAWgD,KAEpBH,GAAgBxB,IAA6B,kBAACkC,EAAA,EAAc,CAC3DtD,KAAK,kBACLM,OAASL,IAGXiC,GAAoB,kBAACqB,EAAkB,CACrC/C,IAAM0B,KAId,yBAAKvC,UAAU,qCACX,kBAAC6D,EAAA,EAAM,CACH7D,UAAU,uBACVF,GAAG,6BACHgE,UAAYX,EACZzC,OAAO,oCACPT,KAAK,SACL8D,QAAUF,EAAA,EAAcG,SAExB,kBAAC1C,EAAA,EAAgB,CAACxB,GAAG,yCAKjC,2BACI,kBAACwB,EAAA,EAAgB,CAACxB,GAAG,wBACnB,IACF,mCACc,2BACVA,GAAG,0BACHmE,QAAUZ,GAEV,kBAAC/B,EAAA,EAAgB,CAACxB,GAAG,4BAI3BoD,S,oBEzGX,IAAMgB,EAAe,oG,QCWb,SAAAC,EAAA,IAToB,WAAM,OACrC,yBACIC,QAAQ,cACRC,MAAM,8BAEN,0BAAMC,EAAE,sbCID,SAAAH,EAAA,IATyB,WAAM,OAC1C,yBACIC,QAAQ,cACRC,MAAM,8BAEN,0BAAMC,EAAE,yxB,UC+CD,kBA5C8C,SAAC,G,IAC1DC,EAAA,EAAAA,kBAEMrD,EAAc,uBAAY,SAACC,GAAsB,OACnD,kBAACqD,EAAA,EAAM,CAACC,eAAgB,IAClB,SAAC,G,IAAEC,EAAA,EAAAA,OAAQC,EAAA,EAAAA,OAAa,OACtB,yBAAK3E,UAAU,uBACX,kBAACoB,EAAA,EAAS,cACDD,EAAMZ,MAAK,CAChBX,oBAAoB,uBACpBE,GAAKqB,EAAMZ,MAAMF,KACjBJ,KAAOyE,EAAS,OAAS,cAE7B,uBAAG1E,UAAU,uCAAuC4E,KAAK,IAAIX,QAAUU,GACjED,EAAS,kBAAC,EAAO,MAAM,kBAAC,EAAY,aAKvD,IAEGvE,EAAe,mBAAQ,WAAM,OAC/B,kBAACmB,EAAA,EAAgB,CAACxB,GAAK,8BACxB,IAEG+E,EAAS,mBAAQ,WAAM,OACzB,mCACc,uBACVD,KAAOL,EACPO,IAAI,sBACJC,OAAO,UAEP,kBAACzD,EAAA,EAAgB,CAACxB,GAAG,uCAE1B,CAACyE,IAEJ,OAAO,kBAAChD,EAAA,EAAS,CACbsD,OAASA,EACTrD,MAAQN,EACRf,aAAeA,EACfE,KAAK,gBCiEE,SAAAuB,EAAA,GAAa,qBAAgE,CACxFC,iBAAkB,SAAC,G,IACf,IAAAC,MACE,OACFA,WAFA,IAAQ,EAAR,KAGAkD,SAAU,KAEd9C,aAAc,SAACC,EAAQ,IACnB8C,EAD8B,QAAAA,UACrB9C,IAEbE,iBAAkB,SAAC,G,IAAEC,EAAA,EAAAA,SACjB,wBAAO,CACHR,MAAO,mBACFW,IAAI,KACJyC,QAAQhB,EAAc5B,EAASE,UAAU,iCACzCE,SAASJ,EAASE,UAAU,kCACjCwC,SAAU,mBACLtC,SAASJ,EAASE,UAAU,yCAjBjB,CAmBzB,gBAtGqG,SAAC,G,IACrG2C,EAAA,EAAAA,UACAC,EAAA,EAAAA,iBACAb,EAAA,EAAAA,kBACAzC,EAAA,EAAAA,MACAuD,EAAA,EAAAA,YACA/C,EAAA,EAAAA,SACAgD,EAAA,EAAAA,cACAC,EAAA,EAAAA,SACAnC,EAAA,EAAAA,cACAoC,EAAA,EAAAA,YACU,WAAA1D,MACR,OACF,kBAACyB,EAAA,EAAI,CACDvD,UAAU,gBACVF,GAAG,8BACHY,OAAO,+BAEP,kBAACO,EAAA,EAAQ,CAACuC,OACN,kBAACC,EAAA,EAAM,CAACC,QAAM,GACV,kBAACpC,EAAA,EAAgB,CAACxB,GAAG,uCAIvB0F,GAAe,kBAACC,EAAA,EAAK,CACnB/E,OAAO,+BACPT,KAAOwF,EAAA,EAAUC,OC5DlB,SACXC,EACAnD,GAIA,OAFamD,EAAMC,MAAQD,EAAMC,KAAK3F,MAGtC,IAAK,kBACD,OAAOuC,EAAU,oCAErB,IAAK,8BACD,OAAOA,EAAU,8CAErB,QACI,OAAOA,EAAU,2BDgDPqD,CAAgBL,GAAa,SAAAM,GAAO,OAAAxD,EAASE,UAAUsD,QAG1DR,GAAiB,2BAChB,kBAACvE,EAAA,EAAc,CACXC,KAAO,CAAEH,IAAKuE,GACdtF,GAAG,8CAITwF,GAAiBH,GAAarD,IAAUiE,GACtC,kBAACN,EAAA,EAAK,CAACxF,KAAOwF,EAAA,EAAUO,MACpB,kBAACjF,EAAA,EAAc,CACXC,KAAO,CAAEc,MAAK,GACdhC,GAAG,iCAIbwF,IAAkBH,GAChB,kBAACM,EAAA,EAAK,CAACxF,KAAOwF,EAAA,EAAUC,OACpB,kBAAC3E,EAAA,EAAc,CACXC,KAAO,CAAEH,IAAKuE,GACdtF,GAAG,uCAIf,kBAAC,EAAU,CAACM,SAAWgD,IAEvB,kBAAC,EAAa,CAACmB,kBAAoBA,IAEnC,yBAAKvE,UAAU,gBACX,kBAAC6D,EAAA,EAAM,CACH/D,GAAG,6BACHgE,UAAYuB,EACZ3E,OAAO,2BACPT,KAAK,SACL8D,QAAUF,EAAA,EAAcG,SAExB,kBAAC1C,EAAA,EAAgB,CAACxB,GAAG,6BAGvBqF,GAAa,uBACXnF,UAAU,2CAA0C,YAC1C,yBACV4E,KAAK,IACL9E,GAAG,2BACHmE,QAAU,OAAAgC,EAAA,GAAeV,IAEzB,kBAACjE,EAAA,EAAgB,CAACxB,GAAG,kC,+DE7DzC,6E,OACI,EAAAoG,MAAuB,CACnBC,gBAAgB,EAChBC,2BAA2B,GA8FvB,EAAAC,sBAAwE,SAAMC,GAAU,+C,oFACtF,EAKFC,KAAKpF,MAJL8B,EAAY,eACZuD,EAAe,kBACf,IAAApE,yBAAiB,IAAG,SAAI,EACxB,IAAAqE,8BAAsB,IAAG,SAAI,EAG3B3E,EAAQwE,EAAWxE,MAAM4E,O,iBAE3B,O,sBAAA,GAAMF,EAAgB,CAClB1E,MAAK,EACL6E,8BAA4B1D,IAAgBqD,EAAWtE,uBAAyB4E,EAChFC,6BAA4BP,EAAWtE,sBAAyB4E,K,cAHpE,SAKAxE,IACAmE,KAAKO,gBAAaF,E,aAElB,MAAmB,0B,YAAT3G,MACNsG,KAAKO,gBAAaF,EAEX,CAAP,EAAOxE,MAGU,MAAjB,EAAM2E,QAAmC,MAAjB,EAAMA,OACvB,CAAP,EAAOR,KAAKS,SAAS,CACjBb,gBAAgB,EAChBC,0BAA4C,MAAjB,EAAMW,WAIzCN,EAAuB,G,gCAIvB,EAAAQ,aAAoE,SAAMC,GAAW,+C,gFACnF,EAIFX,KAAKpF,MAHLgG,EAAM,SACN,IAAAlC,gBAAQ,IAAG,SAAI,EACf,IAAAmC,qBAAa,IAAG,SAAI,E,iBAIpB,O,sBAAA,GAAMD,EAAOD,I,cAAb,SACAjC,IAEAsB,KAAKO,gBAAaF,E,+BAElBQ,EAAc,G,+BAId,EAAAC,mBAAiC,WAC/B,cACFC,EAAA,EAAAA,WACA,IAAAC,wBAAA,IAAmB,EAAnB,SACA/B,EAAA,EAAAA,YAGAA,GACA8B,EAAW9B,GAGf,EAAKwB,SAAS,CAAEb,gBAAgB,IAChCoB,EAAiBC,EAAA,EAAiBC,QAG9B,EAAAC,kBAA6C,SAAA5F,GACjD,EAAKgF,WAAahF,GAGd,EAAA6F,gBAA8B,WAC1B,cAAAJ,uBAAA,IAAmB,EAAnB,UAESC,EAAA,EAAiBI,Q,EAE1C,OA7KuB,iBAQnB,YAAAC,kBAAA,WACY,iBAAAC,cAAA,IAAU,EAAV,aAKZ,YAAAnH,OAAA,WACY,IAAAoH,EAAA,WAAAA,SACA5B,EAAA,WAAAA,eAER,OACI,kBAAC,WAAQ,KACF4B,IAAaP,EAAA,EAAiBI,OAASzB,EACtCI,KAAKyB,kBACLzB,KAAK0B,oBAKb,YAAAA,gBAAR,WACU,iBACFhF,EAAA,EAAAA,aACAiF,EAAA,EAAAA,qBACAC,EAAA,EAAAA,kBACApG,EAAA,EAAAA,uBACAqG,EAAA,EAAAA,qBACAtG,EAAA,EAAAA,MACAuG,EAAA,EAAAA,mBACA,IAAAlF,2BAAA,IAAsB,GAAtB,EACAZ,EAAA,EAAAA,iBACAd,EAAA,EAAAA,yBACA,IAAA6G,wBAAA,IAAmB,EAAnB,SAGJ,OACI,kBAAC,EAAS,CACNrF,aAAeA,EACfC,gBACI,kBAACqF,EAAA,EAAkB,CACfL,qBAAuBA,EACvBM,aAAeJ,EACfK,WAAaJ,EACbK,UAAYP,EACZQ,QAAUL,IAGlBvG,uBAAyBA,EACzBD,MAAQyE,KAAKO,YAAchF,EAC3BqB,oBAAsBA,EACtBC,cAAgBmD,KAAKmB,kBACrBtF,kBAAoBmE,KAAKF,sBACzBhD,YAAckD,KAAKoB,gBACnBpF,iBAAmBA,EACnBd,yBAA2BA,KAK/B,YAAAuG,gBAAR,WACU,iBACF5C,EAAA,EAAAA,iBACAtD,EAAA,EAAAA,MACAyC,EAAA,EAAAA,kBACAqE,EAAA,EAAAA,eACAvD,EAAA,EAAAA,YACAG,EAAA,EAAAA,YAGE,aACFW,EAAA,EAAAA,eACAC,EAAA,EAAAA,0BAGJ,OACI,kBAAC,EAAS,CACNd,cAAgBa,EAChBhB,UAAYyD,IAAmBxC,EAC/BhB,iBAAmBA,EACnBtD,MAAQyE,KAAKO,YAAchF,EAC3ByC,kBAAoBA,EACpBc,YAAcA,EACdE,SAAWgB,KAAKc,mBAChBjE,cAAgBmD,KAAKmB,kBACrBzC,SAAWsB,KAAKU,aAChBzB,YAAcA,KAiF9B,EA7KA,CAAuB,aA+KhB,SAASqD,EACZ,G,IAAEC,EAAA,EAAAA,gBAAiBC,EAAA,EAAAA,cAGf,IAAA/H,KAAQgI,EAAA,EAAAA,kBAAmBC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,YAAaC,EAAA,EAAAA,UAC3CC,EAAA,SAAAA,eACV,IAAAC,SAAYlG,EAAA,EAAAA,oBAAqBkC,EAAA,EAAAA,YAG/BiE,EAAiBN,IACjBO,EAAWN,IACXO,EAAWN,IACXO,EAASN,IAEf,IAAKI,IAAaE,EACd,OAAO,KAGH,QAAAC,iBACJnH,EAAA,EAAAA,iBACAd,EAAA,EAAAA,yBAGJ,MAAO,CACHwB,aAAcwG,EAAOE,cAAcC,qBACnCzB,kBAAmBsB,EAAOC,iBAAiBG,wBAC3CvC,WAAYwB,EAAgBxB,WAC5Bd,gBAAiBsC,EAAgBtC,gBACjCpB,iBAAkBqE,EAAOK,MAAMC,kBAC/BhI,uBAAwB0H,EAAOE,cAAcK,wBAC7C5B,qBAAsBU,EAAgBV,qBACtCtG,MAAQwH,GAAkBA,EAAexH,OAAW0H,GAAYA,EAAS1H,MACzEmI,UAAWT,GAAYA,EAASS,UAChC1F,kBAAmBkF,EAAOK,MAAMI,mBAChC7B,mBAAoBS,EAAgBT,mBACpClF,oBAAqBA,IACrByF,eAAgBa,EAAOC,iBAAiBS,qBACxC9E,YAAaA,IACb9C,iBAAgB,EAChBd,yBAAwB,EACxB0F,OAAQ2B,EAAgBsB,eACxB5E,YAAa4D,KAIN,iBAAAiB,EAAA,GAAaxB,EAAb,CAA6C","file":"customer-eabf8343.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { FieldProps } from 'formik';\nimport { kebabCase } from 'lodash';\nimport React, { memo, useCallback, Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport BasicFormField from './BasicFormField';\nimport CheckboxInput from './CheckboxInput';\nimport FormFieldError from './FormFieldError';\n\nexport interface CheckboxFormFieldProps {\n    additionalClassName?: string;\n    name: string;\n    id?: string;\n    labelContent: ReactNode;\n    onChange?(isChecked: boolean): void;\n}\n\nconst CheckboxFormField: FunctionComponent<CheckboxFormFieldProps> = ({\n    additionalClassName,\n    labelContent,\n    onChange,\n    name,\n    id,\n}) => {\n    const renderField = useCallback(({ field }: FieldProps) => (\n        <Fragment>\n            { <CheckboxInput\n                { ...field }\n                checked={ !!field.value }\n                id={ id || field.name }\n                label={ labelContent }\n            /> }\n\n            <FormFieldError\n                name={ name }\n                testId={ `${kebabCase(name)}-field-error-message` }\n            />\n        </Fragment>\n    ), [\n        id,\n        labelContent,\n        name,\n    ]);\n\n    return <BasicFormField\n        additionalClassName={ additionalClassName }\n        name={ name }\n        onChange={ onChange }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxFormField);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { TranslatedHtml } from '../locale';\nimport { CheckboxFormField, Fieldset } from '../ui/form';\n\nconst PrivacyPolicyCheckboxFieldLink: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <CheckboxFormField\n        labelContent={ <TranslatedHtml data={ { url } } id=\"privacy_policy.label\" /> }\n        name=\"privacyPolicy\"\n    />\n);\n\nconst PrivacyPolicyFieldset: FunctionComponent<{ url: string }> = ({\n    url,\n}) => (\n    <Fieldset additionalClassName=\"checkout-privacy-policy\">\n        <PrivacyPolicyCheckboxFieldLink url={ url } />\n    </Fieldset>\n);\n\nexport default memo(PrivacyPolicyFieldset);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"email\"\n        onChange={ onChange }\n    />;\n};\n\nexport default memo(EmailField);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean> & {\n    requiresMarketingConsent: boolean;\n};\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field, requiresMarketingConsent }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            checked={ field.value }\n            className=\"form-checkbox\"\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id={ requiresMarketingConsent ?\n                'customer.guest_marketing_consent' :\n                'customer.guest_subscribe_to_newsletter_text' }\n            />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FieldProps, FormikProps } from 'formik';\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { getPrivacyPolicyValidationSchema, PrivacyPolicyField } from '../privacyPolicy';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\nimport '../ui/Form.scss';\n\nimport EmailField from './EmailField';\nimport './GuestForm.scss';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    requiresMarketingConsent: boolean;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isContinuingAsGuest: boolean;\n    privacyPolicyUrl?: string;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    isContinuingAsGuest,\n    onChangeEmail,\n    onShowLogin,\n    privacyPolicyUrl,\n    requiresMarketingConsent,\n}) => {\n    const renderField = useCallback((fieldProps: FieldProps<boolean>) => (\n        <SubscribeField\n            { ...fieldProps }\n            requiresMarketingConsent={ requiresMarketingConsent }\n        />\n    ), [\n        requiresMarketingConsent,\n    ]);\n\n    return (\n        <Form\n            className=\"checkout-form\"\n            id=\"checkout-customer-guest\"\n            testId=\"checkout-customer-guest\"\n        >\n            <Fieldset\n                legend={\n                    <Legend hidden>\n                        <TranslatedString id=\"customer.guest_customer_text\" />\n                    </Legend>\n                }\n            >\n                <p>\n                    <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n                </p>\n\n                <div className=\"customerEmail-container\">\n                    <div className=\"customerEmail-body\">\n                        <EmailField onChange={ onChangeEmail } />\n\n                        { (canSubscribe || requiresMarketingConsent) && <BasicFormField\n                            name=\"shouldSubscribe\"\n                            render={ renderField }\n                        /> }\n\n                        { privacyPolicyUrl && <PrivacyPolicyField\n                            url={ privacyPolicyUrl }\n                        /> }\n                    </div>\n\n                    <div className=\"form-actions customerEmail-action\">\n                        <Button\n                            className=\"customerEmail-button\"\n                            id=\"checkout-customer-continue\"\n                            isLoading={ isContinuingAsGuest }\n                            testId=\"customer-continue-as-guest-button\"\n                            type=\"submit\"\n                            variant={ ButtonVariant.Primary }\n                        >\n                            <TranslatedString id=\"customer.continue_as_guest_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                <p>\n                    <TranslatedString id=\"customer.login_text\" />\n                    { ' ' }\n                    <a\n                        data-test=\"customer-continue-button\"\n                        id=\"checkout-customer-login\"\n                        onClick={ onShowLogin }\n                    >\n                        <TranslatedString id=\"customer.login_action\" />\n                    </a>\n                </p>\n\n                { checkoutButtons }\n            </Fieldset>\n        </Form>\n    );\n};\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n        requiresMarketingConsent,\n    }) => ({\n        email,\n        shouldSubscribe: requiresMarketingConsent ? false : defaultShouldSubscribe,\n        privacyPolicy: false,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language, privacyPolicyUrl }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        const baseSchema = object({ email });\n\n        if (privacyPolicyUrl) {\n            return baseSchema.concat(getPrivacyPolicyValidationSchema({\n                isRequired: !!privacyPolicyUrl,\n                language,\n            }));\n        }\n\n        return baseSchema;\n    },\n})(memo(GuestForm)));\n","import { LanguageService } from '@bigcommerce/checkout-sdk';\nimport { boolean, object, BooleanSchema, ObjectSchema } from 'yup';\n\nexport interface PrivacyPolicyValidatonSchemaProps {\n    isRequired: boolean;\n    language: LanguageService;\n}\n\nexport default function getPrivacyPolicyValidationSchema({\n    isRequired,\n    language,\n}: PrivacyPolicyValidatonSchemaProps): ObjectSchema<{ privacyPolicy?: boolean }> {\n    const schemaFields: {\n        privacyPolicy?: BooleanSchema;\n    } = {};\n\n    if (isRequired) {\n        schemaFields.privacyPolicy = boolean()\n            .oneOf([true], language.translate('privacy_policy.required_error'));\n    }\n\n    return object(schemaFields);\n}\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 576 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        viewBox=\"0 0 640 512\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        additionalClassName=\"form-input--withIcon\"\n                        id={ props.field.name }\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a className=\"form-toggle-password form-input-icon\" href=\"#\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => (\n        <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>\n    ), [forgotPasswordUrl]);\n\n    return <FormField\n        footer={ footer }\n        input={ renderInput }\n        labelContent={ labelContent }\n        name=\"password\"\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\nimport '../ui/Form.scss';\n\nimport mapErrorMessage from './mapErrorMessage';\nimport { EMAIL_REGEXP } from './validationPatterns';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    createAccountUrl: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    accountExists?: boolean;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    onCancel?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    createAccountUrl,\n    forgotPasswordUrl,\n    email,\n    isSigningIn,\n    language,\n    accountExists,\n    onCancel,\n    onChangeEmail,\n    signInError,\n    values: { email: formEmail },\n}) => (\n    <Form\n        className=\"checkout-form\"\n        id=\"checkout-customer-returning\"\n        testId=\"checkout-customer-returning\"\n    >\n        <Fieldset legend={\n            <Legend hidden>\n                <TranslatedString id=\"customer.returning_customer_text\" />\n            </Legend>\n        }\n        >\n            { signInError && <Alert\n                testId=\"customer-login-error-message\"\n                type={ AlertType.Error }\n            >\n                { mapErrorMessage(signInError, key => language.translate(key)) }\n            </Alert> }\n\n            { !accountExists && <p>\n                <TranslatedHtml\n                    data={ { url: createAccountUrl } }\n                    id=\"customer.create_account_to_continue_text\"\n                />\n            </p> }\n\n            { accountExists && canCancel && email === formEmail &&\n                <Alert type={ AlertType.Info }>\n                    <TranslatedHtml\n                        data={ { email } }\n                        id=\"customer.account_must_login\"\n                    />\n                </Alert> }\n\n            { accountExists && !canCancel &&\n                <Alert type={ AlertType.Error }>\n                    <TranslatedHtml\n                        data={ { url: createAccountUrl } }\n                        id=\"customer.guest_temporary_disabled\"\n                    />\n                </Alert> }\n\n            <EmailField onChange={ onChangeEmail } />\n\n            <PasswordField forgotPasswordUrl={ forgotPasswordUrl } />\n\n            <div className=\"form-actions\">\n                <Button\n                    id=\"checkout-customer-continue\"\n                    isLoading={ isSigningIn }\n                    testId=\"customer-continue-button\"\n                    type=\"submit\"\n                    variant={ ButtonVariant.Primary }\n                >\n                    <TranslatedString id=\"customer.sign_in_action\" />\n                </Button>\n\n                { canCancel && <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a> }\n            </div>\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) =>\n        object({\n            email: string()\n                .max(256)\n                .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n                .required(language.translate('customer.email_required_error')),\n            password: string()\n                .required(language.translate('customer.password_required_error')),\n        }),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, GuestCredentials } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CustomerViewType from './CustomerViewType';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n}\n\nexport interface CustomerState {\n    guestMustLogIn: boolean;\n    guestAttemptsLimitReached: boolean;\n}\n\nexport interface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    checkoutButtonIds: string[];\n    createAccountUrl: string;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isGuestEnabled: boolean;\n    isSigningIn: boolean;\n    signInError?: Error;\n    privacyPolicyUrl?: string;\n    requiresMarketingConsent: boolean;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps, CustomerState> {\n    state: CustomerState = {\n        guestMustLogIn: false,\n        guestAttemptsLimitReached: false,\n    };\n\n    private draftEmail?: string;\n\n    componentDidMount(): void {\n        const { onReady = noop } = this.props;\n\n        onReady();\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n        const { guestMustLogIn } = this.state;\n\n        return (\n            <Fragment>\n                { (viewType === CustomerViewType.Login || guestMustLogIn) ?\n                    this.renderLoginForm() :\n                    this.renderGuestForm() }\n            </Fragment>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            privacyPolicyUrl,\n            requiresMarketingConsent,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                email={ this.draftEmail || email }\n                isContinuingAsGuest={ isContinuingAsGuest }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n                privacyPolicyUrl={ privacyPolicyUrl }\n                requiresMarketingConsent={ requiresMarketingConsent }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            createAccountUrl,\n            email,\n            forgotPasswordUrl,\n            isGuestEnabled,\n            isSigningIn,\n            signInError,\n        } = this.props;\n\n        const {\n            guestMustLogIn,\n            guestAttemptsLimitReached,\n        } = this.state;\n\n        return (\n            <LoginForm\n                accountExists={ guestMustLogIn }\n                canCancel={ isGuestEnabled && !guestAttemptsLimitReached }\n                createAccountUrl={ createAccountUrl }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSigningIn={ isSigningIn }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onSignIn={ this.handleSignIn }\n                signInError={ signInError }\n            />\n        );\n    }\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n        } = this.props;\n\n        const email = formValues.email.trim();\n        try {\n            await continueAsGuest({\n                email,\n                acceptsMarketingNewsletter: canSubscribe && formValues.shouldSubscribe ? true : undefined,\n                acceptsAbandonedCartEmails: formValues.shouldSubscribe ? true : undefined,\n            });\n            onContinueAsGuest();\n            this.draftEmail = undefined;\n        } catch (error) {\n            if (error.type === 'update_subscriptions') {\n                this.draftEmail = undefined;\n\n                return onContinueAsGuest();\n            }\n\n            if (error.status === 403 || error.status === 429) {\n                return this.setState({\n                    guestMustLogIn: true,\n                    guestAttemptsLimitReached: error.status === 429,\n                });\n            }\n\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        this.setState({ guestMustLogIn: false });\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getConfig },\n        errors: { getSignInError },\n        statuses: { isContinuingAsGuest, isSigningIn },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!checkout || !config) {\n        return null;\n    }\n\n    const { checkoutSettings: {\n        privacyPolicyUrl,\n        requiresMarketingConsent,\n    } } = config;\n\n    return {\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        continueAsGuest: checkoutService.continueAsGuest,\n        createAccountUrl: config.links.createAccountLink,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        email: (billingAddress && billingAddress.email) || (customer && customer.email),\n        firstName: customer && customer.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        privacyPolicyUrl,\n        requiresMarketingConsent,\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}