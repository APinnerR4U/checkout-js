{"version":3,"sources":["webpack://checkout/./src/app/ui/toggle/Toggle.tsx","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["Toggle","_super","props","_this","call","this","toggle","setState","isOpen","state","openByDefault","__extends","prototype","render","children","__assign","react__WEBPACK_IMPORTED_MODULE_0__","customer_EmailField","Object","react","_a","onChange","renderInput","react_default","a","createElement","TextInput","field","autoComplete","name","id","type","labelContent","TranslatedString","FormField","input","customer_SubscribeField","Input","SubscribeField_assign","className","checked","value","Label","htmlFor","customer_GuestForm","withLanguage","formik_esm","mapPropsToValues","_b","email","_c","defaultShouldSubscribe","shouldSubscribe","handleSubmit","values","onContinueAsGuest","validationSchema","language","lib","translate","max","required","canSubscribe","checkoutButtons","isContinuingAsGuest","onChangeEmail","onShowLogin","Form","testId","Fieldset","legend","Legend","hidden","TranslatedHtml","BasicFormField","component","Button","isLoading","variant","Primary","data-test","onClick","EMAIL_REGEXP","icon_IconEye","withIconContainer","xmlns","viewBox","d","icon_IconEyeSlash","customer_PasswordField","forgotPasswordUrl","PasswordField_assign","additionalClassName","href","footer","rel","target","customer_LoginForm","password","onSignIn","matches","canCancel","createAccountUrl","isSigningIn","onCancel","signInError","Alert","Error","error","body","mapErrorMessage","key","data","url","preventDefault","Customer_Customer","Customer","apply","arguments","handleContinueAsGuest","formValues","__awaiter","continueAsGuest","firstName","lodash","onContinueAsGuestError","_d","subscribeToNewsletter","_e","sent","draftEmail","undefined","error_1","handleSignIn","credentials","signIn","onSignInError","error_2","handleCancelSignIn","clearError","onChangeViewType","CustomerViewType","Guest","handleChangeEmail","handleShowLogin","Login","componentDidMount","onReady","viewType","renderLoginForm","renderGuestForm","checkEmbeddedSupport","checkoutButtonIds","deinitializeCustomer","initializeCustomer","onUnhandledError","CheckoutButtonList","deinitialize","initialize","methodIds","onError","isGuestEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","getBillingAddress","getCheckout","getCustomer","getConfig","getSignInError","errors","statuses","billingAddress","checkout","customer","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","links","createAccountLink","defaultNewsletterSignup","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","__webpack_exports__","withCheckout"],"mappings":"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","file":"customer-5309e64a.js","sourcesContent":["import { Component, ReactNode } from 'react';\n\nexport interface ToggleProps {\n    openByDefault?: boolean;\n    children(props: any): ReactNode;\n}\n\nexport interface ToggleState {\n    isOpen: boolean;\n}\n\nexport default class Toggle extends Component<ToggleProps, ToggleState> {\n    constructor(props: ToggleProps) {\n        super(props);\n\n        this.state = { isOpen: !!props.openByDefault };\n    }\n\n    render(): ReactNode {\n        const {\n            children,\n        } = this.props;\n\n        return children({\n            ...this.state,\n            toggle: this.toggle,\n        });\n    }\n\n    private toggle: () => void = () => {\n        this.setState({ isOpen: !this.state.isOpen });\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        name=\"email\"\n        labelContent={ labelContent }\n        onChange={ onChange }\n        input={ renderInput }\n    />;\n};\n\nexport default memo(EmailField);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean>;\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            className=\"form-checkbox\"\n            checked={ field.value }\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id=\"customer.guest_subscribe_to_newsletter_text\" />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isContinuingAsGuest: boolean;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    isContinuingAsGuest,\n    onChangeEmail,\n    onShowLogin,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        testId=\"checkout-customer-guest\"\n        id=\"checkout-customer-guest\"\n    >\n        <Fieldset\n            legend={\n                <Legend hidden>\n                    <TranslatedString id=\"customer.guest_customer_text\" />\n                </Legend>\n            }\n        >\n            <p>\n                <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n            </p>\n\n            <div className=\"customerEmail-container\">\n                <div className=\"customerEmail-body\">\n                    <EmailField onChange={ onChangeEmail } />\n\n                    { canSubscribe && <BasicFormField\n                        name=\"shouldSubscribe\"\n                        component={ SubscribeField }\n                    /> }\n                </div>\n\n                <div className=\"form-actions customerEmail-action\">\n                    <Button\n                        className=\"customerEmail-button\"\n                        testId=\"customer-continue-as-guest-button\"\n                        id=\"checkout-customer-continue\"\n                        isLoading={ isContinuingAsGuest }\n                        variant={ ButtonVariant.Primary }\n                        type=\"submit\"\n                    >\n                        <TranslatedString id=\"customer.continue_as_guest_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            <p>\n                <TranslatedString id=\"customer.login_text\" />\n                { ' ' }\n                <a\n                    data-test=\"customer-continue-button\"\n                    id=\"checkout-customer-login\"\n                    onClick={ onShowLogin }\n                >\n                    <TranslatedString id=\"customer.login_action\" />\n                </a>\n            </p>\n\n            { checkoutButtons }\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n    }) => ({\n        email,\n        shouldSubscribe: defaultShouldSubscribe,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        return object({ email });\n    },\n})(memo(GuestForm)));\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 576 512\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 640 512\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        id={ props.field.name }\n                        additionalClassName=\"form-input--withIcon\"\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a href=\"#\" className=\"form-toggle-password form-input-icon\" onClick={ toggle }>\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => (\n        <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>\n    ), [forgotPasswordUrl]);\n\n    return <FormField\n        labelContent={ labelContent }\n        name=\"password\"\n        footer={ footer }\n        input={ renderInput }\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport mapErrorMessage from './mapErrorMessage';\nimport { EMAIL_REGEXP } from './validationPatterns';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    createAccountUrl: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    onCancel?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    createAccountUrl,\n    forgotPasswordUrl,\n    isSigningIn,\n    language,\n    onCancel,\n    onChangeEmail,\n    signInError,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        testId=\"checkout-customer-returning\"\n        id=\"checkout-customer-returning\"\n    >\n        <Fieldset legend={\n            <Legend hidden>\n                <TranslatedString id=\"customer.returning_customer_text\" />\n            </Legend>\n        }\n        >\n            { signInError && <Alert\n                testId=\"customer-login-error-message\"\n                type={ AlertType.Error }\n            >\n                { mapErrorMessage(signInError, key => language.translate(key)) }\n            </Alert> }\n\n            <p>\n                <TranslatedHtml\n                    data={ { url: createAccountUrl } }\n                    id=\"customer.create_account_to_continue_text\"\n                />\n            </p>\n\n            <EmailField onChange={ onChangeEmail } />\n\n            <PasswordField forgotPasswordUrl={ forgotPasswordUrl } />\n\n            <div className=\"form-actions\">\n                <Button\n                    testId=\"customer-continue-button\"\n                    id=\"checkout-customer-continue\"\n                    isLoading={ isSigningIn }\n                    variant={ ButtonVariant.Primary }\n                    type=\"submit\"\n                >\n                    <TranslatedString id=\"customer.sign_in_action\" />\n                </Button>\n\n                { canCancel && <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a> }\n            </div>\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) => object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n        password: string()\n            .required(language.translate('customer.password_required_error')),\n    }),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, GuestCredentials } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CustomerViewType from './CustomerViewType';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    subscribeToNewsletter?(data: { email: string; firstName?: string }): void;\n}\n\ninterface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    checkoutButtonIds: string[];\n    createAccountUrl: string;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isGuestEnabled: boolean;\n    isSigningIn: boolean;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps> {\n    private draftEmail?: string;\n\n    componentDidMount(): void {\n        const { onReady = noop } = this.props;\n\n        onReady();\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n\n        return (\n            <Fragment>\n                { viewType === CustomerViewType.Login && this.renderLoginForm() }\n                { viewType === CustomerViewType.Guest && this.renderGuestForm() }\n            </Fragment>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                email={ this.draftEmail || email }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                isContinuingAsGuest={ isContinuingAsGuest }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            createAccountUrl,\n            email,\n            forgotPasswordUrl,\n            isGuestEnabled,\n            isSigningIn,\n            signInError,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                createAccountUrl={ createAccountUrl }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSigningIn={ isSigningIn }\n                signInError={ signInError }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onSignIn={ this.handleSignIn }\n            />\n        );\n    }\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            firstName,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n            subscribeToNewsletter = noop,\n        } = this.props;\n\n        if (canSubscribe && formValues.shouldSubscribe) {\n            subscribeToNewsletter({ email: formValues.email, firstName });\n        }\n\n        try {\n            await continueAsGuest({ email: formValues.email });\n            onContinueAsGuest();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getConfig },\n        errors: { getSignInError },\n        statuses: { isContinuingAsGuest, isSigningIn },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!billingAddress || !checkout || !customer || !config) {\n        return null;\n    }\n\n    return {\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        continueAsGuest: checkoutService.continueAsGuest,\n        createAccountUrl: config.links.createAccountLink,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        email: billingAddress.email || customer.email,\n        firstName: customer.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}