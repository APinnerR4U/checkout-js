{"version":3,"sources":["webpack://checkout/./src/app/ui/modal/ModalTrigger.tsx","webpack://checkout/./src/app/order/getLineItemsCount.ts","webpack://checkout/./src/app/order/OrderSummaryModal.tsx","webpack://checkout/./src/app/order/OrderSummaryDrawer.tsx","webpack://checkout/./src/app/cart/CartSummaryDrawer.tsx"],"names":["ModalTrigger","_super","_this","apply","this","arguments","state","isOpen","canHandleEvent","handleOpen","setState","handleClose","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","componentDidMount","componentWillUnmount","render","_a","props","children","modal","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_1__","onClick","onRequestClose","getLineItemsCount","physicalItems","digitalItems","giftCertificates","customItems","length","renderHeader","headerLink","react_default","react","className","href","TranslatedString","id","IconClose","ModalHeader","additionalClassName","order_OrderSummaryModal","additionalLineItems","onAfterOpen","storeCurrency","shopperCurrency","lineItems","total","orderSummarySubtotalsProps","tslib_es6","Modal","additionalHeaderClassName","additionalBodyClassName","header","OrderSummarySection","OrderSummaryItems","items","OrderSummarySubtotals","OrderSummaryTotal","orderAmount","shopperCurrencyCode","code","storeCurrencyCode","__webpack_exports__","Object","coupons","discountAmount","handlingAmount","onRemovedCoupon","onRemovedGiftCertificate","shippingAmount","storeCreditAmount","subtotalAmount","taxes","renderModal","classnames_default","cartDrawer-figure--stack","productWithImage","imageUrl","alt","name","data-test","src","IconGiftCertificate","getImage","data","count","getItemsCount","ShopperCurrency","amount","_checkout__WEBPACK_IMPORTED_MODULE_2__","_mapToCartSummaryProps__WEBPACK_IMPORTED_MODULE_4__","cartUrl","_withRedeemable__WEBPACK_IMPORTED_MODULE_5__","_order_OrderSummaryDrawer__WEBPACK_IMPORTED_MODULE_3__","_EditLink__WEBPACK_IMPORTED_MODULE_6__","url"],"mappings":"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","file":"cart-summary-drawer-6ad2a4b1.js","sourcesContent":["import React, { Component, Fragment, MouseEventHandler, ReactNode } from 'react';\n\nexport interface ModalTriggerProps {\n    children(props: { onClick: MouseEventHandler }): ReactNode;\n    modal(props: ModalTriggerModalProps): ReactNode;\n}\n\nexport interface ModalTriggerModalProps {\n    isOpen: boolean;\n    onRequestClose(): void;\n}\n\nexport interface ModalTriggerState {\n    isOpen: boolean;\n}\n\nexport default class ModalTrigger extends Component<ModalTriggerProps, ModalTriggerState> {\n    state = {\n        isOpen: false,\n    };\n\n    private canHandleEvent: boolean = false;\n\n    componentDidMount(): void {\n        this.canHandleEvent = true;\n    }\n\n    componentWillUnmount(): void {\n        this.canHandleEvent = false;\n    }\n\n    render() {\n        const { children, modal } = this.props;\n        const { isOpen } = this.state;\n\n        return (\n            <Fragment>\n                { children({ onClick: this.handleOpen }) }\n\n                { modal({\n                    isOpen,\n                    onRequestClose: this.handleClose,\n                }) }\n            </Fragment>\n        );\n    }\n\n    private handleOpen: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: true,\n        });\n    };\n\n    private handleClose: () => void = () => {\n        if (!this.canHandleEvent) {\n            return;\n        }\n\n        this.setState({\n            isOpen: false,\n        });\n    };\n}\n","import { LineItemMap } from '@bigcommerce/checkout-sdk';\n\nexport default function getLineItemsCount({\n    physicalItems,\n    digitalItems,\n    giftCertificates,\n    customItems,\n}: LineItemMap): number {\n    return physicalItems.length +\n        digitalItems.length +\n        giftCertificates.length +\n        (customItems || []).length;\n}\n","import { LineItemMap, ShopperCurrency as ShopperCurrencyType, StoreCurrency } from '@bigcommerce/checkout-sdk';\nimport React, { Fragment, FunctionComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { IconClose } from '../ui/icon';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport OrderSummaryItems from './OrderSummaryItems';\nimport OrderSummarySection from './OrderSummarySection';\nimport OrderSummarySubtotals, { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\nimport OrderSummaryTotal from './OrderSummaryTotal';\n\nexport interface OrderSummaryDrawerProps {\n    additionalLineItems?: ReactNode;\n    lineItems: LineItemMap;\n    total: number;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    isOpen: boolean;\n    headerLink?: ReactNode;\n    onRequestClose?(): void;\n    onAfterOpen?(): void;\n}\n\nconst OrderSummaryModal: FunctionComponent<OrderSummaryDrawerProps & OrderSummarySubtotalsProps> = ({\n    additionalLineItems,\n    children,\n    onRequestClose,\n    onAfterOpen,\n    storeCurrency,\n    shopperCurrency,\n    isOpen,\n    headerLink,\n    lineItems,\n    total,\n    ...orderSummarySubtotalsProps\n}) => (\n<Modal\n    onAfterOpen={ onAfterOpen }\n    onRequestClose={ onRequestClose }\n    additionalHeaderClassName=\"cart-modal-header optimizedCheckout-orderSummary\"\n    additionalBodyClassName=\"cart-modal-body optimizedCheckout-orderSummary\"\n    header={ renderHeader({ headerLink, onRequestClose }) }\n    isOpen={ isOpen }\n>\n    <OrderSummarySection>\n        <OrderSummaryItems items={ lineItems } />\n    </OrderSummarySection>\n    <OrderSummarySection>\n        <OrderSummarySubtotals\n            { ...orderSummarySubtotalsProps }\n        />\n        { additionalLineItems }\n    </OrderSummarySection>\n    <OrderSummarySection>\n        <OrderSummaryTotal\n            orderAmount={ total }\n            shopperCurrencyCode={ shopperCurrency.code }\n            storeCurrencyCode={ storeCurrency.code }\n        />\n    </OrderSummarySection>\n</Modal>\n);\n\nconst renderHeader: FunctionComponent<{\n    headerLink: ReactNode;\n    onRequestClose?(): void;\n}> = ({\n    onRequestClose,\n    headerLink,\n}) => (<Fragment>\n    <a\n        className=\"cart-modal-close\"\n        onClick={ onRequestClose }\n        href=\"javascript:void(0);\"\n    >\n        <span className=\"is-srOnly\">\n            <TranslatedString id=\"common.close_action\" />\n        </span>\n        <IconClose />\n    </a>\n    <ModalHeader additionalClassName=\"cart-modal-title\">\n        <TranslatedString id=\"cart.cart_heading\" />\n    </ModalHeader>\n\n    { headerLink }\n</Fragment>);\n\nexport default OrderSummaryModal;\n","import {\n    LineItemMap,\n    ShopperCurrency as ShopperCurrencyType,\n    StoreCurrency\n} from '@bigcommerce/checkout-sdk';\nimport classNames from 'classnames';\nimport React, { memo, useCallback, FunctionComponent, ReactNode } from 'react';\n\nimport { ShopperCurrency } from '../currency';\nimport { TranslatedString } from '../locale';\nimport { IconGiftCertificate } from '../ui/icon';\nimport { ModalTrigger } from '../ui/modal';\n\nimport getItemsCount from './getItemsCount';\nimport getLineItemsCount from './getLineItemsCount';\nimport OrderSummaryModal from './OrderSummaryModal';\nimport { OrderSummarySubtotalsProps } from './OrderSummarySubtotals';\n\nexport interface OrderSummaryDrawerProps {\n    lineItems: LineItemMap;\n    total: number;\n    headerLink: ReactNode;\n    storeCurrency: StoreCurrency;\n    shopperCurrency: ShopperCurrencyType;\n    additionalLineItems?: ReactNode;\n}\n\nconst OrderSummaryDrawer: FunctionComponent<OrderSummaryDrawerProps & OrderSummarySubtotalsProps> = ({\n    additionalLineItems,\n    coupons,\n    discountAmount,\n    giftCertificates,\n    handlingAmount,\n    headerLink,\n    lineItems,\n    onRemovedCoupon,\n    onRemovedGiftCertificate,\n    shippingAmount,\n    shopperCurrency,\n    storeCreditAmount,\n    storeCurrency,\n    subtotalAmount,\n    taxes,\n    total,\n}) => {\n    const renderModal = useCallback(props => (\n        <OrderSummaryModal\n            { ...props }\n            coupons={ coupons }\n            discountAmount={ discountAmount }\n            giftCertificates={ giftCertificates }\n            handlingAmount={ handlingAmount }\n            onRemovedCoupon={ onRemovedCoupon }\n            onRemovedGiftCertificate={ onRemovedGiftCertificate }\n            shippingAmount={ shippingAmount }\n            storeCreditAmount={ storeCreditAmount }\n            subtotalAmount={ subtotalAmount }\n            taxes={ taxes }\n            additionalLineItems={ additionalLineItems }\n            headerLink={ headerLink }\n            lineItems={ lineItems }\n            shopperCurrency={ shopperCurrency }\n            storeCurrency={ storeCurrency }\n            total={ total }\n        />\n    ), [\n        additionalLineItems,\n        coupons,\n        discountAmount,\n        giftCertificates,\n        handlingAmount,\n        headerLink,\n        lineItems,\n        onRemovedCoupon,\n        onRemovedGiftCertificate,\n        shippingAmount,\n        shopperCurrency,\n        storeCreditAmount,\n        storeCurrency,\n        subtotalAmount,\n        taxes,\n        total,\n    ]);\n\n    return <ModalTrigger modal={ renderModal }>\n        { ({ onClick }) => <div\n            className=\"cartDrawer optimizedCheckout-orderSummary\"\n            onClick={ onClick }\n        >\n            <figure\n                className={ classNames(\n                    'cartDrawer-figure',\n                    { 'cartDrawer-figure--stack': getLineItemsCount(lineItems) > 1 }\n                ) }\n            >\n                <div className=\"cartDrawer-imageWrapper\">\n                    { getImage(lineItems) }\n                </div>\n            </figure>\n            <div className=\"cartDrawer-body\">\n                <h3 className=\"cartDrawer-items optimizedCheckout-headingPrimary\">\n                    <TranslatedString\n                        id=\"cart.item_count_text\"\n                        data={ { count: getItemsCount(lineItems) } }\n                    />\n                </h3>\n                <a>\n                    <TranslatedString id=\"cart.show_details_action\" />\n                </a>\n            </div>\n            <div className=\"cartDrawer-actions\">\n                <h3 className=\"cartDrawer-total optimizedCheckout-headingPrimary\">\n                    <ShopperCurrency amount={ total } />\n                </h3>\n            </div>\n        </div> }\n    </ModalTrigger>;\n};\n\nfunction getImage(lineItems: LineItemMap): ReactNode {\n    const productWithImage = lineItems.physicalItems[0] || lineItems.digitalItems[0];\n\n    if (productWithImage && productWithImage.imageUrl) {\n        return <img\n            alt={ productWithImage.name }\n            data-test=\"cart-item-image\"\n            src={ productWithImage.imageUrl }\n        />;\n    }\n\n    if (lineItems.giftCertificates.length) {\n        return <IconGiftCertificate />;\n    }\n}\n\nexport default memo(OrderSummaryDrawer);\n","import React, { memo, FunctionComponent } from 'react';\n\nimport { withCheckout } from '../checkout';\nimport OrderSummaryDrawer from '../order/OrderSummaryDrawer';\n\nimport mapToCartSummaryProps from './mapToCartSummaryProps';\nimport withRedeemable from './withRedeemable';\nimport { CartSummaryProps, WithCheckoutCartSummaryProps } from './CartSummary';\nimport EditLink from './EditLink';\n\nconst CartSummaryDrawer: FunctionComponent<CartSummaryProps & WithCheckoutCartSummaryProps> = ({\n    cartUrl,\n    ...props\n}) => (\n    withRedeemable(OrderSummaryDrawer)({\n        ...props,\n        cartUrl,\n        headerLink: (\n            <EditLink\n                className=\"modal-header-link cart-modal-link\"\n                url={ cartUrl }\n            />\n        ),\n    })\n);\n\nexport default withCheckout(mapToCartSummaryProps)(memo(CartSummaryDrawer));\n"],"sourceRoot":""}