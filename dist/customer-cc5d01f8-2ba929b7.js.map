{"version":3,"sources":["webpack://checkout/./src/app/ui/toggle/Toggle.tsx","webpack://checkout/./src/app/customer/EmailField.tsx","webpack://checkout/./src/app/customer/SubscribeField.tsx","webpack://checkout/./src/app/customer/GuestForm.tsx","webpack://checkout/./src/app/customer/validationPatterns.ts","webpack://checkout/./src/app/ui/icon/IconEye.tsx","webpack://checkout/./src/app/ui/icon/IconEyeSlash.tsx","webpack://checkout/./src/app/customer/PasswordField.tsx","webpack://checkout/./src/app/customer/LoginForm.tsx","webpack://checkout/./src/app/customer/mapErrorMessage.ts","webpack://checkout/./src/app/customer/Customer.tsx"],"names":["Toggle","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","toggle","setState","isOpen","state","openByDefault","react__WEBPACK_IMPORTED_MODULE_15__","children","_objectSpread","customer_EmailField","Object","react","_ref","onChange","renderInput","react_default","a","createElement","TextInput","assign","field","autoComplete","name","id","type","labelContent","TranslatedString","FormField","input","customer_SubscribeField","Input","className","checked","value","Label","htmlFor","customer_GuestForm","withLanguage","formik_esm","mapPropsToValues","_ref2","_ref2$email","email","_ref2$defaultShouldSu","defaultShouldSubscribe","shouldSubscribe","handleSubmit","values","_ref3","onContinueAsGuest","validationSchema","_ref4","language","lib","translate","max","required","canSubscribe","checkoutButtons","isContinuingAsGuest","onChangeEmail","onShowLogin","Form","testId","Fieldset","legend","Legend","hidden","TranslatedHtml","BasicFormField","component","Button","isLoading","variant","Primary","data-test","onClick","EMAIL_REGEXP","icon_IconEye","withIconContainer","xmlns","viewBox","d","icon_IconEyeSlash","customer_PasswordField","forgotPasswordUrl","additionalClassName","href","footer","rel","target","customer_LoginForm","password","onSignIn","matches","canCancel","createAccountUrl","isSigningIn","onCancel","signInError","Alert","Error","error","body","mapErrorMessage","key","data","url","preventDefault","Customer_Customer","Customer","handleContinueAsGuest","_asyncToGenerator","regeneratorRuntime","mark","_callee","formValues","_this$props","continueAsGuest","firstName","_this$props$onContinu","_this$props$onContinu2","onContinueAsGuestError","_this$props$subscribe","subscribeToNewsletter","wrap","_context","prev","next","lodash","draftEmail","undefined","t0","stop","_x","apply","arguments","handleSignIn","_callee2","credentials","_this$props2","signIn","_this$props2$onSignIn","_this$props2$onSignIn2","onSignInError","_context2","_x2","handleCancelSignIn","_this$props3","clearError","_this$props3$onChange","onChangeViewType","CustomerViewType","Guest","handleChangeEmail","handleShowLogin","_this$props$onChangeV","Login","_this$props$onReady","onReady","viewType","renderLoginForm","renderGuestForm","_this$props4","checkEmbeddedSupport","checkoutButtonIds","deinitializeCustomer","initializeCustomer","_this$props4$isContin","_this$props4$onUnhand","onUnhandledError","CheckoutButtonList","deinitialize","initialize","methodIds","onError","_this$props5","isGuestEnabled","mapToWithCheckoutCustomerProps","checkoutService","checkoutState","_checkoutState$data","getBillingAddress","getCheckout","getCustomer","getConfig","getSignInError","errors","_checkoutState$status","statuses","billingAddress","checkout","customer","config","shopperConfig","showNewsletterSignup","checkoutSettings","remoteCheckoutProviders","links","createAccountLink","defaultNewsletterSignup","forgotPasswordLink","guestCheckoutEnabled","signInCustomer","__webpack_exports__","withCheckout"],"mappings":"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","file":"customer-cc5d01f8-2ba929b7.js","sourcesContent":["import { Component, ReactNode } from 'react';\n\nexport interface ToggleProps {\n    openByDefault?: boolean;\n    children(props: any): ReactNode;\n}\n\nexport interface ToggleState {\n    isOpen: boolean;\n}\n\nexport default class Toggle extends Component<ToggleProps, ToggleState> {\n    constructor(props: ToggleProps) {\n        super(props);\n\n        this.state = { isOpen: !!props.openByDefault };\n    }\n\n    render(): ReactNode {\n        const {\n            children,\n        } = this.props;\n\n        return children({\n            ...this.state,\n            toggle: this.toggle,\n        });\n    }\n\n    private toggle: () => void = () => {\n        this.setState({ isOpen: !this.state.isOpen });\n    };\n}\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\n\nexport interface EmailFieldProps {\n    onChange?(value: string): void;\n}\n\nconst EmailField: FunctionComponent<EmailFieldProps>  = ({\n    onChange,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <TextInput\n            { ...props.field }\n            autoComplete={ props.field.name }\n            id={ props.field.name }\n            type=\"email\"\n        />\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"customer.email_label\" />\n    ), []);\n\n    return <FormField\n        name=\"email\"\n        labelContent={ labelContent }\n        onChange={ onChange }\n        input={ renderInput }\n    />;\n};\n\nexport default memo(EmailField);\n","import { FieldProps } from 'formik';\nimport React, { memo, Fragment, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Input, Label } from '../ui/form';\n\nexport type SubscribeFieldProps = FieldProps<boolean>;\n\nconst SubscribeField: FunctionComponent<SubscribeFieldProps> = ({ field }) => (\n    <Fragment>\n        <Input\n            { ...field }\n            className=\"form-checkbox\"\n            checked={ field.value }\n            id={ field.name }\n            type=\"checkbox\"\n        />\n\n        <Label htmlFor={ field.name }>\n            <TranslatedString id=\"customer.guest_subscribe_to_newsletter_text\" />\n        </Label>\n    </Fragment>\n);\n\nexport default memo(SubscribeField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent, ReactNode } from 'react';\nimport { object, string } from 'yup';\n\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { BasicFormField, Fieldset, Form, Legend  } from '../ui/form';\n\nimport EmailField from './EmailField';\nimport SubscribeField from './SubscribeField';\n\nexport interface GuestFormProps {\n    canSubscribe: boolean;\n    checkoutButtons?: ReactNode;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    isContinuingAsGuest: boolean;\n    onChangeEmail(email: string): void;\n    onContinueAsGuest(data: GuestFormValues): void;\n    onShowLogin(): void;\n}\n\nexport interface GuestFormValues {\n    email: string;\n    shouldSubscribe: boolean;\n}\n\nconst GuestForm: FunctionComponent<GuestFormProps & WithLanguageProps & FormikProps<GuestFormValues>> = ({\n    canSubscribe,\n    checkoutButtons,\n    isContinuingAsGuest,\n    onChangeEmail,\n    onShowLogin,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        testId=\"checkout-customer-guest\"\n        id=\"checkout-customer-guest\"\n    >\n        <Fieldset legend={\n            <Legend hidden>\n                <TranslatedString id=\"customer.guest_customer_text\" />\n            </Legend>\n        }>\n            <p>\n                <TranslatedHtml id=\"customer.checkout_as_guest_text\" />\n            </p>\n\n            <div className=\"customerEmail-container\">\n                <div className=\"customerEmail-body\">\n                    <EmailField onChange={ onChangeEmail } />\n\n                    { canSubscribe && <BasicFormField\n                        name=\"shouldSubscribe\"\n                        component={ SubscribeField }\n                    /> }\n                </div>\n\n                <div className=\"form-actions customerEmail-action\">\n                    <Button\n                        className=\"customerEmail-button\"\n                        testId=\"customer-continue-as-guest-button\"\n                        id=\"checkout-customer-continue\"\n                        isLoading={ isContinuingAsGuest }\n                        variant={ ButtonVariant.Primary }\n                        type=\"submit\"\n                    >\n                        <TranslatedString id=\"customer.continue_as_guest_action\" />\n                    </Button>\n                </div>\n            </div>\n\n            <p>\n                <TranslatedString id=\"customer.login_text\" />\n                { ' ' }\n                <a\n                    data-test=\"customer-continue-button\"\n                    id=\"checkout-customer-login\"\n                    onClick={ onShowLogin }>\n                    <TranslatedString id=\"customer.login_action\" />\n                </a>\n            </p>\n\n            { checkoutButtons }\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<GuestFormProps & WithLanguageProps, GuestFormValues>({\n    mapPropsToValues: ({\n        email = '',\n        defaultShouldSubscribe = false,\n    }) => ({\n        email,\n        shouldSubscribe: defaultShouldSubscribe,\n    }),\n    handleSubmit: (values, { props: { onContinueAsGuest } }) => {\n        onContinueAsGuest(values);\n    },\n    validationSchema: ({ language }: GuestFormProps & WithLanguageProps) => {\n        const email = string()\n            .email(language.translate('customer.email_invalid_error'))\n            .max(256)\n            .required(language.translate('customer.email_required_error'));\n\n        return object({ email });\n    },\n})(memo(GuestForm)));\n","// NOTE: This is a legacy regex used to create accounts, more flexible than the current used one\n// we need to keep this regex for login validation as accounts might have been created using this regex\nexport const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEye: FunctionComponent = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 576 512\"\n    >\n        <path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEye);\n","import React, { FunctionComponent } from 'react';\n\nimport withIconContainer from './withIconContainer';\n\nconst IconEyeSlash: FunctionComponent = () => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 640 512\"\n    >\n        <path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\" />\n    </svg>\n);\n\nexport default withIconContainer(IconEyeSlash);\n","import { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, TextInput } from '../ui/form';\nimport { IconEye, IconEyeSlash } from '../ui/icon';\nimport { Toggle } from '../ui/toggle';\n\nexport interface PasswordFieldProps {\n    forgotPasswordUrl: string;\n}\n\nconst PasswordField: FunctionComponent<PasswordFieldProps> = ({\n    forgotPasswordUrl,\n}) => {\n    const renderInput = useCallback((props: FieldProps) => (\n        <Toggle openByDefault={ false }>\n            { ({ isOpen, toggle }) => (\n                <div className=\"form-field-password\">\n                    <TextInput\n                        { ...props.field }\n                        id={ props.field.name }\n                        additionalClassName=\"form-input--withIcon\"\n                        type={ isOpen ? 'text' : 'password' }\n                    />\n                    <a href=\"#\" className=\"form-toggle-password form-input-icon\" onClick={ toggle } >\n                        { isOpen ? <IconEye /> : <IconEyeSlash /> }\n                    </a>\n                </div>\n            ) }\n        </Toggle>\n    ), []);\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id={ 'customer.password_label' } />\n    ), []);\n\n    const footer = useMemo(() => (\n        <a\n            data-test=\"forgot-password-link\"\n            href={ forgotPasswordUrl }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n        >\n            <TranslatedString id=\"customer.forgot_password_action\" />\n        </a>\n    ), [forgotPasswordUrl]);\n\n    return <FormField\n        labelContent={ labelContent }\n        name=\"password\"\n        footer={ footer }\n        input={ renderInput }\n    />;\n};\n\nexport default memo(PasswordField);\n","import { withFormik, FormikProps } from 'formik';\nimport React, { memo, FunctionComponent } from 'react';\nimport { object, string } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { withLanguage, TranslatedHtml, TranslatedString, WithLanguageProps } from '../locale';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form, Legend } from '../ui/form';\n\nimport mapErrorMessage from './mapErrorMessage';\nimport { EMAIL_REGEXP } from './validationPatterns';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nexport interface LoginFormProps {\n    canCancel?: boolean;\n    createAccountUrl: string;\n    email?: string;\n    forgotPasswordUrl: string;\n    isSigningIn?: boolean;\n    signInError?: Error;\n    onCancel?(): void;\n    onChangeEmail?(email: string): void;\n    onSignIn(data: LoginFormValues): void;\n}\n\nexport interface LoginFormValues {\n    email: string;\n    password: string;\n}\n\nconst LoginForm: FunctionComponent<LoginFormProps & WithLanguageProps & FormikProps<LoginFormValues>> = ({\n    canCancel,\n    createAccountUrl,\n    forgotPasswordUrl,\n    isSigningIn,\n    language,\n    onCancel,\n    onChangeEmail,\n    signInError,\n}) => (\n    <Form\n        className=\"checkout-form\"\n        testId=\"checkout-customer-returning\"\n        id=\"checkout-customer-returning\"\n    >\n        <Fieldset legend={\n            <Legend hidden>\n                <TranslatedString id=\"customer.returning_customer_text\" />\n            </Legend>\n        }>\n            { signInError && <Alert\n                testId=\"customer-login-error-message\"\n                type={ AlertType.Error }\n            >\n                { mapErrorMessage(signInError, key => language.translate(key)) }\n            </Alert> }\n\n            <p>\n                <TranslatedHtml\n                    data={ { url: createAccountUrl } }\n                    id=\"customer.create_account_to_continue_text\"\n                />\n            </p>\n\n            <EmailField onChange={ onChangeEmail } />\n\n            <PasswordField forgotPasswordUrl={ forgotPasswordUrl } />\n\n            <div className=\"form-actions\">\n                <Button\n                    testId=\"customer-continue-button\"\n                    id=\"checkout-customer-continue\"\n                    isLoading={ isSigningIn }\n                    variant={ ButtonVariant.Primary }\n                    type=\"submit\"\n                >\n                    <TranslatedString id=\"customer.sign_in_action\" />\n                </Button>\n\n                { canCancel && <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    data-test=\"customer-cancel-button\"\n                    href=\"#\"\n                    id=\"checkout-customer-cancel\"\n                    onClick={ preventDefault(onCancel) }\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a> }\n            </div>\n        </Fieldset>\n    </Form>\n);\n\nexport default withLanguage(withFormik<LoginFormProps & WithLanguageProps, LoginFormValues>({\n    mapPropsToValues: ({\n        email = '',\n    }) => ({\n        email,\n        password: '',\n    }),\n    handleSubmit: (values, { props: { onSignIn } }) => {\n        onSignIn(values);\n    },\n    validationSchema: ({ language }: LoginFormProps & WithLanguageProps) => object({\n        email: string()\n            .max(256)\n            .matches(EMAIL_REGEXP, language.translate('customer.email_invalid_error'))\n            .required(language.translate('customer.email_required_error')),\n        password: string()\n            .required(language.translate('customer.password_required_error')),\n    }),\n})(memo(LoginForm)));\n","export default function mapErrorMessage(\n    error: any, // TODO: Export `RequestError`\n    translate: (key: string) => string\n): string {\n    const type = error.body && error.body.type;\n\n    switch (type) {\n    case 'throttled_login':\n        return translate('customer.sign_in_throttled_error');\n\n    case 'reset_password_before_login':\n        return translate('customer.reset_password_before_login_error');\n\n    default:\n        return translate('customer.sign_in_error');\n    }\n}\n","import { CheckoutSelectors, CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, GuestCredentials } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, Fragment, ReactNode } from 'react';\n\nimport { withCheckout, CheckoutContextProps } from '../checkout';\n\nimport CheckoutButtonList from './CheckoutButtonList';\nimport CustomerViewType from './CustomerViewType';\nimport GuestForm, { GuestFormValues } from './GuestForm';\nimport LoginForm from './LoginForm';\n\nexport interface CustomerProps {\n    viewType: CustomerViewType;\n    checkEmbeddedSupport?(methodIds: string[]): void;\n    onChangeViewType?(viewType: CustomerViewType): void;\n    onContinueAsGuest?(): void;\n    onContinueAsGuestError?(error: Error): void;\n    onReady?(): void;\n    onSignIn?(): void;\n    onSignInError?(error: Error): void;\n    onUnhandledError?(error: Error): void;\n    subscribeToNewsletter?(data: { email: string; firstName?: string }): void;\n}\n\ninterface WithCheckoutCustomerProps {\n    canSubscribe: boolean;\n    checkoutButtonIds: string[];\n    createAccountUrl: string;\n    defaultShouldSubscribe: boolean;\n    email?: string;\n    firstName?: string;\n    forgotPasswordUrl: string;\n    isContinuingAsGuest: boolean;\n    isGuestEnabled: boolean;\n    isSigningIn: boolean;\n    signInError?: Error;\n    clearError(error: Error): Promise<CheckoutSelectors>;\n    continueAsGuest(credentials: GuestCredentials): Promise<CheckoutSelectors>;\n    deinitializeCustomer(options: CustomerRequestOptions): Promise<CheckoutSelectors>;\n    initializeCustomer(options: CustomerInitializeOptions): Promise<CheckoutSelectors>;\n    signIn(credentials: CustomerCredentials): Promise<CheckoutSelectors>;\n}\n\nclass Customer extends Component<CustomerProps & WithCheckoutCustomerProps> {\n    private draftEmail?: string;\n\n    componentDidMount(): void {\n        const { onReady = noop } = this.props;\n\n        onReady();\n    }\n\n    render(): ReactNode {\n        const { viewType } = this.props;\n\n        return (\n            <Fragment>\n                { viewType === CustomerViewType.Login && this.renderLoginForm() }\n                { viewType === CustomerViewType.Guest && this.renderGuestForm() }\n            </Fragment>\n        );\n    }\n\n    private renderGuestForm(): ReactNode {\n        const {\n            canSubscribe,\n            checkEmbeddedSupport,\n            checkoutButtonIds,\n            defaultShouldSubscribe,\n            deinitializeCustomer,\n            email,\n            initializeCustomer,\n            isContinuingAsGuest = false,\n            onUnhandledError = noop,\n        } = this.props;\n\n        return (\n            <GuestForm\n                canSubscribe={ canSubscribe }\n                checkoutButtons={\n                    <CheckoutButtonList\n                        checkEmbeddedSupport={ checkEmbeddedSupport }\n                        deinitialize={ deinitializeCustomer }\n                        initialize={ initializeCustomer }\n                        methodIds={ checkoutButtonIds }\n                        onError={ onUnhandledError }\n                    />\n                }\n                email={ this.draftEmail || email }\n                defaultShouldSubscribe={ defaultShouldSubscribe }\n                isContinuingAsGuest={ isContinuingAsGuest }\n                onChangeEmail={ this.handleChangeEmail }\n                onContinueAsGuest={ this.handleContinueAsGuest }\n                onShowLogin={ this.handleShowLogin }\n            />\n        );\n    }\n\n    private renderLoginForm(): ReactNode {\n        const {\n            createAccountUrl,\n            email,\n            forgotPasswordUrl,\n            isGuestEnabled,\n            isSigningIn,\n            signInError,\n        } = this.props;\n\n        return (\n            <LoginForm\n                canCancel={ isGuestEnabled }\n                createAccountUrl={ createAccountUrl }\n                email={ this.draftEmail || email }\n                forgotPasswordUrl={ forgotPasswordUrl }\n                isSigningIn={ isSigningIn }\n                signInError={ signInError }\n                onCancel={ this.handleCancelSignIn }\n                onChangeEmail={ this.handleChangeEmail }\n                onSignIn={ this.handleSignIn }\n            />\n        );\n    }\n\n    private handleContinueAsGuest: (formValues: GuestFormValues) => Promise<void> = async formValues => {\n        const {\n            canSubscribe,\n            continueAsGuest,\n            firstName,\n            onContinueAsGuest = noop,\n            onContinueAsGuestError = noop,\n            subscribeToNewsletter = noop,\n        } = this.props;\n\n        if (canSubscribe && formValues.shouldSubscribe) {\n            subscribeToNewsletter({ email: formValues.email, firstName });\n        }\n\n        try {\n            await continueAsGuest({ email: formValues.email });\n            onContinueAsGuest();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onContinueAsGuestError(error);\n        }\n    };\n\n    private handleSignIn: (credentials: CustomerCredentials) => Promise<void> = async credentials => {\n        const {\n            signIn,\n            onSignIn = noop,\n            onSignInError = noop,\n        } = this.props;\n\n        try {\n            await signIn(credentials);\n            onSignIn();\n\n            this.draftEmail = undefined;\n        } catch (error) {\n            onSignInError(error);\n        }\n    };\n\n    private handleCancelSignIn: () => void = () => {\n        const {\n            clearError,\n            onChangeViewType = noop,\n            signInError,\n        } = this.props;\n\n        if (signInError) {\n            clearError(signInError);\n        }\n\n        onChangeViewType(CustomerViewType.Guest);\n    };\n\n    private handleChangeEmail: (email: string) => void = email => {\n        this.draftEmail = email;\n    };\n\n    private handleShowLogin: () => void = () => {\n        const { onChangeViewType = noop } = this.props;\n\n        onChangeViewType(CustomerViewType.Login);\n    };\n}\n\nexport function mapToWithCheckoutCustomerProps(\n    { checkoutService, checkoutState }: CheckoutContextProps\n): WithCheckoutCustomerProps | null {\n    const {\n        data: { getBillingAddress, getCheckout, getCustomer, getConfig },\n        errors: { getSignInError },\n        statuses: { isContinuingAsGuest, isSigningIn },\n    } = checkoutState;\n\n    const billingAddress = getBillingAddress();\n    const checkout = getCheckout();\n    const customer = getCustomer();\n    const config = getConfig();\n\n    if (!billingAddress || !checkout || !customer || !config) {\n        return null;\n    }\n\n    return {\n        canSubscribe: config.shopperConfig.showNewsletterSignup,\n        checkoutButtonIds: config.checkoutSettings.remoteCheckoutProviders,\n        clearError: checkoutService.clearError,\n        continueAsGuest: checkoutService.continueAsGuest,\n        createAccountUrl: config.links.createAccountLink,\n        defaultShouldSubscribe: config.shopperConfig.defaultNewsletterSignup,\n        deinitializeCustomer: checkoutService.deinitializeCustomer,\n        email: billingAddress.email || customer.email,\n        firstName: customer.firstName,\n        forgotPasswordUrl: config.links.forgotPasswordLink,\n        initializeCustomer: checkoutService.initializeCustomer,\n        isContinuingAsGuest: isContinuingAsGuest(),\n        isGuestEnabled: config.checkoutSettings.guestCheckoutEnabled,\n        isSigningIn: isSigningIn(),\n        signIn: checkoutService.signInCustomer,\n        signInError: getSignInError(),\n    };\n}\n\nexport default withCheckout(mapToWithCheckoutCustomerProps)(Customer);\n"],"sourceRoot":""}