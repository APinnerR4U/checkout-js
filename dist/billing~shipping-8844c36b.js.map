{"version":3,"sources":["webpack://checkout/./src/app/ui/form/CheckboxInput.tsx","webpack://checkout/./src/app/address/isEqualAddress.ts","webpack://checkout/./src/app/shipping/getShippableItemsCount.ts","webpack://checkout/./src/app/ui/dropdown/DropdownTrigger.tsx","webpack://checkout/./src/app/ui/form/TextArea.tsx","webpack://checkout/./src/app/address/mapAddressFromFormValues.ts","webpack://checkout/./src/app/address/isValidCustomerAddress.ts","webpack://checkout/./src/app/address/AddressSelect.tsx","webpack://checkout/./src/app/orderComments/OrderComments.tsx","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelector.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorUk.ts","webpack://checkout/./src/app/address/googleAutocomplete/AddressSelectorFactory.ts","webpack://checkout/./src/app/address/getFormFieldInputId.ts","webpack://checkout/./src/app/ui/popover/Popover.tsx","webpack://checkout/./src/app/ui/popover/PopoverList.tsx","webpack://checkout/./src/app/address/googleAutocomplete/getGoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/ui/autocomplete/Autocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteScriptLoader.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteService.ts","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocomplete.tsx","webpack://checkout/./src/app/address/googleAutocomplete/GoogleAutocompleteFormField.tsx","webpack://checkout/./src/app/ui/form/RadioInput.tsx","webpack://checkout/./src/app/address/DynamicInput.tsx","webpack://checkout/./src/app/address/MultiCheckboxControl.tsx","webpack://checkout/./src/app/address/CheckboxGroupFormField.tsx","webpack://checkout/./src/app/address/DynamicFormField.tsx","webpack://checkout/./src/app/address/AddressForm.tsx","webpack://checkout/./src/app/address/googleAutocomplete/mapToAddress.ts"],"names":["CheckboxInput","ref","additionalClassName","label","id","rest","className","type","htmlFor","isEqualAddress","address1","address2","normalizeAddress","address","customFields","filter","fieldValue","getShippableItemsCount","cart","lineItems","physicalItems","item","addedByPromotion","state","shouldShow","handleClick","event","handleClose","nativeEvent","handleOpen","setState","document","addEventListener","removeEventListener","componentWillUnmount","this","render","children","placement","dropdown","onClick","modifiers","hide","enabled","flip","preventOverflow","style","width","zIndex","defaultProps","TextArea","testId","mapAddressFromFormValues","formValues","customFieldsObject","value","key","padMonth","getMonth","toString","padDay","getDate","getFullYear","push","fieldId","isValidCustomerAddress","addresses","formFields","customerAddress","handleSelectAddress","newAddress","onSelectAddress","selectedAddress","handleUseNewAddress","onUseNewAddress","role","AddressSelectMenu","AddressSelectButton","href","map","AddressSelect","renderLabel","name","hidden","renderInput","field","autoComplete","maxLength","legend","input","googlePlace","address_components","_name","_address","getState","_get","getStreet","getStreet2","getCity","getCountry","getPostCode","access","element","find","types","indexOf","create","autocompleteData","addressSelector","ADDRESS_FIELD_IDS","postalCode","stateOrProvince","stateOrProvinceCode","getFormFieldLegacyName","getFormFieldInputId","getItemClassName","highlightedIndex","index","classes","join","instance","getItemProps","menuProps","items","length","content","stateReducer","changes","onChange","stateChangeTypes","blurInput","blurButton","mouseUp","touchEnd","inputValue","changeInput","isOpen","keyDownEnter","handleStateChange","onToggleOpen","undefined","inputProps","initialValue","initialHighlightedIndex","onSelect","listTestId","defaultHighlightedIndex","initialInputValue","itemToString","onStateChange","getInputProps","getMenuProps","toPopoverItem","highlightItem","highlightedSlices","lastIndex","reduce","node","slice","i","offset","notHighlightedLength","substr","_scriptLoader","loadMapsSdk","apiKey","_googleAutoComplete","Promise","resolve","reject","params","window","autocompleteWindow","Boolean","google","maps","places","isAutocompleteWindow","loadScript","catch","e","_apiKey","getAutocompleteService","_autocompletePromise","then","googleMapsSdk","AutocompleteService","Error","getPlacesServices","createElement","_placesPromise","PlacesService","props","fields","nextElement","googleAutocompleteService","service","getDetails","placeId","result","focus","isAutocompleteEnabled","resetAutocomplete","setAutocomplete","setItems","componentRestrictions","getPlacePredictions","results","toAutocompleteItems","description","structured_formatting","main_text","matched_substrings","place_id","countryCode","supportedCountries","parentFieldName","fieldName","labelContent","TranslatedString","country","FormField","checked","Input","Label","fieldType","options","placeholder","handleDateChange","date","target","DynamicFormFieldType","optionValue","radio","checkbox","Array","isArray","includes","calendarClassName","maxDate","max","Date","minDate","min","placeholderText","popperClassName","selected","multiline","TextInput","password","onSelectedAll","onSelectedNone","handleSelectAllClick","preventDefault","handleSelectNoneClick","MultiCheckboxFormField","form","values","errors","pop","remove","handleSelectAll","checkedValues","forEach","val","handleSelectNone","handleInputChange","FormFieldContainer","hasError","FormFieldError","renderField","renderProps","LABEL","city","company","firstName","lastName","phone","AUTOCOMPLETE","custom","required","addressFieldName","fieldInputId","translatedLabelString","fieldLabel","helperLabel","rows","PLACEHOLDER","AUTOCOMPLETE_FIELD_NAME","containerRef","handleDynamicFormFieldChange","syncNonFormikValue","handleAutocompleteChange","handleAutocompleteSelect","place","countries","setFieldValue","accessor","c","code","street2","stateName","states","subdivisions","mapToAddress","autocompleteValue","dateFormFieldNames","componentDidMount","current","querySelector","language","countriesWithAutocomplete","googleMapsApiKey","onAutocompleteToggle","translatedPlaceholderId","getDynamicFormFieldType","translate","secret","number","text","telephone","withLanguage"],"mappings":"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","file":"billing~shipping-8844c36b.js","sourcesContent":["import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface CheckboxInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst CheckboxInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        id,\n        ...rest\n    }: CheckboxInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            className={ classNames(\n                'form-checkbox',\n                'optimizedCheckout-form-checkbox',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"checkbox\"\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default CheckboxInput;\n","import { Address, AddressRequestBody, BillingAddress, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport { isEqual, omit } from 'lodash';\n\ntype ComparableAddress = CustomerAddress | Address | BillingAddress | AddressRequestBody;\ntype ComparableAddressFields = keyof CustomerAddress | keyof Address | keyof BillingAddress;\n\nexport default function isEqualAddress(address1?: ComparableAddress, address2?: ComparableAddress): boolean {\n    if (!address1 || !address2) {\n        return false;\n    }\n\n    return isEqual(\n        normalizeAddress(address1),\n        normalizeAddress(address2)\n    );\n}\n\nfunction normalizeAddress(address: ComparableAddress) {\n    const ignoredFields: ComparableAddressFields[] = ['id', 'stateOrProvinceCode', 'type', 'email'];\n\n    return omit(\n        {\n            ...address,\n            customFields: (address.customFields || []).filter(({ fieldValue }) => !!fieldValue),\n        },\n        ignoredFields\n    );\n}\n","import { Cart } from '@bigcommerce/checkout-sdk';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { Placement } from 'popper.js';\nimport React, { Component, MouseEventHandler, ReactNode } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\n\nexport interface DropdownTriggerProps {\n    placement?: Placement;\n    dropdown: ReactNode;\n}\n\nexport interface DropdownTriggerState {\n    shouldShow: boolean;\n}\n\nexport default class DropdownTrigger extends Component<DropdownTriggerProps, DropdownTriggerState> {\n    static defaultProps = {\n        placement: 'bottom-start',\n    };\n\n    state: Readonly<DropdownTriggerState> = {\n        shouldShow: false,\n    };\n\n    componentWillUnmount(): void {\n        document.removeEventListener('click', this.handleClose);\n    }\n\n    render() {\n        const { children, placement, dropdown } = this.props;\n        const { shouldShow } = this.state;\n\n        return (\n            <Manager>\n                <Reference>\n                    { ({ ref }) => (\n                        <div\n                            className=\"dropdownTrigger\"\n                            onClick={ this.handleClick }\n                            ref={ ref }\n                        >\n                            { children }\n                        </div>\n                    ) }\n                </Reference>\n\n                <Popper\n                    modifiers={ {\n                        hide: { enabled: false },\n                        flip: { enabled: false },\n                        preventOverflow: { enabled: false },\n                    } }\n                    placement={ placement }\n                >\n                    { ({ ref, style }) => !shouldShow ? null : (\n                        <div\n                            className=\"dropdownMenu\"\n                            ref={ ref }\n                            style={ {\n                                ...style,\n                                width: '100%',\n                                zIndex: 1,\n                            } }\n                        >\n                            { dropdown }\n                        </div>\n                    ) }\n                </Popper>\n            </Manager>\n        );\n    }\n\n    private handleClick: MouseEventHandler<HTMLElement> = event => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            this.handleClose(event.nativeEvent);\n        } else {\n            this.handleOpen(event.nativeEvent);\n        }\n    };\n\n    private handleOpen: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: true }, () => {\n            document.addEventListener('click', this.handleClose);\n        });\n    };\n\n    private handleClose: (event: MouseEvent) => void = () => {\n        const { shouldShow } = this.state;\n\n        if (!shouldShow) {\n            return;\n        }\n\n        this.setState({ shouldShow: false }, () => {\n            document.removeEventListener('click', this.handleClose);\n        });\n    };\n}\n","import classNames from 'classnames';\nimport React, { forwardRef, Ref, TextareaHTMLAttributes } from 'react';\n\nexport interface TextAreaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {\n    additionalClassName?: string;\n    testId?: string;\n}\n\nconst TextArea = forwardRef((\n    { additionalClassName, testId, className, ...rest }: TextAreaProps,\n    ref: Ref<HTMLTextAreaElement>\n) => (\n    <textarea\n        { ...rest }\n        className={ className || classNames(\n            'form-input',\n            'optimizedCheckout-form-input',\n            additionalClassName\n        ) }\n        data-test={ testId }\n        ref={ ref }\n    />\n));\n\nexport default TextArea;\n","import { Address } from '@bigcommerce/checkout-sdk';\nimport { forIn, isDate, padStart } from 'lodash';\n\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport default function mapAddressFromFormValues(formValues: AddressFormValues): Address {\n    const { customFields: customFieldsObject, ...address } = formValues;\n    const customFields: Array<{fieldId: string; fieldValue: string}> = [];\n\n    forIn(customFieldsObject, (value, key) => {\n        let fieldValue: string;\n\n        if (isDate(value)) {\n            const padMonth = padStart((value.getMonth() + 1).toString(), 2, '0');\n            const padDay = padStart((value.getDate()).toString(), 2, '0');\n            fieldValue = `${value.getFullYear()}-${padMonth}-${padDay}`;\n        } else {\n            fieldValue = value;\n        }\n\n        customFields.push({\n            fieldId: key,\n            fieldValue,\n        });\n    });\n\n    return {\n        ...address,\n        customFields,\n    };\n}\n","import { Address, CustomerAddress, FormField } from '@bigcommerce/checkout-sdk';\nimport { some } from 'lodash';\n\nimport isEqualAddress from './isEqualAddress';\nimport isValidAddress from './isValidAddress';\n\nexport default function isValidCustomerAddress(\n    address: Address | undefined,\n    addresses: CustomerAddress[],\n    formFields: FormField[]\n): boolean {\n    if (!address || !isValidAddress(address, formFields)) {\n        return false;\n    }\n\n    return some(addresses, customerAddress => isEqualAddress(customerAddress, address));\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { memo, FunctionComponent, PureComponent, ReactNode } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { DropdownTrigger } from '../ui/dropdown';\n\nimport isEqualAddress from './isEqualAddress';\nimport StaticAddress from './StaticAddress';\n\nexport interface AddressSelectProps {\n    addresses: CustomerAddress[];\n    selectedAddress?: Address;\n    onSelectAddress(address: Address): void;\n    onUseNewAddress(currentAddress?: Address): void;\n}\n\nclass AddressSelect extends PureComponent<AddressSelectProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            selectedAddress,\n        } = this.props;\n\n        return (\n            <div className=\"form-field\">\n                <div className=\"dropdown--select\" role=\"combobox\">\n                    <DropdownTrigger\n                        dropdown={\n                            <AddressSelectMenu\n                                addresses={ addresses }\n                                onSelectAddress={ this.handleSelectAddress }\n                                onUseNewAddress={ this.handleUseNewAddress }\n                                selectedAddress={ selectedAddress }\n                            />\n                        }\n                    >\n                        <AddressSelectButton\n                            addresses={ addresses }\n                            selectedAddress={ selectedAddress }\n                        />\n                    </DropdownTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    private handleSelectAddress: (newAddress: Address) => void = (newAddress: Address) => {\n        const {\n            onSelectAddress,\n            selectedAddress,\n        } = this.props;\n\n        if (!isEqualAddress(selectedAddress, newAddress)) {\n            onSelectAddress(newAddress);\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        const {\n            selectedAddress,\n            onUseNewAddress,\n        } = this.props;\n\n        onUseNewAddress(selectedAddress);\n    };\n}\n\nconst AddressSelectMenu: FunctionComponent<AddressSelectProps> = ({\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n    selectedAddress,\n}) => (\n    <ul\n        className=\"dropdown-menu instrumentSelect-dropdownMenu\"\n        id=\"addressDropdown\"\n    >\n        <li className=\"dropdown-menu-item dropdown-menu-item--select\">\n            <a href=\"#\" onClick={ preventDefault(() => onUseNewAddress(selectedAddress)) }>\n                <TranslatedString id=\"address.enter_address_action\" />\n            </a>\n        </li>\n        { addresses.map(address => (\n            <li\n                className=\"dropdown-menu-item dropdown-menu-item--select\"\n                key={ address.id }\n            >\n                <a href=\"#\" onClick={ preventDefault(() => onSelectAddress(address)) }>\n                    <StaticAddress address={ address } />\n                </a>\n            </li>\n        )) }\n    </ul>\n);\n\ntype AddressSelectButtonProps = Pick<AddressSelectProps, 'selectedAddress' | 'addresses'>;\n\nconst AddressSelectButton: FunctionComponent<AddressSelectButtonProps> = ({\n    selectedAddress,\n}) => (\n    <a\n        className=\"button dropdown-button dropdown-toggle--select\"\n        href=\"#\"\n        id=\"addressToggle\"\n        onClick={ preventDefault() }\n    >\n        { selectedAddress ?\n            <StaticAddress address={ selectedAddress } /> :\n            <TranslatedString id=\"address.enter_address_action\" /> }\n    </a>\n);\n\nexport default memo(AddressSelect);\n","import { FieldProps } from 'formik';\nimport React, { useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { Fieldset, FormField, Label, Legend, TextInput } from '../ui/form';\n\nconst OrderComments: FunctionComponent = () => {\n    const renderLabel = useCallback(name => (\n        <Label hidden htmlFor={ name }>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Label>\n    ), []);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <TextInput\n            { ...field }\n            autoComplete={ 'off' }\n            maxLength={ 2000 }\n        />\n    ), []);\n\n    const legend = useMemo(() => (\n        <Legend>\n            <TranslatedString id=\"shipping.order_comment_label\" />\n        </Legend>\n    ), []);\n\n    return <Fieldset legend={ legend } testId=\"checkout-shipping-comments\">\n        <FormField\n            input={ renderInput }\n            label={ renderLabel }\n            name=\"orderComment\"\n        />\n    </Fieldset>;\n};\n\nexport default OrderComments;\n","import { GoogleAddressFieldType } from './googleAutocompleteTypes';\n\nexport default class AddressSelector {\n    protected _address: google.maps.GeocoderAddressComponent[] | undefined;\n    protected _name: string;\n\n    constructor(\n        googlePlace: google.maps.places.PlaceResult\n    ) {\n        const { address_components, name } = googlePlace;\n\n        this._name = name;\n        this._address = address_components;\n    }\n\n    getState(): string {\n        return this._get('administrative_area_level_1', 'short_name');\n    }\n\n    getStreet(): string {\n        return this._name;\n    }\n\n    getStreet2(): string {\n        return '';\n    }\n\n    getCity(): string {\n        return this._get('postal_town', 'long_name') ||\n            this._get('locality', 'long_name') ||\n            this._get('neighborhood', 'short_name');\n    }\n\n    getCountry(): string {\n        return this._get('country', 'short_name');\n    }\n\n    getPostCode(): string {\n        return this._get('postal_code', 'short_name');\n    }\n\n    protected _get(\n        type: GoogleAddressFieldType,\n        access: Exclude<keyof google.maps.GeocoderAddressComponent, 'types'>\n    ): string {\n        const element = this._address && this._address.find(field => field.types.indexOf(type) !== -1);\n\n        if (element) {\n            return element[access];\n        }\n\n        return '';\n    }\n}\n","import AddressSelector from './AddressSelector';\n\nexport default class AddressSelectorUK extends AddressSelector {\n    getState(): string {\n        return this._get('administrative_area_level_2', 'long_name');\n    }\n\n    getStreet2(): string {\n        return this._get('locality', 'long_name');\n    }\n}\n","import AddressSelector from './AddressSelector';\nimport AddressSelectorUK from './AddressSelectorUk';\n\nexport default class AddressSelectorFactory {\n    static create(autocompleteData: google.maps.places.PlaceResult): AddressSelector {\n        const addressSelector = new AddressSelector(autocompleteData);\n\n        switch (addressSelector.getCountry()) {\n        case 'GB':\n            return new AddressSelectorUK(autocompleteData);\n        }\n\n        return addressSelector;\n    }\n}\n","import { AddressKeyMap } from './DynamicFormField';\n\nexport const ADDRESS_FIELD_IDS: AddressKeyMap = {\n    address1: 'addressLine1',\n    address2: 'addressLine2',\n    postalCode: 'postCode',\n    stateOrProvince: 'province',\n    stateOrProvinceCode: 'provinceCode',\n};\n\nexport function getFormFieldLegacyName(name: string): string {\n    return `${ADDRESS_FIELD_IDS[name] || name}`;\n}\n\nexport function getFormFieldInputId(name: string): string {\n    return `${getFormFieldLegacyName(name)}Input`;\n}\n","import React, { FunctionComponent } from 'react';\n\nimport './Popover.scss';\n\nexport interface PopoverProps {\n    children: React.ReactNode;\n}\n\nconst Popover: FunctionComponent<PopoverProps> = ({ children }) => {\n    return (\n        <div className=\"popover\">\n            { children }\n        </div>\n    );\n};\n\nexport default Popover;\n","import React, { memo, FunctionComponent } from 'react';\n\nimport './PopoverList.scss';\n\nexport interface PopoverListProps {\n    menuProps?: any;\n    highlightedIndex?: number;\n    getItemProps?: any;\n    items: PopoverListItem[];\n    testId?: string;\n}\n\nexport interface PopoverListItem {\n    id: string;\n    content: React.ReactChild[] | React.ReactChild;\n}\n\nconst PopoverList: FunctionComponent<PopoverListProps> = ({\n    highlightedIndex = -1,\n    testId,\n    getItemProps = (props: any) => props,\n    menuProps = {},\n    items,\n}) => {\n    if (!items || !items.length) {\n        return null;\n    }\n\n    return (\n        <ul\n            className=\"popoverList\"\n            data-test={ testId } { ...menuProps }\n        >\n            { items\n                .map((item, index) => (\n                    <li\n                        className={ getItemClassName(highlightedIndex, index) }\n                        data-test={ testId && `${testId}-item` }\n                        { ...getItemProps({\n                            key: item.id,\n                            index,\n                            item,\n                        }) }\n                        key={ index }\n                    >\n                        { item.content }\n                    </li>\n                )) }\n        </ul>\n    );\n};\n\nfunction getItemClassName(highlightedIndex: number, index: number): string {\n    const classes = ['popoverList-item'];\n\n    if (highlightedIndex === index) {\n        classes.push('is-active');\n    }\n\n    return classes.join(' ');\n}\n\nexport default memo(PopoverList);\n","import GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nlet instance: GoogleAutocompleteScriptLoader;\n\nexport default function getGoogleAutocompleteScriptLoader(): GoogleAutocompleteScriptLoader {\n    if (!instance) {\n        instance = new GoogleAutocompleteScriptLoader();\n    }\n\n    return instance;\n}\n","import Downshift, { DownshiftState, StateChangeOptions } from 'downshift';\nimport { isNumber, noop } from 'lodash';\nimport React, { Fragment, PureComponent, ReactChild, ReactNode } from 'react';\n\nimport { Popover, PopoverList, PopoverListItem } from '../popover';\n\nimport AutocompleteItem from './autocomplete-item';\n\nexport interface AutocompleteProps {\n    initialValue?: string;\n    initialHighlightedIndex?: number;\n    children?: ReactNode;\n    items: AutocompleteItem[];\n    inputProps?: any;\n    listTestId?: string;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onSelect?(item: AutocompleteItem): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\nclass Autocomplete extends PureComponent<AutocompleteProps> {\n    render(): ReactNode {\n        const {\n            inputProps,\n            initialValue,\n            initialHighlightedIndex,\n            items,\n            children,\n            onSelect,\n            listTestId,\n        } = this.props;\n\n        return (\n            <Downshift\n                defaultHighlightedIndex={ 0 }\n                initialHighlightedIndex={ initialHighlightedIndex }\n                initialInputValue={ initialValue }\n                itemToString={ this.itemToString }\n                onChange={ onSelect }\n                onStateChange={ this.handleStateChange }\n                stateReducer={ this.stateReducer }\n            >\n                { ({\n                    isOpen,\n                    getInputProps,\n                    getMenuProps,\n                    getItemProps,\n                    highlightedIndex,\n                }) => (\n                    <div>\n                        <input\n                            { ...getInputProps() }\n                            { ...inputProps }\n                        />\n                        { isOpen && !!items.length &&\n                            <Popover>\n                                <PopoverList\n                                    getItemProps={ getItemProps }\n                                    highlightedIndex={ isNumber(highlightedIndex) ? highlightedIndex : -1 }\n                                    items={ items.map(item => this.toPopoverItem(item)) }\n                                    menuProps={ getMenuProps() }\n                                    testId={ listTestId }\n                                />\n                                { children }\n                            </Popover> }\n                    </div>\n                ) }\n            </Downshift>\n        );\n    }\n\n    private toPopoverItem(item: AutocompleteItem): PopoverListItem {\n        return {\n            ...item,\n            content: this.highlightItem(item),\n        };\n    }\n\n    private highlightItem(item: AutocompleteItem): ReactChild[] | ReactChild {\n        if (!item.highlightedSlices || !item.highlightedSlices.length) {\n            return item.label;\n        }\n\n        let lastIndex: number = 0;\n        let key = 0;\n\n        return item.highlightedSlices.reduce((node, slice, i) => {\n            const { label } = item;\n            const { offset, length } = slice;\n            const notHighlightedLength = offset - lastIndex;\n\n            if (notHighlightedLength) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex, notHighlightedLength) }\n                </Fragment>);\n                key += 1;\n            }\n\n            lastIndex  = offset + length;\n\n            node.push(<strong key={ key }>{ label.substr(offset, length) }</strong>);\n            key += 1;\n\n            if (i === (item.highlightedSlices || []).length - 1) {\n                node.push(<Fragment key={ key }>\n                    { label.substr(lastIndex) }\n                </Fragment>);\n                key += 1;\n            }\n\n            return node;\n        }, [] as ReactChild[]);\n    }\n\n    private itemToString(item?: AutocompleteItem): string {\n        return item && item.value || '';\n    }\n\n    private stateReducer: (\n        state: DownshiftState<AutocompleteItem>,\n        changes: StateChangeOptions<AutocompleteItem>\n    ) => Partial<StateChangeOptions<AutocompleteItem>> = (state, changes) => {\n        const { onChange } = this.props;\n\n        switch (changes.type) {\n        case Downshift.stateChangeTypes.blurInput:\n        case Downshift.stateChangeTypes.blurButton:\n        case Downshift.stateChangeTypes.mouseUp:\n        case Downshift.stateChangeTypes.touchEnd:\n            return {\n                ...changes,\n                inputValue: state.inputValue,\n            };\n\n        case Downshift.stateChangeTypes.changeInput:\n            if (changes.inputValue !== state.inputValue && onChange) {\n                onChange(changes.inputValue || '', state.isOpen);\n            }\n\n            return changes;\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n            return changes;\n\n        default:\n            return changes;\n        }\n        };\n\n    private handleStateChange = ({ isOpen, inputValue }: StateChangeOptions<string>) => {\n        const { onToggleOpen = noop } = this.props;\n\n        if (isOpen !== undefined) {\n            onToggleOpen({ isOpen, inputValue: inputValue || '' });\n        }\n    };\n}\n\nexport default Autocomplete;\n","import { getScriptLoader, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { GoogleAutocompleteWindow, GoogleMapsSdk } from './googleAutocompleteTypes';\n\nexport default class GoogleAutocompleteScriptLoader {\n    private _scriptLoader: ScriptLoader;\n    private _googleAutoComplete?: Promise<GoogleMapsSdk>;\n\n    constructor() {\n        this._scriptLoader = getScriptLoader();\n    }\n\n    loadMapsSdk(apiKey: string): Promise<GoogleMapsSdk> {\n        if (this._googleAutoComplete) {\n            return this._googleAutoComplete;\n        }\n\n        this._googleAutoComplete = new Promise((resolve, reject) => {\n            const callbackName = 'initAutoComplete';\n            const params = [\n                'language=en',\n                `key=${apiKey}`,\n                'libraries=places',\n                `callback=${callbackName}`,\n            ].join('&');\n\n            (window as GoogleCallbackWindow)[callbackName] = () => {\n                if (isAutocompleteWindow(window)) {\n                    resolve(window.google.maps);\n                }\n\n                reject();\n            };\n\n            this._scriptLoader.loadScript(`//maps.googleapis.com/maps/api/js?${params}`)\n                .catch(e => {\n                    this._googleAutoComplete = undefined;\n                    throw e;\n                });\n        });\n\n        return this._googleAutoComplete;\n    }\n}\n\nfunction isAutocompleteWindow(window: Window): window is GoogleAutocompleteWindow {\n    const autocompleteWindow = window as GoogleAutocompleteWindow;\n\n    return Boolean(autocompleteWindow.google &&\n        autocompleteWindow.google.maps &&\n        autocompleteWindow.google.maps.places);\n}\n\nexport interface GoogleCallbackWindow extends Window {\n    initAutoComplete?(): void;\n}\n","import getGoogleAutocompleteScriptLoader from './getGoogleAutocompleteScriptLoader';\nimport GoogleAutocompleteScriptLoader from './GoogleAutocompleteScriptLoader';\n\nexport default class GoogleAutocompleteService {\n    private _autocompletePromise?: Promise<google.maps.places.AutocompleteService>;\n    private _placesPromise?: Promise<google.maps.places.PlacesService>;\n\n    constructor(\n        private _apiKey: string,\n        private _scriptLoader: GoogleAutocompleteScriptLoader = getGoogleAutocompleteScriptLoader()\n    ) {}\n\n    getAutocompleteService(): Promise<google.maps.places.AutocompleteService> {\n        if (!this._autocompletePromise) {\n            this._autocompletePromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.AutocompleteService) {\n                        throw new Error('`AutocompleteService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.AutocompleteService();\n                });\n        }\n\n        return this._autocompletePromise;\n    }\n\n    getPlacesServices(): Promise<google.maps.places.PlacesService> {\n        const node = document.createElement('div');\n\n        if (!this._placesPromise) {\n            this._placesPromise = this._scriptLoader.loadMapsSdk(this._apiKey)\n                .then(googleMapsSdk => {\n                    if (!googleMapsSdk.places.PlacesService) {\n                        throw new Error('`PlacesService` is undefined');\n                    }\n\n                    return new googleMapsSdk.places.PlacesService(node);\n                });\n        }\n\n        return this._placesPromise;\n    }\n}\n","import { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { Autocomplete, AutocompleteItem } from '../../ui/autocomplete';\n\nimport { GoogleAutocompleteOptionTypes } from './googleAutocompleteTypes';\nimport './GoogleAutocomplete.scss';\nimport GoogleAutocompleteService from './GoogleAutocompleteService';\n\ninterface GoogleAutocompleteProps {\n    initialValue?: string;\n    componentRestrictions?: google.maps.places.ComponentRestrictions;\n    fields?: string[];\n    apiKey: string;\n    nextElement?: HTMLElement;\n    inputProps?: any;\n    isAutocompleteEnabled?: boolean;\n    types?: GoogleAutocompleteOptionTypes[];\n    onSelect?(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(value: string, isOpen: boolean): void;\n}\n\ninterface GoogleAutocompleteState {\n    items: AutocompleteItem[];\n    autoComplete: string;\n}\n\nclass GoogleAutocomplete extends PureComponent<GoogleAutocompleteProps, GoogleAutocompleteState> {\n    googleAutocompleteService: GoogleAutocompleteService;\n\n    constructor(props: GoogleAutocompleteProps) {\n        super(props);\n        this.googleAutocompleteService = new GoogleAutocompleteService(props.apiKey);\n        this.state = {\n            items: [],\n            autoComplete: 'off',\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            initialValue,\n            onToggleOpen = noop,\n            inputProps = {},\n        } = this.props;\n\n        const {\n            autoComplete,\n            items,\n        } = this.state;\n\n        return (\n            <Autocomplete\n                initialHighlightedIndex={ 0 }\n                initialValue={ initialValue }\n                inputProps={ {\n                    ...inputProps,\n                    autoComplete,\n                } }\n                items={ items }\n                listTestId=\"address-autocomplete-suggestions\"\n                onChange={ this.onChange }\n                onSelect={ this.onSelect }\n                onToggleOpen={ onToggleOpen }\n            >\n                <div className=\"co-googleAutocomplete-footer\" />\n            </Autocomplete>\n        );\n    }\n\n    private onSelect: (item: AutocompleteItem) => void = item => {\n        const {\n            fields,\n            onSelect = noop,\n            nextElement,\n        } = this.props;\n\n        this.googleAutocompleteService.getPlacesServices().then(service => {\n            service.getDetails({\n                placeId: item.id,\n                fields: fields || ['address_components', 'name'],\n            }, result => {\n                if (nextElement) {\n                    nextElement.focus();\n                }\n\n                onSelect(result, item);\n            });\n        });\n    };\n\n    private onChange: (input: string) => void = input => {\n        const {\n            isAutocompleteEnabled,\n            onChange = noop,\n        } = this.props;\n\n        onChange(input, false);\n\n        if (!isAutocompleteEnabled) {\n            return this.resetAutocomplete();\n        }\n\n        this.setAutocomplete(input);\n        this.setItems(input);\n    };\n\n    private setItems(input: string): void {\n        if (!input) {\n            this.setState({ items: [] });\n\n            return;\n        }\n\n        const {\n            componentRestrictions,\n            types,\n        } = this.props;\n\n        this.googleAutocompleteService.getAutocompleteService().then(service => {\n            service.getPlacePredictions({\n                input,\n                types: types || ['geocode'],\n                componentRestrictions,\n            }, results =>\n                this.setState({ items: this.toAutocompleteItems(results) })\n            );\n        });\n    }\n\n    private resetAutocomplete(): void {\n        this.setState({\n            items: [],\n            autoComplete: 'off',\n        });\n    }\n\n    private setAutocomplete(input: string): void {\n        this.setState({\n            ...this.state,\n            autoComplete: input && input.length ? 'nope' : 'off',\n        });\n    }\n\n    private toAutocompleteItems(results?: google.maps.places.AutocompletePrediction[]): AutocompleteItem[] {\n        return (results || []).map(result => ({\n            label: result.description,\n            value: result.structured_formatting.main_text,\n            highlightedSlices: result.matched_substrings,\n            id: result.place_id,\n        }));\n    }\n}\n\nexport default GoogleAutocomplete;\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../../locale';\nimport { AutocompleteItem } from '../../ui/autocomplete';\nimport { FormField } from '../../ui/form';\nimport { getFormFieldInputId } from '../getFormFieldInputId';\n\nimport GoogleAutocomplete from './GoogleAutocomplete';\n\nexport interface GoogleAutocompleteFormFieldProps {\n    apiKey: string;\n    field: FormFieldType;\n    countryCode?: string;\n    supportedCountries: string[];\n    nextElement?: HTMLElement;\n    parentFieldName?: string;\n    onSelect(place: google.maps.places.PlaceResult, item: AutocompleteItem): void;\n    onToggleOpen?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange(value: string, isOpen: boolean): void;\n}\n\nconst GoogleAutocompleteFormField: FunctionComponent<GoogleAutocompleteFormFieldProps>  = ({\n    field: {\n        name,\n    },\n    countryCode,\n    supportedCountries,\n    parentFieldName,\n    nextElement,\n    apiKey,\n    onSelect,\n    onChange,\n    onToggleOpen,\n}) => {\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n\n    const labelContent = useMemo(() => (\n        <TranslatedString id=\"address.address_line_1_label\" />\n    ), []);\n\n    const inputProps = useMemo(() => ({\n        className: 'form-input optimizedCheckout-form-input',\n        id: getFormFieldInputId(name),\n    }), [name]);\n\n    const renderInput = useCallback(({ field }: FieldProps) => (\n        <GoogleAutocomplete\n            apiKey={ apiKey }\n            componentRestrictions={ countryCode ?\n                { country: countryCode } :\n                undefined }\n            initialValue={ field.value }\n            inputProps={ inputProps }\n            isAutocompleteEnabled={ countryCode ?\n                supportedCountries.indexOf(countryCode) > -1 :\n                false }\n            nextElement={ nextElement }\n            onChange={ onChange }\n            onSelect={ onSelect }\n            onToggleOpen={ onToggleOpen }\n        />\n    ), [\n        apiKey,\n        countryCode,\n        inputProps,\n        nextElement,\n        onChange,\n        onSelect,\n        onToggleOpen,\n        supportedCountries,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--addressLineAutocomplete` }>\n            <FormField\n                input={ renderInput }\n                labelContent={ labelContent }\n                name={ fieldName }\n            />\n        </div>\n    );\n};\n\nexport default memo(GoogleAutocompleteFormField);\n","import classNames from 'classnames';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\n\nimport Input, { InputProps } from './Input';\nimport Label from './Label';\n\nexport interface RadioInputProps extends InputProps {\n    additionalClassName?: string;\n    label: ReactNode;\n    value: string;\n    checked: boolean;\n}\n\nconst RadioInput = forwardRef((\n    {\n        additionalClassName,\n        label,\n        value,\n        checked,\n        id,\n        ...rest\n    }: RadioInputProps,\n    ref: Ref<HTMLInputElement>\n) => (\n    <>\n        <Input\n            { ...rest }\n            checked={ checked }\n            className={ classNames(\n                'form-radio',\n                'optimizedCheckout-form-radio',\n                additionalClassName\n            ) }\n            id={ id }\n            ref={ ref }\n            type=\"radio\"\n            value={ value }\n        />\n        <Label htmlFor={ id }>\n            { label }\n        </Label>\n    </>\n));\n\nexport default RadioInput;\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { isDate, noop } from 'lodash';\nimport React, { memo, useCallback, FunctionComponent } from 'react';\nimport ReactDatePicker from 'react-datepicker';\n\nimport { CheckboxInput, InputProps, RadioInput, TextArea, TextInput } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface DynamicInputProps extends InputProps {\n    id: string;\n    additionalClassName?: string;\n    value?: string | string[];\n    rows?: number;\n    fieldType?: DynamicFormFieldType;\n    options?: FormFieldItem[];\n}\n\nconst DynamicInput: FunctionComponent<DynamicInputProps> = ({\n    additionalClassName,\n    fieldType,\n    id,\n    name,\n    onChange = noop,\n    options,\n    placeholder,\n    value,\n    ...rest\n}) => {\n    const handleDateChange = useCallback((date, event) => onChange({\n        ...event,\n        target: {\n            name,\n            value: date,\n        },\n    }), [\n        onChange,\n        name,\n    ]);\n\n    switch (fieldType) {\n    case DynamicFormFieldType.dropdown:\n        return (\n            <select\n                { ...rest as any }\n                className=\"form-select optimizedCheckout-form-select\"\n                data-test={ `${id}-select` }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                value={ value === null ? '' : value }\n            >\n                { placeholder &&\n                    <option value=\"\">\n                        { placeholder }\n                    </option> }\n                { options && options.map(({ label, value: optionValue }) =>\n                    <option\n                        key={ optionValue }\n                        value={ optionValue }\n                    >\n                        { label }\n                    </option>\n                ) }\n            </select>\n        );\n\n    case DynamicFormFieldType.radio:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <RadioInput\n                    { ...rest }\n                    checked={ optionValue === value }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-radio` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.checkbox:\n        if (!options || !options.length) {\n            return null;\n        }\n\n        return <>\n            { options.map(({ label, value: optionValue }) =>\n                <CheckboxInput\n                    { ...rest }\n                    checked={ Array.isArray(value) ? value.includes(optionValue) : false }\n                    id={ `${id}-${optionValue}` }\n                    key={ optionValue }\n                    label={ label }\n                    name={ name }\n                    onChange={ onChange }\n                    testId={ `${id}-${optionValue}-checkbox` }\n                    value={ optionValue }\n                />) }\n        </>;\n\n    case DynamicFormFieldType.date:\n        return (\n            <ReactDatePicker\n                { ...rest as any }\n                autoComplete=\"off\"\n                // FIXME: we can avoid this by simply using onChangeRaw, but it's not being triggered properly\n                // https://github.com/Hacker0x01/react-datepicker/issues/1357\n                // onChangeRaw={ rest.onChange }\n                calendarClassName=\"optimizedCheckout-contentPrimary\"\n                className=\"form-input optimizedCheckout-form-input\"\n                maxDate={ rest.max ? new Date(`${rest.max} 00:00:00`) : undefined }\n                minDate={ rest.min ? new Date(`${rest.min} 00:00:00`) : undefined }\n                name={ name }\n                onChange={ handleDateChange }\n                placeholderText=\"MM/DD/YYYY\"\n                popperClassName=\"optimizedCheckout-contentPrimary\"\n                selected={ isDate(value) ? value : undefined }\n            />\n        );\n\n    case DynamicFormFieldType.multiline:\n        return (\n            <TextArea\n                { ...rest as any }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-text` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n\n    default:\n        return (\n            <TextInput\n                { ...rest }\n                id={ id }\n                name={ name }\n                onChange={ onChange }\n                testId={ `${id}-${ fieldType === DynamicFormFieldType.password ?\n                    'password' :\n                    'text' }` }\n                type={ fieldType }\n                value={ value }\n            />\n        );\n    }\n};\n\nexport default memo(DynamicInput);\n","import React, { memo, useCallback, FunctionComponent, MouseEvent } from 'react';\n\nimport { TranslatedString } from '../locale';\n\nexport interface MultiCheckboxControlProps {\n    testId?: string;\n    onSelectedAll(): void;\n    onSelectedNone(): void;\n}\n\nconst MultiCheckboxControl: FunctionComponent<MultiCheckboxControlProps> = ({\n    testId,\n    onSelectedAll,\n    onSelectedNone,\n}) => {\n    const handleSelectAllClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedAll();\n    }, [onSelectedAll]);\n\n    const handleSelectNoneClick = useCallback((event: MouseEvent) => {\n        event.preventDefault();\n        onSelectedNone();\n    }, [onSelectedNone]);\n\n    return <ul className=\"multiCheckbox--controls\">\n        <li className=\"multiCheckbox--control\">\n            <TranslatedString id=\"address.select\" />\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-all-button` }\n                href=\"#\"\n                onClick={ handleSelectAllClick }\n            >\n                <TranslatedString id=\"address.select_all\" />\n            </a>\n        </li>\n\n        <li className=\"multiCheckbox--control\">\n            <a\n                data-test={ `${testId}Checkbox-none-button` }\n                href=\"#\"\n                onClick={ handleSelectNoneClick }\n            >\n                <TranslatedString id=\"address.select_none\" />\n            </a>\n        </li>\n    </ul>;\n};\n\nexport default memo(MultiCheckboxControl);\n","import { FormFieldItem } from '@bigcommerce/checkout-sdk';\nimport { getIn, FieldArray, FieldArrayRenderProps } from 'formik';\nimport { difference, kebabCase, noop, pick } from 'lodash';\nimport React, { memo, useCallback, ChangeEvent, FunctionComponent, ReactNode } from 'react';\n\nimport { FormFieldContainer, FormFieldError } from '../ui/form';\n\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\nimport MultiCheckboxControl from './MultiCheckboxControl';\n\nexport interface CheckboxGroupFormFieldProps {\n    id: string;\n    label: ReactNode;\n    name: string;\n    options: FormFieldItem[];\n    onChange?(values: string[]): void;\n}\n\ntype MultiCheckboxFormFieldProps = (\n    CheckboxGroupFormFieldProps &\n    Pick<FieldArrayRenderProps, 'push' | 'remove' | 'pop' | 'form'>\n);\n\nconst MultiCheckboxFormField: FunctionComponent<MultiCheckboxFormFieldProps> = ({\n    form: { values, errors },\n    id,\n    label,\n    name,\n    onChange = noop,\n    options,\n    pop,\n    push,\n    remove,\n}) => {\n    const handleSelectAll = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        difference(options.map(({ value }) => value), checkedValues)\n            .forEach(val => push(val));\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        options,\n        push,\n        values,\n    ]);\n\n    const handleSelectNone = useCallback(() => {\n        const checkedValues: string[] = getIn(values, name) || [];\n\n        checkedValues.forEach(() => pop());\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        pop,\n        values,\n    ]);\n\n    const handleInputChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const checkedValues: string[] = getIn(values, name) || [];\n        const { value, checked } = event.target;\n\n        if (checked) {\n            push(value);\n        } else {\n            remove(checkedValues.indexOf(value));\n        }\n\n        onChange(getIn(values, name));\n    }, [\n        name,\n        onChange,\n        push,\n        remove,\n        values,\n    ]);\n\n    return <FormFieldContainer hasError={ getIn(errors, name) && getIn(errors, name).length }>\n        { label }\n\n        <MultiCheckboxControl\n            onSelectedAll={ handleSelectAll }\n            onSelectedNone={ handleSelectNone }\n            testId={ id }\n        />\n\n        <DynamicInput\n            fieldType={ DynamicFormFieldType.checkbox }\n            id={ id }\n            name={ name }\n            onChange={ handleInputChange }\n            options={ options }\n            value={ getIn(values, name) || [] }\n        />\n\n        <FormFieldError\n            name={ name }\n            testId={ `${kebabCase(name)}-field-error-message` }\n        />\n    </FormFieldContainer>;\n};\n\nconst CheckboxGroupFormField: FunctionComponent<CheckboxGroupFormFieldProps> = ({\n    id,\n    label,\n    name,\n    onChange,\n    options,\n}) => {\n    const renderField = useCallback((renderProps: FieldArrayRenderProps) => (\n        <MultiCheckboxFormField\n            id={ id }\n            label={ label }\n            name={ name }\n            onChange={ onChange }\n            options={ options }\n            { ...pick(renderProps, [\n                'form',\n                'pop',\n                'push',\n                'remove',\n            ]) }\n        />\n    ), [\n        id,\n        label,\n        name,\n        onChange,\n        options,\n    ]);\n\n    return <FieldArray\n        name={ name }\n        render={ renderField }\n    />;\n};\n\nexport default memo(CheckboxGroupFormField);\n","import { FormField as FormFieldType } from '@bigcommerce/checkout-sdk';\nimport { FieldProps } from 'formik';\nimport React, { memo, useCallback, useMemo, FunctionComponent } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { FormField, Label } from '../ui/form';\n\nimport { getFormFieldInputId, getFormFieldLegacyName } from './getFormFieldInputId';\nimport CheckboxGroupFormField from './CheckboxGroupFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\nimport DynamicInput from './DynamicInput';\n\nexport interface AddressKeyMap<T = string> {\n    [fieldName: string]: T;\n}\n\nconst LABEL: AddressKeyMap = {\n    address1: 'address.address_line_1_label',\n    address2: 'address.address_line_2_label',\n    city: 'address.city_label',\n    company: 'address.company_name_label',\n    countryCode: 'address.country_label',\n    firstName: 'address.first_name_label',\n    lastName: 'address.last_name_label',\n    phone: 'address.phone_number_label',\n    postalCode: 'address.postal_code_label',\n    stateOrProvince: 'address.state_label',\n    stateOrProvinceCode: 'address.state_label',\n};\n\nconst AUTOCOMPLETE: AddressKeyMap = {\n    address1: 'address-line1',\n    address2: 'address-line2',\n    city: 'address-level2',\n    company: 'organization',\n    countryCode: 'country',\n    firstName: 'given-name',\n    lastName: 'family-name',\n    phone: 'tel',\n    postalCode: 'postal-code',\n    stateOrProvince: 'address-level1',\n    stateOrProvinceCode: 'address-level1',\n};\n\nexport interface DynamicFormFieldOption {\n    code: string;\n    name: string;\n}\n\nexport interface DynamicFormFieldProps {\n    field: FormFieldType;\n    parentFieldName?: string;\n    placeholder?: string;\n    fieldType?: DynamicFormFieldType;\n    onChange?(value: string | string[]): void;\n}\n\nconst DynamicFormField: FunctionComponent<DynamicFormFieldProps>  = ({\n    field: {\n        name,\n        label: fieldLabel,\n        custom,\n        required,\n        options,\n        max,\n        min,\n        maxLength,\n    },\n    fieldType,\n    parentFieldName,\n    onChange,\n    placeholder,\n}) => {\n    const addressFieldName = name;\n    const fieldInputId = getFormFieldInputId(addressFieldName);\n    const fieldName = parentFieldName ? `${parentFieldName}.${name}` : name;\n    const translatedLabelString = LABEL[name];\n\n    const label = useMemo(() => (\n        <Label htmlFor={ fieldInputId }>\n            { custom ?\n                fieldLabel :\n                translatedLabelString && <TranslatedString id={ translatedLabelString } /> }\n            { !required &&\n                <>\n                    { '' }\n                    <small className=\"optimizedCheckout-contentSecondary\">\n                        <TranslatedString id=\"common.optional_text\" />\n                    </small>\n                </> }\n        </Label>\n    ), [\n        custom,\n        fieldInputId,\n        fieldLabel,\n        required,\n        translatedLabelString,\n    ]);\n\n    const renderInput = useCallback(({ field }: FieldProps<string>) => (\n        <DynamicInput\n            { ...field }\n            autoComplete={ AUTOCOMPLETE[addressFieldName] }\n            fieldType={ fieldType }\n            id={ fieldInputId }\n            max={ max }\n            maxLength={ maxLength || undefined }\n            min={ min }\n            options={ options && options.items }\n            placeholder={ placeholder || (options && options.helperLabel) }\n            rows={ options && (options as any).rows }\n        />\n    ), [\n        addressFieldName,\n        fieldInputId,\n        fieldType,\n        max,\n        maxLength,\n        min,\n        options,\n        placeholder,\n    ]);\n\n    return (\n        <div className={ `dynamic-form-field dynamic-form-field--${getFormFieldLegacyName(addressFieldName)}` }>\n            { fieldType === DynamicFormFieldType.checkbox ?\n                <CheckboxGroupFormField\n                    id={ fieldInputId }\n                    label={ label }\n                    name={ fieldName }\n                    onChange={ onChange }\n                    options={ (options && options.items) || [] }\n                /> :\n                <FormField\n                    input={ renderInput }\n                    label={ label }\n                    name={ fieldName }\n                    onChange={ onChange }\n                /> }\n        </div>\n    );\n};\n\nexport default memo(DynamicFormField);\n","import { Address, Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { memoize } from '@bigcommerce/memoize';\nimport { forIn, noop } from 'lodash';\nimport React, { createRef, Component, ReactNode, RefObject } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { AutocompleteItem } from '../ui/autocomplete';\n\nimport { mapToAddress, GoogleAutocompleteFormField } from './googleAutocomplete';\nimport DynamicFormField, { AddressKeyMap } from './DynamicFormField';\nimport DynamicFormFieldType from './DynamicFormFieldType';\n\nexport interface AddressFormProps {\n    fieldName?: string;\n    countryCode?: string;\n    countriesWithAutocomplete?: string[];\n    countries?: Country[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    onAutocompleteSelect?(address: Partial<Address>): void;\n    onAutocompleteToggle?(state: { inputValue: string; isOpen: boolean }): void;\n    onChange?(fieldName: string, value: string | string[]): void;\n    setFieldValue?(fieldName: string, value: string | string[]): void;\n}\n\nconst PLACEHOLDER: AddressKeyMap = {\n    countryCode: 'address.select_country_action',\n    stateOrProvince: 'address.select_state_action',\n    stateOrProvinceCode: 'address.select_state_action',\n};\n\nconst AUTOCOMPLETE_FIELD_NAME = 'address1';\n\nclass AddressForm extends Component<AddressFormProps & WithLanguageProps> {\n    private containerRef: RefObject<HTMLElement> = createRef();\n    private nextElement?: HTMLElement | null;\n\n    private handleDynamicFormFieldChange: (name: string) => (value: string | string[]) => void = memoize(name => value => {\n        this.syncNonFormikValue(name, value);\n    });\n\n    componentDidMount(): void {\n        const { current } = this.containerRef;\n\n        if (current) {\n            this.nextElement = current.querySelector<HTMLElement>('[autocomplete=\"address-line2\"]');\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            formFields,\n            fieldName,\n            language,\n            countriesWithAutocomplete,\n            countryCode,\n            googleMapsApiKey,\n            onAutocompleteToggle,\n        } = this.props;\n\n        return (\n            <div className=\"checkout-address\" ref={ this.containerRef as RefObject<HTMLDivElement> }>\n                { formFields.map(field => {\n                    const addressFieldName = field.name;\n                    const translatedPlaceholderId = PLACEHOLDER[addressFieldName];\n\n                    if (addressFieldName === 'address1' && googleMapsApiKey && countriesWithAutocomplete) {\n                        return (\n                            <GoogleAutocompleteFormField\n                                apiKey={ googleMapsApiKey }\n                                countryCode={ countryCode }\n                                field={ field }\n                                key={ field.id }\n                                nextElement={ this.nextElement || undefined }\n                                onChange={ this.handleAutocompleteChange }\n                                onSelect={ this.handleAutocompleteSelect }\n                                onToggleOpen={ onAutocompleteToggle }\n                                parentFieldName={ fieldName }\n                                supportedCountries={ countriesWithAutocomplete }\n                            />\n                        );\n                    }\n\n                    return (\n                        <DynamicFormField\n                            field={ field }\n                            // stateOrProvince can sometimes be a dropdown or input, so relying on id is not sufficient\n                            fieldType={ this.getDynamicFormFieldType(field) }\n                            key={ `${field.id}-${field.name}` }\n                            onChange={ this.handleDynamicFormFieldChange(addressFieldName) }\n                            parentFieldName={ field.custom ?\n                                (fieldName ? `${fieldName}.customFields` : 'customFields') :\n                                fieldName }\n                            placeholder={ translatedPlaceholderId && language.translate(translatedPlaceholderId) }\n                        />\n                    );\n                }) }\n            </div>\n        );\n    }\n\n    private getDynamicFormFieldType({\n        custom,\n        name,\n        fieldType,\n        type,\n        secret,\n    }: FormField): DynamicFormFieldType {\n        if (!custom) {\n            const defaultTypes: { [key: string]: DynamicFormFieldType } = {\n                phone: DynamicFormFieldType.telephone,\n                countryCode: DynamicFormFieldType.dropdown,\n                stateOrProvinceCode: DynamicFormFieldType.dropdown,\n            };\n\n            return defaultTypes[name] || DynamicFormFieldType.text;\n        }\n\n        if (fieldType === 'text') {\n            if (type === 'integer') {\n                return DynamicFormFieldType.number;\n            }\n\n            return secret ?\n                DynamicFormFieldType.password :\n                DynamicFormFieldType.text;\n        }\n\n        return fieldType as DynamicFormFieldType;\n    }\n\n    private handleAutocompleteChange: (value: string, isOpen: boolean) => void = (value, isOpen) => {\n        if (!isOpen) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, value);\n        }\n    };\n\n    private handleAutocompleteSelect: (\n        place: google.maps.places.PlaceResult,\n        item: AutocompleteItem\n    ) => void = (place, { value: autocompleteValue }) => {\n        const {\n            countries,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const address = mapToAddress(place, countries);\n\n        forIn(address, (value, fieldName) => {\n            setFieldValue(fieldName, value as string);\n            onChange(fieldName, value as string);\n        });\n\n        if (autocompleteValue) {\n            this.syncNonFormikValue(AUTOCOMPLETE_FIELD_NAME, autocompleteValue);\n        }\n    };\n\n    // because autocomplete state is controlled by Downshift, we need to manually keep formik\n    // value in sync when autocomplete value changes\n    private syncNonFormikValue: (\n        fieldName: string,\n        value: string | string[]\n    ) => void = (fieldName, value) => {\n        const {\n            formFields,\n            setFieldValue = noop,\n            onChange = noop,\n        } = this.props;\n\n        const dateFormFieldNames = formFields\n            .filter(field => field.custom && field.fieldType === DynamicFormFieldType.date)\n            .map(field => field.name);\n\n        if (fieldName === AUTOCOMPLETE_FIELD_NAME || dateFormFieldNames.indexOf(fieldName) > -1) {\n            setFieldValue(fieldName, value);\n        }\n\n        onChange(fieldName, value);\n    };\n}\n\nexport default withLanguage(AddressForm);\n","import { Address, Country, Region } from '@bigcommerce/checkout-sdk';\n\nimport AddressSelectorFactory from './AddressSelectorFactory';\n\nexport default function mapToAddress(\n    autocompleteData: google.maps.places.PlaceResult,\n    countries: Country[] = []\n): Partial<Address> {\n    if (!autocompleteData || !autocompleteData.address_components) {\n        return {};\n    }\n\n    const accessor = AddressSelectorFactory.create(autocompleteData);\n    const state = accessor.getState();\n    const countryCode = accessor.getCountry();\n    const country = countries && countries.find(c => countryCode === c.code);\n    const street2 = accessor.getStreet2();\n\n    return {\n        address2: street2,\n        city: accessor.getCity(),\n        countryCode,\n        postalCode: accessor.getPostCode(),\n        ...state ? getState(state, country && country.subdivisions) : {},\n    };\n}\n\nfunction getState(\n    stateName: string,\n    states: Region[] = []\n): Partial<Address> {\n    const state = states.find(({ code, name }: Region) =>\n        code === stateName || name === stateName\n    );\n\n    if (!state) {\n        return {\n            stateOrProvince: !states.length ? stateName : '',\n            stateOrProvinceCode: '',\n        };\n    }\n\n    return {\n        stateOrProvince: state.name,\n        stateOrProvinceCode: state.code,\n    };\n}\n"],"sourceRoot":""}