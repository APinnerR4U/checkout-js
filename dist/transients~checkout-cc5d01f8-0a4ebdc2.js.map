{"version":3,"sources":["webpack://checkout/../src/index.ts","webpack://checkout/../src/timeout.ts","webpack://checkout/../../../src/common/utils/is-nil.js","webpack://checkout/../../../src/common/utils/omit-property.js","webpack://checkout/../../../src/payment/payment-method-mappers/payment-method-id-mapper.js","webpack://checkout/../../src/payment/url-helper.js","webpack://checkout/../../../src/common/http-request/request-sender.js","webpack://checkout/../../../src/common/http-request/method-types.js","webpack://checkout/../src/request-sender.ts","webpack://checkout/../src/data-store.ts","webpack://checkout/../src/deep-freeze.ts","webpack://checkout/../src/combine-reducers.ts","webpack://checkout/../src/create-action.ts","webpack://checkout/../src/script-loader.ts","webpack://checkout/../src/create-script-loader.ts","webpack://checkout/../src/form-poster.ts","webpack://checkout/../../src/payment/payment-types.js","webpack://checkout/../../../src/common/utils/is-object.js","webpack://checkout/../../../src/common/http-request/content-types.js","webpack://checkout/../src/create-request-sender.ts","webpack://checkout/../src/payload-transformer.ts","webpack://checkout/../src/to-form-url-encoded.ts","webpack://checkout/../src/request-factory.ts","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/query-string/index.js","webpack://checkout/../src/is-promise.ts","webpack://checkout/../src/create-timeout.ts","webpack://checkout/../src/is-observable-action-like.ts","webpack://checkout/../src/noop-action-transformer.ts","webpack://checkout/../src/noop-state-transformer.ts","webpack://checkout/../src/compose-reducers.ts","webpack://checkout/../src/create-data-store.ts","webpack://checkout/../src/create-error-action.ts","webpack://checkout/../src/get-script-loader.ts","webpack://checkout/../src/create-form-poster.ts","webpack://checkout/../src/form-builder.ts","webpack://checkout/../src/url-utils.ts","webpack://checkout/../src/index.js","webpack://checkout/../../src/client/client.js","webpack://checkout/../../src/payment/offsite-payment-initializer.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/payload-mapper.js","webpack://checkout/../../../src/common/utils/includes.js","webpack://checkout/../../../src/common/utils/omit-emptystring-and-nil.js","webpack://checkout/../../../src/common/utils/is-emptystring-or-nil.js","webpack://checkout/../../../src/common/utils/is-empty-string.js","webpack://checkout/../../../src/common/utils/omit-nil.js","webpack://checkout/../../../src/common/utils/to-number.js","webpack://checkout/../../../src/common/utils/to-snake-case.js","webpack://checkout/../../../src/common/utils/to-string.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/address-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/customer-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/meta-mapper.js","webpack://checkout/../../src/payment/payment-method-types.js","webpack://checkout/../../src/payment/payment-method-ids.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/store-mapper.js","webpack://checkout/../../src/payment/payment-submitter.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payload-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/customer-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/order-mapper.js","webpack://checkout/../../../src/common/utils/index.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payment-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/store-mapper.js","webpack://checkout/../../../src/common/http-request/default-options.js","webpack://checkout/../../../src/common/http-request/payload-transformer.js","webpack://checkout/../../../src/common/http-request/request-factory.js","webpack://checkout/../../src/payment/client-token-generator.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/client-token-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/cart-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/gateway-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/quote-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/store-mapper.js","webpack://checkout/../../src/store/store-request-sender.js","webpack://checkout/../../src/store/url-helper.js","webpack://checkout/../../../../src/store/v2/mappers/index.js","webpack://checkout/../../src/client/default-config.js","webpack://checkout/webpack://checkoutKit/webpack/bootstrap","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-actions.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/missing-data-error.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/standard-error.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/set-prototype-of.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-actions.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/order-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-actions.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-actions.ts","webpack://checkout/webpack:/checkoutKit/external \"rxjs/operators\"","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-actions.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout-events.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/request-error.ts","webpack://checkout/webpack://checkoutKit/src/config/config-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-plain-object.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-actions.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkout/webpack://checkoutKit/src/payment/payment-status-types.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkout/webpack://checkoutKit/src/common/http-request/content-type.ts","webpack://checkout/webpack:/checkoutKit/external \"shallowequal\"","webpack://checkout/webpack://checkoutKit/src/payment/payment-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/invalid-argument-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-types.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/is-iframe-event.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-equal.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-poster.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/with-memoized-combiner.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-listener.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-default-includes.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-items.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/internal-api-headers.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-maps.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-resolver.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/memoize.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-initialized-error.ts","webpack://checkout/webpack://checkoutKit/src/common/error/throw-error-action.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/amount-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/url/parse-url.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cachable-action-decorator.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/is-action-options.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cache-action.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/bind-decorator.ts","webpack://checkout/webpack:/checkoutKit/external \"iframe-resizer\"","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-deep.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkout/webpack://checkoutKit/src/shipping/map-to-internal-shipping-option.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-private.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unrecoverable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-internal-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-payment-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/clear-error-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-set.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-state.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/array-replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-merge.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-state.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-reducer.ts","webpack://checkout/webpack://checkoutKit/src/config/config-state.ts","webpack://checkout/webpack://checkoutKit/src/config/config-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-state.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/order/order-state.ts","webpack://checkout/webpack://checkoutKit/src/order/order-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/merge-or-push.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-reducer.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/create-freeze-proxy.ts","webpack://checkout/webpack://checkoutKit/src/form/form-selector.ts","webpack://checkout/webpack://checkoutKit/src/address/is-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-internal-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-selector.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-selector.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-selector.ts","webpack://checkout/webpack://checkoutKit/src/config/config-selector.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/order/order-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-action-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/create-request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/errors/checkout-not-available-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-coupon.ts","webpack://checkout/webpack://checkoutKit/src/address/map-to-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/billing/is-billing-address-like.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/selector-decorator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/is-element-id.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/set-unique-element-id.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/storage/browser-storage.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/loading-indicator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/iframe/iframe-resizer.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embed-checkout.ts","webpack://checkout/webpack:/checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkout/webpack://checkoutKit/src/common/error/errors/timeout-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/join-includes.ts","webpack://checkout/webpack://checkoutKit/src/config/config-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/config/config-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/registry/registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkout/webpack://checkoutKit/src/customer/map-to-internal-customer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-gift-certificate.ts","webpack://checkout/webpack://checkoutKit/src/order/map-to-internal-order.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/get-environment.ts","webpack://checkout/webpack://checkoutKit/src/common/log/console-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/create-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/noop-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/get-default-logger.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-implemented-error.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/default/default-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/square/square-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/mutation-observer.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/order/errors/order-finalization-not-required-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-comparator.ts","webpack://checkout/webpack://checkoutKit/src/cart/errors/cart-changed-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-validator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-vaulted-instrument.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-transformer.ts","webpack://checkout/webpack://checkoutKit/src/order/order-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-argument-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-cancelled-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirmJs.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/address/is-internal-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-private.ts","webpack://checkout/webpack://checkoutKit/src/address/map-from-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/overlay/overlay.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cancellable-promise.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-credit-card-like.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-form.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unsupported-browser-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-declined-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/create-data-store-projection.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/is-future.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/add-minutes.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-response-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/clone-result.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-shallow-equal-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-message-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/to-single-line.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service-error-transformer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/create-spam-protection.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-client.ts","webpack://checkout/webpack://checkoutKit/src/customer/create-customer-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/shipping/create-shipping-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/custom-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/locale/language-service.ts","webpack://checkout/webpack://checkoutKit/src/locale/create-language-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-formatter.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/create-currency-service.ts","webpack://checkout/webpack://checkoutKit/src/index.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-cart.ts","webpack://checkout/webpack://checkoutKit/src/promotion/map-to-discount-notifications.ts"],"names":["create_request_sender_1","__webpack_require__","exports","createRequestSender","default","create_timeout_1","createTimeout","request_sender_1","RequestSender","timeout_1","Timeout","_delay","_this","this","_resolve","_promise","Promise","resolve","prototype","onComplete","callback","then","complete","_timeoutToken","window","clearTimeout","start","setTimeout","value","object","predicateFn","_isObject2","Object","reduce","result","key","_isObject","_paymentMethodTypes","_paymentMethodIds","PaymentMethodIdMapper","paymentMethod","id","MULTI_OPTION","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISACHECKOUT","BRAINTREE_GOOGLEPAY","isBraintreePaymentMethod","BRAINTREE","UrlHelper","config","_classCallCheck","host","_methodTypes","requestFactory","payloadTransformer","RequestFactory","create","PayloadTransformer","url","data","options","mergedOptions","_deepAssign2","DEFAULT_OPTIONS","xhr","createRequest","error","response","fromResponse","isSuccessfulRequest","payload","toRequest","_objectAssign2","method","POST","sendRequest","GET","DELETE","merge_1","tslib_1","__importDefault","is_promise_1","_requestFactory","_payloadTransformer","_cookie","_options","requestOptions","_mergeDefaultOptions","request","_prependHost","reject","requestHandler","toResponse","status","onload","onerror","onabort","ontimeout","timeout","abort","send","toRequestBody","get","__assign","post","put","patch","delete","defaultOptions","credentials","headers","Accept","csrfToken","body","test","replace","lodash_1","rxjs_1","operators_1","shallowEqual","deep_freeze_1","is_observable_action_like_1","noop_action_transformer_1","noop_state_transformer_1","DataStore","reducer","initialState","_reducer","actionTransformer","equalityCheck","shouldWarnMutation","stateTransformer","_state$","BehaviorSubject","_notification$","Subject","_dispatchers","_dispatchQueue$","_errors","pipe","mergeMap","dispatcher$","concatMap","action$","filter","action","type","scan","states","_transformStates","state","transformedState","getValue","distinctUntilChanged","_a","_b","stateA","stateB","map","subscribe","dispatch","_dispatchObservableAction","_dispatchThunkAction","_dispatchAction","getState","notifyState","next","subscriber","args","_i","arguments","length","_typeof","undefined","filters","state$","every","filterFn","initial","skip","subscriptions","forEach","subscription","unsubscribe","newState","previousValue","_getDispatchError","meta","queueId","throwError","of","error$","transformedAction$","from","merge","_getDispatcher","index","first","catchError","Error","tap","thunkAction","defer","deepFreeze","equalityCheck_1","_c","previousValue_1","isFrozen","Array","isArray","isPlainObject","freeze","getOwnPropertyNames","hasOwnProperty","TypeError","reducers","keys","currentState","assign","omitBy","ScriptLoader","_scripts","loadScript","src","script","document","createElement","event","onreadystatechange","async","appendChild","script_loader_1","create_form_poster_1","createFormPoster","form_poster_1","FormPoster","url_utils_1","_formBuilder","postForm","form","build","addEventListener","handleUnload","removeEventListener","submit","removeChild","isAbsoluteUrl","joinPaths","API","HOSTED","OFFLINE","APPLICATION_JSON","create_script_loader_1","createScriptLoader","get_script_loader_1","getScriptLoader","cookie","__importStar","payload_transformer_1","request_factory_1","to_form_url_encoded_1","JSON_CONTENT_TYPE_REGEXP","FORM_URLENCODED_CONTENT_TYPE_REGEXP","contentType","_getHeader","JSON","stringify","_parseResponseHeaders","getAllResponseHeaders","_parseResponseBody","responseText","statusText","parse","rawHeaders","split","line","parts","shift","trim","toLowerCase","join","encodeURIComponent","queryString","XMLHttpRequest","_configureRequest","open","_formatUrl","params","_configureRequestHeaders","withCredentials","setRequestHeader","strictUriEncode","require","objectAssign","decodeComponent","encode","opts","strict","extract","str","queryStart","indexOf","slice","formatter","arrayFormat","accumulator","exec","concat","parserForArrayFormat","ret","param","val","sort","Boolean","keysSorter","input","a","b","Number","obj","encoderForArrayFormat","val2","push","x","parseUrl","query","promise","delay","data_store_1","combine_reducers_1","combineReducers","compose_reducers_1","composeReducers","create_action_1","createAction","create_data_store_1","createDataStore","create_error_action_1","createErrorAction","flowRight","curryRight","instance","form_builder_1","formBuilder","FormBuilder","style","display","setAttribute","_createInput","pathA","pathB","path","removeLeadingSlash","createClient","Client","_client","paymentSubmitter","offsitePaymentInitializer","clientTokenGenerator","storeRequestSender","clientConfig","DEFAULT_CONFIG","OffsitePaymentInitializer","PaymentSubmitter","ClientTokenGenerator","StoreRequestSender","initializeOffsitePayment","submitPayment","generateClientToken","loadInstruments","loadInstrumentsWithAddress","postShopperInstrument","deleteShopperInstrument","_formPoster","_paymentTypes","urlHelper","formPoster","payloadMapper","PayloadMapper","_data$paymentMethod","mapToPayload","getOffsitePaymentUrl","_utils","addressMapper","customerMapper","metaMapper","paymentMethodIdMapper","storeMapper","AddressMapper","CustomerMapper","MetaMapper","StoreMapper","authToken","_data$order","order","amount","bc_auth_token","currency","gateway","mapToId","notify_url","callbackUrl","order_id","toString","page_title","payment_method_id","reference_id","return_url","mapToBillingAddress","mapToCustomer","mapToMeta","mapToShippingAddress","mapToStore","omitNil","items","item","_omitProperty2","isEmptyStringOrNil","_isEmptyString2","_isNil2","isNil","parseFloat","string","isNaN","mapToAddress","addressKey","_omitNil","address","formattedAddressKey","toSnakeCase","_defineProperty","city","company","countryCode","country","firstName","lastName","phone","provinceCode","province","addressLine1","addressLine2","postCode","_data$customer","customer","_data$quoteMeta","quoteMeta","_data$store","store","customer_browser_info","navigator","userAgent","customer_email","email","customer_first_name","customer_geo_ip_country_code","customer_last_name","customer_locale","storeLanguage","customer_name","name","customer_phone","phoneNumber","customer_reference","source","meta_referrer","referrer","meta_source","meta_user_agent","CREDIT_CARD","store_hash","storeHash","store_id","requestSender","getPaymentUrl","mapToHeaders","postRequest","orderMapper","paymentMapper","OrderMapper","PaymentMapper","mapToOrder","payment","mapToPayment","Authorization","customer_group","geo_ip_country_code","session_token","billing_address","coupons","mapToCoupons","mapToItems","shipping","mapToShipping","shipping_address","token","totals","mapToOrderTotals","description","_ref2$order","_ref2","coupon","_ref3","code","omitEmptyStringAndNil","country_code","first_name","last_name","state_code","street_1","street_2","zip","_data$cart","cart","itemData","variant_id","variantId","price","integerAmount","quantity","sku","_data$order2","grand_total","handling","subtotal","tax","_data$orderMeta","orderMeta","_data$payment","device_info","device","fingerprint_id","vault_payment_instrument","instrumentId","shouldSaveInstrument","nonce","bigpay_token","mapToBigPayToken","credit_card_token","cryptogramId","credit_card_cryptogram","mapToCryptogram","credit_card","mapToCreditCard","_data$payment2","account_name","ccName","month","toNumber","number","ccNumber","verification_value","ccCvv","year","customer_code","ccCustomerCode","three_d_secure","threeDSecure","_ref","credit_card_number_confirmation","payment_cryptogram","eci","xid","transactionId","account_mask","accountMask","hash","storeName","_contentTypes","Content-Type","includes","setOptions","headerKeys","setHeaders","clientTokenMapper","ClientTokenMapper","getGenerateClientTokenUrl","mapToClientToken","cartMapper","gatewayMapper","quoteMapper","CartMapper","GatewayMapper","QuoteMapper","mapToCart","mapToGateway","quote","mapToQuote","currency_code","_data$cart2","discount_amount","integerDiscount","tax_amount","integerTax","integerAmountAfterDiscount","mapToType","_data$cart3","discount_total","shipping_total","surcharge_total","tax_total","ItemPhysicalEntity","ItemDigitalEntity","ItemGiftCertificateEntity","_paymentMethodIdMapper","address_line_1","address_line_2","postal_code","locale","mapToLocale","store_identity","mapToIdentity","urls","mapToUrls","currencyCode","language_code","_data$store2","_data$store3","cartLink","checkout","checkoutLink","confirmation","orderConfirmationLink","home","shopPath","_mappers","getInstrumentsUrl","storeId","customerId","getTrustedShippingAddressUrl","mapToTrustedShippingAddressPayload","mapToInstrumentPayload","getInstrumentByIdUrl","providerName","default_instrument","defaultInstrument","provider","_ref2$creditCard","creditCard","cardholder_name","cardholderName","verification_code","verificationCode","issue_month","issueMonth","issue_year","issueYear","issue_number","issueNumber","track_data","trackData","is_manual_entry","isManualEntry","icc_data","iccData","fallback_reason","fallbackReason","is_contactless","isContactless","encrypted_pin_cryptogram","encryptedPinCryptogram","encrypted_pin_ksn","encryptedPinKsn","billingAddress","mapToState","e","n","r","i","l","modules","module","enumerable","Symbol","toStringTag","t","__esModule","d","bind","call","s","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","_super","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","tslib__WEBPACK_IMPORTED_MODULE_0__","ShippingStrategyActionType","CheckoutActionType","message","o","_newTarget","setPrototypeOf","__proto__","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","RequestError","errors","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","__webpack_exports__","PaymentActionType","InvalidArgumentError","objectA","objectB","length_1","isEqual","Date","getTime","RegExp","keyFilter","keysA","keysB","length_2","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","creator","combiner","pop","apply","combinerArgs","ErrorActionType","PaymentMethodActionCreator","_requestSender","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","loadPaymentMethods","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","catch","LoadPaymentMethodsFailed","methodId","LoadPaymentMethodRequested","loadPaymentMethod","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","PaymentMethodRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","JsonV1","X-API-INTERNAL","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_isListening","_listeners","_handleMessage","listener","listeners","splice","trigger","__decorate","_common_utility__WEBPACK_IMPORTED_MODULE_2__","itemMap","decimalPlaces","idKey","amountTransformer","amount_transformer","imageUrl","amountAfterDiscount","discount","toInteger","sender","recipient","attributes","INTERNAL_USE_ONLY","maps","maxSize","external_shallowequal_","onExpire","external_lodash_","CacheKeyResolver","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","_removeLeastUsedMap","_map","isMatched","mapIndex","unshift","isTerminalCacheKeyMap","parent","terminalMap","_lastId","recentlyUsedMap","_usedMaps","_removeMap","c","fn","cache","Map","resolver","_cache_key_resolver__WEBPACK_IMPORTED_MODULE_3__","u","memoized","getKey","memoize","CheckoutIncludes","BraintreeScriptLoader","_scriptLoader","_window","braintree","client","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","dataCollector","paypal","paypalCheckout","visaCheckout","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","clientToken","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","loadClient","authorization","_paypal","all","getClient","loadPaypal","_paypalCheckout","loadPaypalCheckout","_3ds","load3DS","cached","_dataCollectors","loadDataCollector","kount","deviceData","teardown","_visaCheckout","loadVisaCheckout","_googlePay","loadGooglePayment","_teardown","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","_decimalPlaces","AmountTransformer","Math","round","pow","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","href","hostname","pathname","port","protocol","search","_","descriptor","memoizedMethods","WeakMap","lastArg","useCache","instanceMethods","set","cache_key_resolver","external_rxjs_","f","defineProperty","target","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","boundMethod","predicate","omitDeep","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","loadCheckout","LoadCheckoutSucceeded","LoadCheckoutFailed","context","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","updateCheckout","UpdateCheckoutSucceeded","UpdateCheckoutFailed","ConsignmentActionCreator","_consignmentRequestSender","consignment","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","getCart","updateConsignment","deleteConsignment","_createOrUpdateConsignment","_addLineItems","Observable","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","createConsignments","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","sharedItem","find","existingItem","DEFAULT_PARAMS","ConsignmentRequestSender","location","isSelected","cost","selected","isRecommended","transitTime","map_from_payment_error_response_joinErrors","h","register","request_error","joinErrors","detail","title","timeout_error","RequestErrorFactory","factoryMethod","_factoryMethods","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","errorResponse","storefrontErrorResponse","internalErrorResponse","m","g","y","error_actions","ClearError","v","currentValue","newValue","DEFAULT_STATE","statuses","A","dataReducer","errorsReducer","clearErrorReducer","statusesReducer","O","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","E","objectSet","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","P","k","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","arrayReplace","R","currentObject","newObject","cart_state_DEFAULT_STATE","L","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","W","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","J","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","nt","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","st","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","ht","customer_reducer_dataReducer","customer_strategy_state_DEFAULT_STATE","gt","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","It","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","Et","Pt","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","kt","FinalizeOrderSucceeded","SubmitOrderSucceeded","orderToken","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","zt","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","qt","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","Wt","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","Jt","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","bigpayToken","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","ie","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","ce","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","fe","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","ve","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","checkout_state_DEFAULT_STATE","Ae","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","Re","trap","proxy","iteratee","getPrototypeOf","charAt","je","address1","address2","stateOrProvince","postalCode","customFields","Ne","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","loadError","createCartSelector","createCheckoutButtonSelector","ke","createConfigSelector","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","createCountrySelector","getCountries","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createInstrumentSelector","getInstruments","getInstrumentsMeta","getDeleteError","createFormSelector","getShippingAddressFields","countries","selectedCountry","formFields","shippingAddressFields","field","getBillingAddressFields","billingAddressFields","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","paymentMethods","getLoadMethodError","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createConsignmentSelector","getConsignmentById","addressA","addressB","normalize","getShippingOption","selectedShippingOption","getCreateError","createError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getGrandTotal","useStoreCredit","grandTotal","storeCredit","max","createOrderSelector","getOrder","getOrderMeta","createPaymentSelector","payments","providerId","payment_method_types","internalPayment","step","redirectUrl","payment_status_types","checkoutButton","customerStrategies","instruments","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","createFreezeProxy","qe","requestErrorFactory","factory","request_error_factory","unrecoverable_error","payment_method_invalid_error","createInternalCheckoutSelectors","createInternalCheckoutSelectorsFactory","billingAddressReducer","cartReducer","checkoutReducer","checkoutButtonReducer","configReducer","consignmentReducer","countryReducer","couponReducer","customerReducer","customerStrategyReducer","giftCertificateReducer","instrumentReducer","orderReducer","paymentReducer","paymentMethodReducer","paymentStrategyReducer","remoteCheckoutReducer","shippingCountryReducer","shippingStrategyReducer","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","checkout_default_includes","checkout_not_available_error","couponTypes","displayName","discountType","couponType","addressId","stateOrProvinceCode","memoizedMethod","cachedValue","getUsedCount","checkout_button_error_selector","_checkoutButton","CheckoutButtonErrorSelector","selectorDecorator","checkout_button_status_selector","CheckoutButtonStatusSelector","CheckoutButtonMethodType","checkout_button_initializer","_store","_buttonStrategyActionCreator","_state","createCheckoutButtonSelectors","CheckoutButtonInitializer","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","initialize","deinitialize","bind_decorator","I","S","w","_registry","_paymentMethodActionCreator","CheckoutButtonStrategyActionCreator","M","T","D","z","j","N","q","U","F","C","B","G","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_offerCredit","BraintreePaypalButtonStrategy","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","getPaypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","loadDefaultCheckout","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","offerCredit","tokenizePayment","getDataCollector","payment_type","device_data","_mapToLegacyShippingAddress","_mapToLegacyBillingAddress","details","recipientName","phone_number","line1","line2","googlepay_button_strategy","_googlePayPaymentProcessor","GooglePayButtonStrategy","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","getElementById","googlePayButton","createButton","_handleWalletButtonClick","preventDefault","displayWallet","handleSuccess","paymentData","updateShippingAddress","_onPaymentSelectComplete","_onError","masterpass_button_strategy","_masterpassScriptLoader","MasterpassButtonStrategy","initializationData","load","_masterpassClient","masterpass","_signInButton","buttonContainer","button","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_createMasterpassPayload","K","H","_host","PaypalButtonStrategy","merchantId","clientId","actions","internal_api_headers","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","Z","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","checkout_button_method_type","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","_namespace","BrowserStorage","rawValue","external_local_storage_fallback_default","getItem","withNamespace","removeItem","setItem","p","UnknownError","embedded_checkout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","addListener","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","EmbeddedCheckout","listen","show","_allowCookie","_attemptLogin","createFrame","_iframe","iframe","hide","_retryAllowCookie","FrameError","stopListen","iFrameResizer","close","contentWindow","styles","setTarget","embedded_content_events","StyleConfigured","invalid_login_token_error","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","LoadingIndicator","parentId","parent_1","opacity","handleTransitionEnd","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","iframes","scrolling","sizeWidth","heightCalculationMethod","contentId","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","attach","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","updateAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","getGooglePaymentComponent","_googlePaymentInstance","googleBraintreePaymentInstance","_createGooglePayPayload","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","fullName","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","sum","_coupon__WEBPACK_IMPORTED_MODULE_3__","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handlingCostTotal","orderAmount","orderAmountAsInteger","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","socialDataObject","digitalItems","lineItem","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","process","isEnabled","_console","ConsoleLogger","_logToConsole","messages","NoopLogger","logger","getEnvironment","console_logger","console","noop_logger","_couponRequestSender","CouponActionCreator","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","_giftCertificateRequestSender","GiftCertificateActionCreator","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","_strategyRegistry","CustomerStrategyActionCreator","signIn","signOut","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","getVisaCheckout","createInitOptions","settings","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","streetAddress","extendedAddress","locality","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","PaymentStrategyType","VisaCheckoutScriptLoader","V","standard_error","ChasePayScriptLoader","JPMC","Q","RemoteCheckoutRequestSender","methodName","X","$","_remoteCheckoutRequestSender","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","initializeBilling","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","initializeShipping","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","initializePayment","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","loadSettings","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","tt","et","rt","_customerRequestSender","CustomerActionCreator","SignInCustomerRequested","signInCustomer","loadCurrentCheckout","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","signOutCustomer","SignOutCustomerFailed","it","CustomerRequestSender","ot","at","_remoteCheckoutActionCreator","AmazonPayCustomerStrategy","amazonOptions","loadWidget","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","authorize","popup","scope","tokenPrefix","trackAuthorizationEvent","ut","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","BraintreeVisaCheckoutCustomerStrategy","visaCheckoutOptions","initOptions","storeProfile","signInButton","_buttonClassName","init","on","paymentSuccessPayload","_paymentInstrumentSelected","widgetInteraction","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","dt","_chasePayScriptLoader","ChasePayCustomerStrategy","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","fromChasePay","pt","_customerActionCreator","DefaultCustomerStrategy","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","ft","mt","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","yt","_t","_countryRequestSender","CountryActionCreator","loadCountries","Ct","_config","CountryRequestSender","Accept-Language","vt","OrderRequestSender","bt","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","OrderActionCreator","loadOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","validate","submitOrder","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","finalizeOrder","FinalizeOrderFailed","execute","MutationObserverFactory","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","GoogleRecaptcha","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","initRecaptcha","grecaptcha","Mt","_googleRecaptcha","SpamProtectionActionCreator","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","SubmitFailed","Rt","jt","_orderActionCreator","PaymentStrategyActionCreator","strategy","getByMethod","payment_strategy_type","NO_PAYMENT_DATA_REQUIRED","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","finalize","loadOrderPayments","Lt","Nt","CartComparator","cartA","cartB","_normalize","itemA","itemB","localeCompare","giftWrapping","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","Ft","xt","_paymentRequestSender","_paymentRequestTransformer","PaymentActionCreator","SubmitPaymentRequested","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","Bt","PaymentRequestSender","_transformResponse","Gt","Yt","Vt","Kt","Ht","instrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","isVaultedInstrument","vaultAccessToken","geoCountryCode","paymentMethodSelector","Xt","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","paymentSettings","clientSidePaymentProviders","te","invalidFields","_paymentActionCreator","_affirmScriptLoader","AffirmPaymentStrategy","publicKey","_affirm","affirm","payment_argument_invalid_error","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","mode","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","shipping_amount","total","last","full","zipcode","display_name","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","discount_display_name","DISCOUNTED_AMOUNT","affirmJs","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","ae","_afterpayScriptLoader","AfterpayPaymentStrategy","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","afterpaySdk","_redirectToAfterpay","afterpay","orderPayload","countryName","redirect","pe","AfterpayScriptLoader","AfterPay","he","le","me","ignoredKeys","ge","_billingAddressActionCreator","AmazonPayPaymentStrategy","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","walletOptions","amazonOrderReferenceId","design","designMode","onPaymentSelect","_synchronizeBillingAddress","orderReference","onReady","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","isInternalAddressEqual","mapFromInternalAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","Overlay","_registerClick","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","be","cancellable","cancel","race","Ie","_overlay","BraintreePaymentProcessor","_threeDSecureOptions","getPaypal","requestData","_mapToCreditCard","focusWindow","useraction","remove","addFrame","removeFrame","tokenizeCard","get3DS","cancelVerifyCard","verification","cancellable_promise","verifyCard","processedPayment","cvv","expirationDate","ccExpiry","endpoint","Se","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","we","_braintreePaymentProcessor","BraintreeCreditCardPaymentStrategy","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","isCreditCardLike","_isUsingVaulting","tokenizedCard","appendSessionId","_credit","BraintreePaypalPaymentStrategy","braintreeOptions","preloadPaypal","De","_paymentStrategyActionCreator","BraintreeVisaCheckoutPaymentStrategy","visaInitOptions","ze","_cardinalClient","CardinalThreeDSecureFlow","runBinProcess","_getBinNumber","getThreeDSecureData","three_ds_result","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","CardBrand","DigitalWalletType","chasepay_payment_strategy","_wepayRiskClient","_walletEvent$","ChasePayPaymentStrategy","chasepay","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","paymentCryptogram","btoa","reqTokenId","expDate","substr","accountNum","extraData","riskToken","Be","Ge","ConvergePaymentStrategy","PaReq","TermUrl","callback_url","MD","Ye","CreditCardPaymentStrategy","We","_threeDSecureFlow","CyberSourcePaymentStrategy","prepare","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","Ke","_klarnaScriptLoader","KlarnaPaymentStrategy","_klarnaCredit","klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","klarna","client_token","_supportedEUCountries","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","_getUpdateSessionData","res","approved","show_form","He","KlarnaScriptLoader","Klarna","Credit","Ze","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","Je","NoPaymentDataRequiredPaymentStrategy","Xe","OfflinePaymentStrategy","$e","OffsitePaymentStrategy","_shouldSubmitFullPayload","tn","PaypalProPaymentStrategy","_isPaymentAcknowledged","en","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","nn","rn","SagePayPaymentStrategy","an","sn","SquarePaymentStrategy","_syncPaymentMethod","_paymentForm","createSquareForm","_getFormOptions","_getNonceInstrument","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","_showPaymentMethods","methods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","_getCountryCode","pending","setPostalCode","masterpassBtn","elementId","cn","SquareScriptLoader","SqPaymentForm","un","_stripeScriptLoader","StripeV3PaymentStrategy","stripeOptions","stripev3","_stripeV3Client","stripeJs","cardElement","elements","mount","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","unmount","stripeBillingDetails","_mapStripeBillingAddress","stripeShippingDetails","_mapStripeShippingAddress","_getCustomer","shippingDetails","_mapStripeShippingDetails","receipt_email","save_payment_method","billing_details","_mapStripeBillingDetails","dn","StripeV3ScriptLoader","publishableKey","Stripe","betas","pn","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","hn","orderActionCreator","paymentActionCreator","WepayPaymentStrategy","payloadWithToken","_zipScriptLoader","ZipPaymentStrategy","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","gn","ZipScriptLoader","Zip","ProjectionActionType","_instrumentRequestSender","InstrumentActionCreator","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","date","valueOf","now","vaultAccessExpiry","newDate","setMinutes","getMinutes","_isValidVaultAccessToken","getVaultAccessToken","bn","InstrumentResponseTransformer","_transformVaultedInstruments","vaulted_instruments","expires_at","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","In","_transformer","instrument_response_transformer","InstrumentRequestSender","requestContext","_loadInstrumentsWithAddress","_loadInstruments","transformErrorResponse","transformResponse","Sn","wn","An","On","_shippingCountryRequestSender","ShippingCountryActionCreator","En","ShippingCountryRequestSender","Pn","Mn","ShippingStrategyActionCreator","selectOption","kn","_consignmentActionCreator","AmazonPayShippingStrategy","_createAddressBook","optionId","selectShippingOption","AddressBook","onAddressSelect","_synchronizeShippingAddress","Rn","DefaultShippingStrategy","Tn","Dn","cloneDeep","cloneDeepSafe","Ln","jn","createShallowEqualSelector","external_reselect_","Un","create_shallow_equal_selector","Yn","_messageCustomizer","ErrorMessageTransformer","checkout_service","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","error_message_transformer","_selectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","createCheckoutSelectorsFactory","_storeProjection","Synchronize","CheckoutService","_dispatch","loadCheckoutAction","loadConfigAction","loadBillingCountries","loadShippingCountries","continueAsGuest","loadShippingOptions","assignItemsByAddress","unassignItemsByAddress","updateShippingOption","clearError","Vn","Kn","getDefaultLogger","warn","paymentClient","setHost","bigpayBaseUrl","orderRequestSender","order_request_sender","checkoutRequestSender","configActionCreator","spamProtection","google_recaptcha","google_recaptcha_script_loader","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","checkout_validator","billing_address_action_creator","billing_address_request_sender","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","paymentMethodActionCreator","remoteCheckoutRequestSender","remote_checkout_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","amazon_pay_customer_strategy","amazon_pay_script_loader","braintree_visacheckout_customer_strategy","createBraintreeVisaCheckoutPaymentProcessor","visacheckout_script_loader","chasepay_customer_strategy","chasepay_script_loader","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","payment_strategy_action_creator","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","checkoutValidator","payment_action_creator","paymentStrategyActionCreator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","credit_card_payment_strategy","CYBERSOURCE","cybersource_payment_strategy","cardinal_three_d_secure_flow","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","CHASE_PAY","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","createPaymentStrategyRegistry","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","$n","hasAttribute","tr","iframe_embedded_checkout_messenger","_untargetedMessagePoster","_messageHandlers","IframeEmbeddedCheckoutMessenger","_postMessage","_transformError","untargeted","handler","_notifyMessageHandlers","isCustomError","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","ir","parentWindow","parentOrigin","handleFrameLoadedEvent","language_service","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","LanguageService","translationKey","KEY_PREFIX","_hasTranslations","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","sr","cr","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","CurrencyFormatter","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","parsedIntegerAmount","decimalAmount","precision","currency_service","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","CurrencyService","exchangeRate","dr","ButtonType","ButtonColor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","GooglePayPaymentProcessor","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","parseResponse","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","info","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","_mapGooglePayAddressToBillingAddress","GooglePayScriptLoader","initializer","googlepay_payment_processor","googlepay_script_loader","promotions","notifications","map_to_internal_coupon","promotion","banners","placeholders","messageHtml","banner","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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AuB,WACzD,WAAID,GACAn7E,EACAwqE,EACA,IAAIv/B,KAAmBV,MAI/BF,EAASznB,SAASynC,GAAoBgxB,SAAU,WAC5C,WAAIC,GACAt7E,EACAwqE,EACAC,EACAjvE,KAIR6uC,EAASznB,SAASynC,GAAoBkxB,OAAQ,WAC1C,WAAIC,GACAx7E,EACAwqC,EACAggC,EACAC,EACA+M,EACAmC,EACAl4E,EACA,IAAIg6E,GAAmBlxC,MAI/BF,EAASznB,SAASynC,GAAoBC,yBAA0B,WAC5D,WAAIoxB,GACA17E,EACAwqE,KAIRngC,EAASznB,SAASynC,GAAoBtjE,UAAW,WAC7C,WAAI40F,GACA37E,EACAwqE,EACAC,EACA+M,EACA6B,KAIRhvC,EAASznB,SAASynC,GAAoB3jE,iBAAkB,WACpD,WAAIk1F,GACA57E,EACAwqE,EACAC,EACA+M,EACA6B,KAIRhvC,EAASznB,SAASynC,GAAoB1jE,wBAAyB,WAC3D,WAAIi1F,GACA57E,EACAwqE,EACAC,EACA+M,EACA6B,QAKRhvC,EAASznB,SAASynC,GAAoBwxB,wBAAyB,WAC3D,WAAIC,GACA97E,EACAwqC,EACAgtC,EACAmC,EACAlP,EACAD,EACAwN,EAA4CztC,EAAc9oC,GAC1D,IAAIw2E,EAAyB1tC,MAIrCF,EAASznB,SAASynC,GAAoB0xB,UAAW,WAC7C,WAAInd,GACA5+D,EACAwqC,EACAggC,EACAC,EACA+M,EACAmC,EACAl4E,EACA,IAAI02E,EAAqB5tC,GACzB,IAAIyxC,GAAgBzxC,MAI5BF,EAASznB,SAASynC,GAAoB4xB,qBAAsB,WACxD,WAAI7a,GACAphE,EACAwqC,EACAgtC,EACAmC,EACAlP,EACAD,EACAzkF,YACIia,EACA,IAAIqrC,IACA,IAAIN,IACA,IAAIC,IAAsBT,SAO9CF,EAASznB,SAASynC,GAAoB6xB,OAAQ,WAC1C,WAAIC,GACAn8E,EACAwqE,EACAC,EACA,IAAIuR,GAAgBzxC,MAI5BF,EAASznB,SAASynC,GAAoBnf,WAAY,WAC9C,WAAIm4B,GACArjE,EACAwqE,EACAC,EAC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","file":"transients~checkout-cc5d01f8-0a4ebdc2.js","sourcesContent":["export { default as Action } from './action';\nexport { default as DataStore, DataStoreOptions } from './data-store';\nexport { default as DispatchableDataStore, DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nexport {\n    default as ReadableDataStore,\n    Filter,\n    Subscriber,\n    SubscribeOptions,\n    Unsubscriber,\n} from './readable-data-store';\nexport { default as Reducer } from './reducer';\nexport { default as ThunkAction } from './thunk-action';\n\nexport { default as combineReducers, ReducerMap } from './combine-reducers';\nexport { default as composeReducers } from './compose-reducers';\nexport { default as createAction } from './create-action';\nexport { default as createDataStore } from './create-data-store';\nexport { default as createErrorAction } from './create-error-action';\nexport { default as deepFreeze } from './deep-freeze';\n","export default class Timeout {\n    private _promise: Promise<any>;\n    private _resolve: () => void;\n    private _timeoutToken?: number;\n\n    constructor(\n        private _delay?: number\n    ) {\n        // tslint:disable-next-line:no-empty\n        this._resolve = () => {};\n\n        this._promise = new Promise(resolve => {\n            this._resolve = resolve;\n        });\n    }\n\n    onComplete(callback: () => void): void {\n        this._promise.then(callback);\n    }\n\n    complete(): void {\n        this._resolve();\n\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    }\n\n    start(): void {\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(() => this.complete(), this._delay);\n        }\n    }\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isNil(value) {\n    if (value === null || value === undefined) {\n        return true;\n    }\n\n    return false;\n}\n","import isObject from './is-object';\n\n/**\n * @param {Object} object\n * @param {Function} predicateFn\n * @returns {Object}\n */\nexport default function omitProperty(object, predicateFn) {\n    if (!isObject(object)) {\n        return object;\n    }\n\n    const keys = Object.keys(object);\n\n    return keys.reduce((result, key) => {\n        const value = object[key];\n\n        if (!predicateFn(value)) {\n            result[key] = value;\n        }\n\n        return result;\n    }, {});\n}\n","import { MULTI_OPTION } from '../payment-method-types';\nimport {\n    BRAINTREE,\n    BRAINTREE_GOOGLEPAY,\n    BRAINTREE_PAYPAL,\n    BRAINTREE_PAYPAL_CREDIT,\n    BRAINTREE_VISACHECKOUT,\n} from '../payment-method-ids';\n\n/**\n * @param {string} id\n * @return {Boolean}\n */\nfunction isBraintreePaymentMethod(id) {\n    switch (id) {\n    case BRAINTREE_PAYPAL:\n    case BRAINTREE_PAYPAL_CREDIT:\n    case BRAINTREE_VISACHECKOUT:\n    case BRAINTREE_GOOGLEPAY:\n        return true;\n    default:\n        return false;\n    }\n}\n\nexport default class PaymentMethodIdMapper {\n    /**\n     * @returns {PaymentMethodIdMapper}\n     */\n    static create() {\n        return new PaymentMethodIdMapper();\n    }\n\n    /**\n     * @param {PaymentMethod} paymentMethod\n     * @returns {string}\n     */\n    mapToId(paymentMethod) {\n        let { id } = paymentMethod;\n\n        if (paymentMethod.method === MULTI_OPTION) {\n            id = paymentMethod.gateway;\n        }\n\n        if (isBraintreePaymentMethod(id)) {\n            return BRAINTREE;\n        }\n\n        return id;\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    get host() {\n        return this.config.host;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getOffsitePaymentUrl() {\n        return `${this.host}/pay/initialize`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getPaymentUrl() {\n        return `${this.host}/api/public/v1/orders/payments`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getGenerateClientTokenUrl() {\n        return `${this.host}/api/v2/public/payments/client_tokens`;\n    }\n}\n","import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n","export const GET = 'GET';\nexport const POST = 'POST';\nexport const DELETE = 'DELETE';\n","import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash/merge';\n\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options?: RequestSenderOptions\n    ) {}\n\n    sendRequest<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(options);\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n}\n","import { merge } from 'lodash';\nimport {\n    defer,\n    from,\n    of,\n    throwError,\n    BehaviorSubject,\n    Observable,\n    Subject,\n    Subscribable,\n    SubscribableOrPromise\n} from 'rxjs';\nimport {\n    catchError,\n    concatMap,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    mergeMap,\n    scan,\n    skip,\n    tap,\n} from 'rxjs/operators';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport deepFreeze from './deep-freeze';\nimport DispatchableDataStore, { DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nimport isObservableActionLike from './is-observable-action-like';\nimport noopActionTransformer from './noop-action-transformer';\nimport noopStateTransformer from './noop-state-transformer';\nimport ReadableDataStore, { Filter, Subscriber, SubscribeOptions, Unsubscriber } from './readable-data-store';\nimport Reducer from './reducer';\nimport ThunkAction from './thunk-action';\n\nexport default class DataStore<TState, TAction extends Action = Action, TTransformedState = TState> implements\n    ReadableDataStore<TTransformedState>, DispatchableDataStore<TTransformedState, TAction> {\n    private _reducer: Reducer<TState, TAction>;\n    private _options: DataStoreOptions<TState, TAction, TTransformedState>;\n    private _notification$: Subject<TTransformedState>;\n    private _dispatchers: { [key: string]: Dispatcher<TAction> };\n    private _dispatchQueue$: Subject<Dispatcher<TAction>>;\n    private _state$: BehaviorSubject<TTransformedState>;\n    private _errors: { [key: string]: Subject<Error> };\n\n    constructor(\n        reducer: Reducer<TState, TAction>,\n        initialState: Partial<TState> = {},\n        options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n    ) {\n        this._reducer = reducer;\n        this._options = {\n            actionTransformer: noopActionTransformer,\n            equalityCheck: shallowEqual,\n            shouldWarnMutation: true,\n            stateTransformer: noopStateTransformer,\n            ...options,\n        };\n        this._state$ = new BehaviorSubject(this._options.stateTransformer(initialState as TState));\n        this._notification$ = new Subject();\n        this._dispatchers = {};\n        this._dispatchQueue$ = new Subject();\n        this._errors = {};\n\n        this._dispatchQueue$\n            .pipe(\n                mergeMap(dispatcher$ => dispatcher$.pipe(concatMap(action$ => action$))),\n                filter(action => !!action.type),\n                scan(\n                    (states: StateTuple<TState, TTransformedState>, action: TAction) =>\n                        this._transformStates(states, action),\n                    {\n                        state: initialState as TState,\n                        transformedState: this._state$.getValue(),\n                    }\n                ),\n                distinctUntilChanged(({ state: stateA }, { state: stateB }) =>\n                    this._options.equalityCheck(stateA, stateB)\n                ),\n                map(({ transformedState }) => transformedState)\n            )\n            .subscribe(this._state$);\n\n        this.dispatch({ type: 'INIT' } as TAction);\n    }\n\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState> {\n        if (isObservableActionLike(action)) {\n            return this._dispatchObservableAction(action, options);\n        }\n\n        if (typeof action === 'function') {\n            return this._dispatchThunkAction(action, options);\n        }\n\n        return this._dispatchAction(action);\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    notifyState(): void {\n        this._notification$.next(this.getState());\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n\n        let state$: Observable<TTransformedState> = this._state$;\n\n        if (filters.length > 0) {\n            state$ = state$.pipe(\n                distinctUntilChanged((stateA, stateB) =>\n                    filters.every(filterFn =>\n                        this._options.equalityCheck(filterFn(stateA), filterFn(stateB))\n                    )\n                )\n            );\n        }\n\n        if (options && options.initial === false) {\n            state$ = state$.pipe(skip(1));\n        }\n\n        const subscriptions = [\n            state$.subscribe(subscriber),\n            this._notification$.subscribe(subscriber),\n        ];\n\n        return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private _transformStates(\n        states: StateTuple<TState, TTransformedState>,\n        action: TAction\n    ): StateTuple<TState, TTransformedState> {\n        try {\n            const newState = this._options.shouldWarnMutation === false ?\n                this._reducer(states.state, action) :\n                deepFreeze(this._reducer(states.state, action), {\n                    equalityCheck: this._options.equalityCheck,\n                    previousValue: states.state,\n                });\n            const transformedState = this._options.stateTransformer(newState);\n\n            return { state: newState, transformedState };\n        } catch (error) {\n            this._getDispatchError(action.meta && action.meta.queueId).next(error);\n\n            return { state: states.state, transformedState: states.transformedState };\n        }\n    }\n\n    private _dispatchAction<TDispatchAction extends TAction>(\n        action: TDispatchAction\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(\n            action.error ? throwError(action) : of(action)\n        );\n    }\n\n    private _dispatchObservableAction<TDispatchAction extends TAction>(\n        action$: SubscribableOrPromise<TDispatchAction>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return new Promise((resolve, reject) => {\n            const error$ = this._getDispatchError(options.queueId);\n            const transformedAction$ = this._options.actionTransformer(\n                from(action$).pipe(\n                    map(action =>\n                        options.queueId ?\n                            merge({}, action, { meta: { queueId: options.queueId } }) :\n                            action\n                    )\n                ) as Subscribable<TDispatchAction>\n            );\n\n            this._getDispatcher(options.queueId).next(\n                from(transformedAction$)\n                    .pipe(\n                        map((action, index) => {\n                            if (index === 0) {\n                                error$.pipe(first()).subscribe(reject);\n                            }\n\n                            if (action.error) {\n                                reject(action.payload);\n                            }\n\n                            return action;\n                        }),\n                        catchError(action => {\n                            reject(action instanceof Error ? action : action.payload);\n\n                            return of(action);\n                        }),\n                        tap({\n                            complete: () => {\n                                resolve(this.getState());\n                            },\n                        })\n                    )\n            );\n        });\n    }\n\n    private _dispatchThunkAction<TDispatchAction extends TAction>(\n        thunkAction: ThunkAction<TDispatchAction, TTransformedState>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(defer(() => thunkAction(this)), options);\n    }\n\n    private _getDispatcher(queueId: string = 'default'): Dispatcher<TAction> {\n        if (!this._dispatchers[queueId]) {\n            this._dispatchers[queueId] = new Subject();\n\n            this._dispatchQueue$.next(this._dispatchers[queueId]);\n        }\n\n        return this._dispatchers[queueId];\n    }\n\n    private _getDispatchError(queueId: string = 'default'): Subject<Error> {\n        if (!this._errors[queueId]) {\n            this._errors[queueId] = new Subject();\n        }\n\n        return this._errors[queueId];\n    }\n}\n\nexport interface DataStoreOptions<TState, TAction, TTransformedState> {\n    shouldWarnMutation: boolean;\n    actionTransformer(action: Subscribable<TAction>): Subscribable<TAction>;\n    equalityCheck(valueA: any, valueB: any): boolean;\n    stateTransformer(state: TState): TTransformedState;\n}\n\ninterface StateTuple<TState, TTransformedState> {\n    state: TState;\n    transformedState: TTransformedState;\n}\n\ntype Dispatcher<TAction> = Subject<Subscribable<TAction>>;\n","import { isPlainObject } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nexport interface DeepFreezeOptions<T> {\n    previousValue?: T;\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n\nexport default function deepFreeze<T>(object: T[], options?: DeepFreezeOptions<T>): ReadonlyArray<T>;\nexport default function deepFreeze<T extends object>(object: T, options?: DeepFreezeOptions<T>): Readonly<T>;\nexport default function deepFreeze<T>(object: T, options?: DeepFreezeOptions<T>): T;\nexport default function deepFreeze<T>(\n    object: T[] | T,\n    options?: DeepFreezeOptions<T>\n): ReadonlyArray<T> | Readonly<T> | T {\n    try {\n        const { equalityCheck = shallowEqual, previousValue = null } = options || {};\n\n        if (equalityCheck(object, previousValue) && Object.isFrozen(previousValue)) {\n            return previousValue as T;\n        }\n\n        if (Object.isFrozen(object) || (!Array.isArray(object) && !isPlainObject(object))) {\n            return object;\n        }\n\n        if (Array.isArray(object)) {\n            return Object.freeze(object.map((value, index) =>\n                deepFreeze(value, {\n                    equalityCheck,\n                    previousValue: Array.isArray(previousValue) ? previousValue[index] : undefined,\n                })\n            ));\n        }\n\n        return Object.freeze(Object.getOwnPropertyNames(object).reduce((result, key) => {\n            result[key as keyof T] = deepFreeze(object[key as keyof T], {\n                equalityCheck,\n                previousValue: previousValue && previousValue.hasOwnProperty(key) ?\n                    (previousValue as any)[key] :\n                    undefined,\n            });\n\n            return result;\n        }, {} as T));\n    } catch (error) {\n        // Browsers that only support ES5 will throw `TypeError` when checking\n        // if a primitive value is frozen or trying to freeze a primitive value.\n        if (error instanceof TypeError) {\n            return object;\n        }\n\n        throw error;\n    }\n}\n","import { assign } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>,\n    options?: CombineReducersOptions\n): Reducer<TState, TAction> {\n    const { equalityCheck = shallowEqual } = options || {};\n\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (equalityCheck(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n\nexport interface CombineReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import { omitBy } from 'lodash';\n\nimport Action from './action';\n\nexport default function createAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    if (typeof type !== 'string' || type === '') {\n        throw new Error('`type` must be a string');\n    }\n\n    return { type, ...omitBy({ payload, meta }, value => value === undefined) };\n}\n","export default class ScriptLoader {\n    private _scripts: { [key: string]: Promise<Event> } = {};\n\n    loadScript(src: string): Promise<Event> {\n        if (!this._scripts[src]) {\n            this._scripts[src] = new Promise((resolve, reject) => {\n                const script = document.createElement('script') as LegacyHTMLScriptElement;\n\n                script.onload = event => resolve(event);\n                script.onreadystatechange = event => resolve(event);\n                script.onerror = event => {\n                    delete this._scripts[src];\n                    reject(event);\n                };\n                script.async = true;\n                script.src = src;\n\n                document.body.appendChild(script);\n            });\n        }\n\n        return this._scripts[src];\n    }\n}\n\ninterface LegacyHTMLScriptElement extends HTMLScriptElement {\n    // `onreadystatechange` is needed to support legacy IE\n    onreadystatechange(this: HTMLElement, event: Event): any;\n}\n","import ScriptLoader from './script-loader';\n\nexport default function createScriptLoader(): ScriptLoader {\n    return new ScriptLoader();\n}\n","import FormBuilder from './form-builder';\nimport FormPosterOptions from './form-poster-options';\nimport { isAbsoluteUrl, joinPaths } from './url-utils';\n\nexport default class FormPoster {\n    /**\n     * @internal\n     */\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _options?: FormPosterOptions\n    ) {}\n\n    postForm(url: string, data: { [key: string]: any }, callback?: () => void): void {\n        const form = this._formBuilder.build(this._prependHost(url), data);\n\n        window.addEventListener('unload', function handleUnload() {\n            window.removeEventListener('unload', handleUnload);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n        // In order to submit the form, the form must be attached to DOM.\n        document.body.appendChild(form);\n        form.submit();\n        document.body.removeChild(form);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || isAbsoluteUrl(url)) {\n            return url;\n        }\n\n        return joinPaths(this._options.host, url);\n    }\n}\n","export const API = 'PAYMENT_TYPE_API';\nexport const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n","export const APPLICATION_JSON = 'application/json';\n","import * as cookie from 'js-cookie';\n\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestSender from './request-sender';\nimport RequestSenderOptions from './request-sender-options';\n\nexport default function createRequestSender(options?: RequestSenderOptions): RequestSender {\n    return new RequestSender(\n        new RequestFactory(),\n        new PayloadTransformer(),\n        cookie,\n        options\n    );\n}\n","import Headers from './headers';\nimport RequestOptions from './request-options';\nimport Response from './response';\nimport toFormUrlEncoded from './to-form-url-encoded';\n\nconst JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nconst FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\n\nexport default class PayloadTransformer {\n    toRequestBody(options: RequestOptions): any {\n        const contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return toFormUrlEncoded(options.body);\n            }\n        }\n\n        return options.body;\n    }\n\n    toResponse(xhr: XMLHttpRequest): Response {\n        const headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n\n        // Using `responseText` to support legacy IE\n        const body = this._parseResponseBody(\n            'response' in xhr ? xhr.response : (xhr as any).responseText,\n            headers\n        );\n\n        return {\n            body,\n            headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private _parseResponseBody(body: string, headers: Headers): any {\n        const contentType = this._getHeader(headers, 'Content-Type');\n\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n\n        return body;\n    }\n\n    private _parseResponseHeaders(rawHeaders: string): Headers {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return {\n                ...headers,\n                [key.toLowerCase()]: parts.join(':').trim(),\n            };\n        }, {});\n    }\n\n    private _getHeader(headers: Headers, key: string): string {\n        if (!headers || !key) {\n            return '';\n        }\n\n        return headers[key] || headers[key.toLowerCase()] || '';\n    }\n}\n","export default function toFormUrlEncoded(data: any): string {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params)}`;\n    }\n}\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","export default function isPromise(promise: any): promise is PromiseLike<any> {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\n","import Timeout from './timeout';\n\nexport default function createTimeout(delay?: number): Timeout {\n    return new Timeout(delay);\n}\n","import { Subscribable, SubscribableOrPromise } from 'rxjs';\n\nimport Action from './action';\nimport { DispatchableAction } from './dispatchable-data-store';\n\nexport default function isObservableActionLike<TAction extends Action = Action>(\n    action: DispatchableAction<TAction>\n): action is SubscribableOrPromise<TAction> {\n    return (\n        typeof (action as Subscribable<TAction>).subscribe === 'function' ||\n        typeof (action as PromiseLike<TAction>).then === 'function'\n    );\n}\n","import { Subscribable } from 'rxjs';\n\nimport Action from './action';\n\nexport default function noopActionTransformer<TAction extends Action, TTransformedAction extends Action = TAction>(\n    action: Subscribable<TAction>\n): Subscribable<TTransformedAction> {\n    return action as any as Subscribable<TTransformedAction>;\n}\n","export default function noopStateTransformer<TState, TTransformedState = TState>(\n    state: TState\n): TTransformedState {\n    return state as any as TTransformedState;\n}\n","import { curryRight, flowRight } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TStateA, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TState, action: TAction) => TStateA,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TState, action: TAction) => TStateB,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TState, action: TAction) => TStateC,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TStateD, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TStateD, action: TAction) => TStateC,\n    reducerE: (state: TState, action: TAction) => TStateD,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...args: any[]\n): Reducer<TState, TAction> {\n    let reducers: Array<Reducer<TState, TAction>> = args;\n    let options: ComposeReducersOptions = {};\n\n    if (typeof args[args.length - 1] === 'object') {\n        reducers = args.slice(0, -1);\n        options = { ...options, ...args[args.length - 1] };\n    }\n\n    const { equalityCheck = shallowEqual } = options;\n\n    return (state, action) => {\n        const newState = flowRight(\n            reducers\n                .filter(reducer => reducer.length === 2)\n                .map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return equalityCheck(state, newState) ? state : newState;\n    };\n}\n\nexport interface ComposeReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import Action from './action';\nimport combineReducers, { ReducerMap } from './combine-reducers';\nimport DataStore, { DataStoreOptions } from './data-store';\nimport Reducer from './reducer';\n\nexport default function createDataStore<TState, TAction extends Action = Action, TTransformedState = TState>(\n    reducer: Reducer<TState, TAction> | ReducerMap<TState, TAction>,\n    initialState?: Partial<TState>,\n    options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n): DataStore<TState, TAction, TTransformedState> {\n    if (typeof reducer === 'function') {\n        return new DataStore(reducer, initialState, options);\n    }\n\n    return new DataStore(\n        combineReducers(reducer, { equalityCheck: options && options.equalityCheck }),\n        initialState,\n        options\n    );\n}\n","import Action from './action';\nimport createAction from './create-action';\n\nexport default function createErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    return {\n        ...createAction(type, payload, meta),\n        error: true,\n    };\n}\n","import createScriptLoader from './create-script-loader';\nimport ScriptLoader from './script-loader';\n\nlet instance: ScriptLoader;\n\nexport default function getScriptLoader(): ScriptLoader {\n    if (!instance) {\n        instance = createScriptLoader();\n    }\n\n    return instance;\n}\n","import FormBuilder from './form-builder';\nimport FormPoster from './form-poster';\nimport FormPosterOptions from './form-poster-options';\n\nexport default function createFormPoster(options?: FormPosterOptions): FormPoster {\n    const formBuilder = new FormBuilder();\n    const formPoster = new FormPoster(formBuilder, options);\n\n    return formPoster;\n}\n","export default class FormBuilder {\n    build(url: string, data: { [key: string]: any }): HTMLFormElement {\n        const form = document.createElement('form');\n\n        form.style.display = 'none';\n\n        form.setAttribute('action', url);\n        form.setAttribute('method', 'POST');\n        form.setAttribute('target', '_top');\n\n        Object.keys(data)\n            .forEach(key => {\n                const value = data[key];\n\n                form.appendChild(this._createInput(value, key));\n            });\n\n        return form;\n    }\n\n    private _createInput(value: any, key: string): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.setAttribute('name', key);\n        input.setAttribute('type', 'hidden');\n        input.setAttribute('value', value);\n\n        return input;\n    }\n}\n","export function isAbsoluteUrl(url: string): boolean {\n    return /^https?:\\/\\//.test(url);\n}\n\nexport function joinPaths(pathA: string, pathB: string): string {\n    return `${removeTrailingSlash(pathA)}/${removeLeadingSlash(pathB)}`;\n}\n\nfunction removeTrailingSlash(path: string): string {\n    return path.replace(/\\/$/, '');\n}\n\nfunction removeLeadingSlash(path: string): string {\n    return path.replace(/^\\//, '');\n}\n","import Client from './client/client';\n\n/**\n * @param {Object} [config]\n * @returns {Client}\n */\nexport function createClient(config) {\n    return Client.create(config);\n}\n","import objectAssign from 'object-assign';\nimport OffsitePaymentInitializer from '../payment/offsite-payment-initializer';\nimport PaymentSubmitter from '../payment/payment-submitter';\nimport ClientTokenGenerator from '../payment/client-token-generator';\nimport StoreRequestSender from '../store/store-request-sender';\nimport DEFAULT_CONFIG from './default-config';\n\nexport default class Client {\n    /**\n     * @param {Object} config\n     * @returns {Client}\n     */\n    static create(config) {\n        const clientConfig = objectAssign({}, DEFAULT_CONFIG, config);\n        const offsitePaymentInitializer = OffsitePaymentInitializer.create(clientConfig);\n        const paymentSubmitter = PaymentSubmitter.create(clientConfig);\n        const clientTokenGenerator = ClientTokenGenerator.create(clientConfig);\n        const storeRequestSender = StoreRequestSender.create(clientConfig);\n\n        return new Client(\n            clientConfig,\n            paymentSubmitter,\n            offsitePaymentInitializer,\n            clientTokenGenerator,\n            storeRequestSender\n        );\n    }\n\n    /**\n     * @param {Object} config\n     * @param {PaymentSubmitter} paymentSubmitter\n     * @param {OffsitePaymentInitializer} offsitePaymentInitializer\n     * @param {ClientTokenGenerator} clientTokenGenerator\n     * @param {StoreRequestSender} storeRequestSender\n     */\n    constructor(\n        config,\n        paymentSubmitter,\n        offsitePaymentInitializer,\n        clientTokenGenerator,\n        storeRequestSender\n    ) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n\n        /**\n         * @private\n         * @type {PaymentSubmitter}\n         */\n        this.paymentSubmitter = paymentSubmitter;\n\n        /**\n         * @private\n         * @type {OffsitePaymentInitializer}\n         */\n        this.offsitePaymentInitializer = offsitePaymentInitializer;\n\n        /**\n         * @private\n         * @type {ClientTokenGenerator}\n         */\n        this.clientTokenGenerator = clientTokenGenerator;\n\n        /**\n         * @private\n         * @type {StoreRequestSender}\n         */\n        this.storeRequestSender = storeRequestSender;\n    }\n\n    /**\n     * @param {string} host\n     * @returns {void}\n     */\n    setHost(host) {\n        this.config.host = host;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    initializeOffsitePayment(data, callback) {\n        this.offsitePaymentInitializer.initializeOffsitePayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    submitPayment(data, callback) {\n        this.paymentSubmitter.submitPayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        this.clientTokenGenerator.generateClientToken(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        this.storeRequestSender.loadInstruments(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {AddressData} data.shippingAddress\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        this.storeRequestSender.loadInstrumentsWithAddress(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {CreditCard} data.creditCard\n     * @param {AddressData} data.billingAddress\n     * @param {boolean} data.defaultInstrument\n     * @param {string} data.providerName\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        this.storeRequestSender.postShopperInstrument(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.instrumentId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        this.storeRequestSender.deleteShopperInstrument(data, callback);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { HOSTED } from './payment-types';\nimport PayloadMapper from './offsite-payment-mappers/payload-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class OffsitePaymentInitializer {\n    /**\n     * @param {Object} config\n     * @returns {OffsitePaymentInitializer}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const formPoster = createFormPoster();\n        const payloadMapper = PayloadMapper.create();\n\n        return new OffsitePaymentInitializer(urlHelper, formPoster, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {FormPoster} formPoster\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, formPoster, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {FormPoster}\n         */\n        this.formPoster = formPoster;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    initializeOffsitePayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== HOSTED) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getOffsitePaymentUrl();\n\n        this.formPoster.postForm(url, payload, callback);\n    }\n}\n","import objectAssign from 'object-assign';\nimport { omitNil, toString } from '../../common/utils';\nimport AddressMapper from './address-mapper';\nimport CustomerMapper from './customer-mapper';\nimport MetaMapper from './meta-mapper';\nimport PaymentMethodIdMapper from '../payment-method-mappers/payment-method-id-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const addressMapper = AddressMapper.create();\n        const customerMapper = CustomerMapper.create();\n        const metaMapper = MetaMapper.create();\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper);\n    }\n\n    /**\n     * @param {AddressMapper} addressMapper\n     * @param {CustomerMapper} customerMapper\n     * @param {MetaMapper} metaMapper\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @param {StoreMapper} storeMapper\n     * @returns {Object}\n     */\n    constructor(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper) {\n        /**\n         * @private\n         * @type {AddressMapper}\n         */\n        this.addressMapper = addressMapper;\n\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {MetaMapper}\n         */\n        this.metaMapper = metaMapper;\n\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { authToken, order = {}, paymentMethod = {} } = data;\n\n        const payload = objectAssign(\n            {\n                amount: order.grandTotal ? order.grandTotal.integerAmount : null,\n                bc_auth_token: authToken,\n                currency: order.currency,\n                gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n                notify_url: order.callbackUrl,\n                order_id: order.orderId ? toString(order.orderId) : null,\n                page_title: document.title ? document.title : null,\n                payment_method_id: paymentMethod.id,\n                reference_id: order.orderId ? toString(order.orderId) : null,\n                return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            },\n            this.addressMapper.mapToBillingAddress(data),\n            this.customerMapper.mapToCustomer(data),\n            this.metaMapper.mapToMeta(data),\n            this.addressMapper.mapToShippingAddress(data),\n            this.storeMapper.mapToStore(data)\n        );\n\n        return omitNil(payload);\n    }\n}\n","/**\n * @param {array|string} items\n * @param {array|string} item\n * @returns {boolean}\n */\nexport default function includes(items, item) {\n    if (!Array.isArray(items) && typeof items !== 'string') {\n        return false;\n    }\n\n    return items.indexOf(item) !== -1;\n}\n","import isEmptyStringOrNil from './is-emptystring-or-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitEmptyStringAndNil(object) {\n    return omitProperty(object, isEmptyStringOrNil);\n}\n","import isEmptyString from './is-empty-string';\nimport isNil from './is-nil';\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyStringOrNil(value) {\n    return isEmptyString(value) || isNil(value);\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyString(value) {\n    return value === '';\n}\n","import isNil from './is-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitNil(object) {\n    return omitProperty(object, isNil);\n}\n","/**\n * @param {*} value\n * @returns {number}\n */\nexport default function toNumber(value) {\n    return parseFloat(value) || 0;\n}\n","/**\n * @param {string} string\n * @returns {string}\n */\nexport default function toSnakeCase(string) {\n    if (typeof string !== 'string') {\n        return string;\n    }\n\n    return string.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2')\n        .replace(/[-\\s]+/g, '_')\n        .toLowerCase();\n}\n","/**\n * @param {*} value\n * @returns {string}\n */\nexport default function toString(value) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'number' && !isNaN(value)) {\n        return value.toString();\n    }\n\n    return '';\n}\n","import { omitNil, toSnakeCase } from '../../common/utils';\n\nexport default class AddressMapper {\n    /**\n     * @returns {AddressMapper}\n     */\n    static create() {\n        return new AddressMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        return this.mapToAddress(data, 'billingAddress');\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n        const formattedAddressKey = toSnakeCase(addressKey);\n\n        return omitNil({\n            [`${formattedAddressKey}_city`]: address.city,\n            [`${formattedAddressKey}_company`]: address.company,\n            [`${formattedAddressKey}_country_code`]: address.countryCode,\n            [`${formattedAddressKey}_country`]: address.country,\n            [`${formattedAddressKey}_first_name`]: address.firstName,\n            [`${formattedAddressKey}_last_name`]: address.lastName,\n            [`${formattedAddressKey}_phone`]: address.phone,\n            [`${formattedAddressKey}_state_code`]: address.provinceCode,\n            [`${formattedAddressKey}_state`]: address.province,\n            [`${formattedAddressKey}_street_1`]: address.addressLine1,\n            [`${formattedAddressKey}_street_2`]: address.addressLine2,\n            [`${formattedAddressKey}_zip`]: address.postCode,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {}, store = {} } = data;\n\n        return omitNil({\n            customer_browser_info: navigator.userAgent,\n            customer_email: customer.email,\n            customer_first_name: customer.firstName,\n            customer_geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            customer_last_name: customer.lastName,\n            customer_locale: store.storeLanguage,\n            customer_name: customer.name,\n            customer_phone: customer.phoneNumber,\n            customer_reference: customer.email,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class MetaMapper {\n    /**\n     * @returns {MetaMapper}\n     */\n    static create() {\n        return new MetaMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToMeta(data) {\n        const { source } = data;\n\n        return omitNil({\n            meta_referrer: document.referrer,\n            meta_source: source,\n            meta_user_agent: navigator.userAgent,\n        });\n    }\n}\n","export const CREDIT_CARD = 'credit-card';\nexport const MULTI_OPTION = 'multi-option';\n","export const BRAINTREE = 'braintree';\nexport const BRAINTREE_PAYPAL = 'braintreepaypal';\nexport const BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit';\nexport const BRAINTREE_VISACHECKOUT = 'braintreevisacheckout';\nexport const BRAINTREE_GOOGLEPAY = 'googlepaybraintree';\n","import { omitNil, toString } from '../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            store_hash: store.storeHash,\n            store_id: store.storeId ? toString(store.storeId) : null,\n        });\n    }\n}\n","import { API } from './payment-types';\nimport PayloadMapper from './v1/payment-mappers/payload-mapper';\nimport RequestSender from '../common/http-request/request-sender';\nimport UrlHelper from './url-helper';\n\nexport default class PaymentSubmitter {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const payloadMapper = PayloadMapper.create();\n\n        return new PaymentSubmitter(urlHelper, requestSender, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    submitPayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== API) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getPaymentUrl();\n        const options = {\n            headers: this.payloadMapper.mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CustomerMapper from './customer-mapper';\nimport OrderMapper from './order-mapper';\nimport PaymentMapper from './payment-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const customerMapper = CustomerMapper.create();\n        const orderMapper = OrderMapper.create();\n        const paymentMapper = PaymentMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(customerMapper, orderMapper, paymentMapper, storeMapper);\n    }\n\n    /**\n     * @param {CustomerMapper} customerMapper\n     * @param {OrderMapper} orderMapper\n     * @param {PaymentMapper} paymentMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(customerMapper, orderMapper, paymentMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {OrderMapper}\n         */\n        this.orderMapper = orderMapper;\n\n        /**\n         * @private\n         * @type {PaymentMapper}\n         */\n        this.paymentMapper = paymentMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            customer: this.customerMapper.mapToCustomer(data),\n            notify_url: order.callbackUrl,\n            order: this.orderMapper.mapToOrder(data),\n            payment: this.paymentMapper.mapToPayment(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToHeaders(data) {\n        const { authToken } = data;\n\n        return omitNil({\n            Authorization: authToken,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {} } = data;\n\n        return omitNil({\n            customer_group: customer.customerGroupName ? { name: customer.customerGroupName } : null,\n            geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            id: customer.customerId ? toString(customer.customerId) : null,\n            session_token: quoteMeta.request ? quoteMeta.request.sessionHash : null,\n        });\n    }\n}\n","import { omitEmptyStringAndNil, omitNil, toString } from '../../../common/utils';\n\nexport default class OrderMapper {\n    /**\n     * @returns {OrderMapper}\n     */\n    static create() {\n        return new OrderMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrder(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            billing_address: this.mapToBillingAddress(data),\n            coupons: this.mapToCoupons(data),\n            currency: order.currency,\n            id: order.orderId ? toString(order.orderId) : null,\n            items: this.mapToItems(data),\n            shipping: this.mapToShipping(data),\n            shipping_address: this.mapToShippingAddress(data),\n            token: order.token,\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        const { customer = {} } = data;\n        const address = this.mapToAddress(data, 'billingAddress');\n\n        if (customer.email) {\n            address.email = customer.email;\n        }\n\n        return address;\n    }\n\n    /**\n     * @private\n     * @param  {PaymentRequestData} data\n     * @return {Shipping[]}\n     */\n    mapToShipping(data) {\n        const { description } = data.shippingOption || {};\n\n        if (description) {\n            return [{\n                method: description,\n            }];\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Coupon[]}\n     */\n    mapToCoupons({ order = {} }) {\n        if (order.coupon && order.coupon.coupons) {\n            return order.coupon.coupons.map(({ code }) => ({ code }));\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n\n        return omitEmptyStringAndNil({\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            country: address.country,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            state_code: address.provinceCode,\n            state: address.province,\n            street_1: address.addressLine1,\n            street_2: address.addressLine2,\n            zip: address.postCode,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            code: itemData.id,\n            variant_id: itemData.variantId,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            grand_total: order.grandTotal ? order.grandTotal.integerAmount : null,\n            handling: order.handling ? order.handling.integerAmount : null,\n            shipping: order.shipping ? order.shipping.integerAmount : null,\n            subtotal: order.subtotal ? order.subtotal.integerAmount : null,\n            tax: order.taxTotal ? order.taxTotal.integerAmount : null,\n        });\n    }\n}\n","export { default as includes } from './includes';\nexport { default as isNil } from './is-nil';\nexport { default as isObject } from './is-object';\nexport { default as omitEmptyStringAndNil } from './omit-emptystring-and-nil';\nexport { default as omitNil } from './omit-nil';\nexport { default as omitProperty } from './omit-property';\nexport { default as toNumber } from './to-number';\nexport { default as toSnakeCase } from './to-snake-case';\nexport { default as toString } from './to-string';\n","import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n        };\n\n        const method = paymentMethod.method;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            hash: store.storeHash,\n            id: store.storeId ? toString(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n}\n","import { APPLICATION_JSON } from './content-types';\nimport { GET } from './method-types';\n\nconst DEFAULT_OPTIONS = {\n    headers: {\n        Accept: APPLICATION_JSON,\n        'Content-Type': APPLICATION_JSON,\n    },\n    method: GET,\n};\n\nexport default DEFAULT_OPTIONS;\n","import { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return { data, status, statusText };\n    }\n}\n","export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport ClientTokenMapper from './v2/payment-mappers/client-token-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class ClientTokenGenerator {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const clientTokenMapper = ClientTokenMapper.create();\n\n        return new ClientTokenGenerator(urlHelper, requestSender, clientTokenMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {ClientTokenMapper} clientTokenMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, clientTokenMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {ClientTokenMapper}\n         */\n        this.clientTokenMapper = clientTokenMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        const url = this.urlHelper.getGenerateClientTokenUrl();\n        const payload = this.clientTokenMapper.mapToClientToken(data);\n\n        this.requestSender.postRequest(url, payload, {}, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CartMapper from './cart-mapper';\nimport GatewayMapper from './gateway-mapper';\nimport QuoteMapper from './quote-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class ClientTokenMapper {\n    /**\n     * @returns {ClientTokenMapper}\n     */\n    static create() {\n        const cartMapper = CartMapper.create();\n        const gatewayMapper = GatewayMapper.create();\n        const quoteMapper = QuoteMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new ClientTokenMapper(cartMapper, gatewayMapper, quoteMapper, storeMapper);\n    }\n\n    /**\n     * @param {CartMapper} cartMapper\n     * @param {GatewayMapper} gatewayMapper\n     * @param {QuoteMapper} quoteMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(cartMapper, gatewayMapper, quoteMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CartMapper}\n         */\n        this.cartMapper = cartMapper;\n\n        /**\n         * @private\n         * @type {GatewayMapper}\n         */\n        this.gatewayMapper = gatewayMapper;\n\n        /**\n         * @private\n         * @type {QuoteMapper}\n         */\n        this.quoteMapper = quoteMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToClientToken(data) {\n        return omitNil({\n            cart: this.cartMapper.mapToCart(data),\n            gateway: this.gatewayMapper.mapToGateway(data),\n            quote: this.quoteMapper.mapToQuote(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class CartMapper {\n    /**\n     * @returns {CartMapper}\n     */\n    static create() {\n        return new CartMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCart(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            currency_code: cart.currency,\n            items: this.mapToItems(data),\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object[]}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            discount_amount: itemData.integerDiscount,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n            tax_amount: itemData.integerTax,\n            amount: itemData.integerAmountAfterDiscount,\n            type: this.mapToType(itemData),\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            discount_total: cart.discount ? cart.discount.integerAmount : null,\n            grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,\n            shipping_total: cart.shipping ? cart.shipping.integerAmount : null,\n            subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,\n            surcharge_total: cart.handling ? cart.handling.integerAmount : null,\n            tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null,\n        });\n    }\n\n    /**\n     * @private\n     * @param {Object} itemData\n     * @returns {Object}\n     */\n    mapToType(itemData) {\n        const types = {\n            ItemPhysicalEntity: 'physical',\n            ItemDigitalEntity: 'digital',\n            ItemGiftCertificateEntity: 'gift_card',\n        };\n\n        return types[itemData.type];\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class GatewayMapper {\n    /**\n     * @returns {GatewayMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new GatewayMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToGateway(data) {\n        const { paymentMethod = {} } = data;\n\n        return omitNil({\n            name: this.paymentMethodIdMapper.mapToId(paymentMethod),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class QuoteMapper {\n    /**\n     * @returns {QuoteMapper}\n     */\n    static create() {\n        return new QuoteMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToQuote(data) {\n        return omitNil({\n            billing_address: this.mapToAddress(data, 'billingAddress'),\n            shipping_address: this.mapToAddress(data, 'shippingAddress'),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const { customer = {} } = data;\n        const address = data[addressKey] || {};\n\n        return omitNil({\n            address_line_1: address.addressLine1,\n            address_line_2: address.addressLine2,\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            email: customer.email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            postal_code: address.postCode,\n            state: address.province,\n        });\n    }\n}\n","import { omitNil, toNumber } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        return omitNil({\n            locale: this.mapToLocale(data),\n            store_identity: this.mapToIdentity(data),\n            urls: this.mapToUrls(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToLocale(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            country_code: store.countryCode,\n            currency_code: store.currencyCode,\n            language_code: store.storeLanguage,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToIdentity(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            id: store.storeId ? toNumber(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToUrls(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            cart: store.cartLink,\n            checkout: store.checkoutLink,\n            confirmation: store.orderConfirmationLink,\n            home: store.shopPath,\n        });\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport { DELETE, POST } from '../common/http-request/method-types';\nimport UrlHelper from './url-helper';\nimport {\n    mapToHeaders,\n    mapToInstrumentPayload,\n    mapToTrustedShippingAddressPayload,\n} from './v2/mappers';\n\nexport default class StoreRequestSender {\n    /**\n     * @param {Object} config\n     * @returns {StoreRequestSender}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n\n        return new StoreRequestSender(urlHelper, requestSender);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        const url = this.urlHelper.getTrustedShippingAddressUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToTrustedShippingAddressPayload(data);\n        const options = {\n            method: POST,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToInstrumentPayload(data);\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentByIdUrl(\n            data.storeId,\n            data.customerId,\n            data.instrumentId\n        );\n        const options = {\n            method: DELETE,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     * @throws {Error}\n     */\n    get host() {\n        if (!this.config || !this.config.host) {\n            throw new Error('Host URL unavailable or not supplied.');\n        }\n\n        return this.config.host;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    getInstrumentsUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @return {string}\n     */\n    getTrustedShippingAddressUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/trusted_shipping_address?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {number} instrumentId\n     * @returns {string}\n     */\n    getInstrumentByIdUrl(storeId, customerId, instrumentId) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/${instrumentId}`;\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.billingAddress\n * @param {CreditCard} data.creditCard\n * @param {boolean} data.defaultInstrument\n * @param {string} data.providerName\n * @return {Object}\n */\nexport function mapToInstrumentPayload(data = {}) {\n    const {\n        providerName,\n        defaultInstrument: default_instrument,\n    } = data;\n\n    const provider = omitNil({ name: providerName });\n\n    return omitNil({\n        provider,\n        credit_card: mapToCreditCard(data),\n        billing_address: mapToAddress(data.billingAddress),\n        default_instrument,\n    });\n}\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.shippingAddress\n * @return {Object}\n */\nexport function mapToTrustedShippingAddressPayload(data = {}) {\n    return omitNil({\n        shipping_address: mapToAddress(data.shippingAddress),\n    });\n}\n\n/**\n * @param {Object} data\n * @param {string} data.authToken\n * @return {Object}\n */\nexport function mapToHeaders({ authToken: Authorization } = {}) {\n    return omitNil({\n        Authorization,\n    });\n}\n\n/**\n * @param {AddressData} address\n * @return {Object}\n */\nfunction mapToAddress(address = {}) {\n    const state = mapToState(address.provinceCode, address.province);\n\n    return omitNil({\n        address_line_1: address.addressLine1,\n        address_line_2: address.addressLine2,\n        city: address.city,\n        company: address.company,\n        country_code: address.countryCode,\n        email: address.email,\n        first_name: address.firstName,\n        last_name: address.lastName,\n        phone: address.phone,\n        postal_code: address.postCode,\n        state,\n    });\n}\n\n/**\n * @param {string} code\n * @param {string} name\n * @return {Object}\n */\nfunction mapToState(code, name) {\n    return omitNil({\n        code,\n        name,\n    });\n}\n\n/**\n * @param {Object} data\n * @param {CreditCard} data.creditCard\n * @return {Object}\n */\nfunction mapToCreditCard({ creditCard = {} }) {\n    const threeDSecure = omitNil(creditCard.threeDSecure);\n\n    return omitNil({\n        cardholder_name: creditCard.cardholderName,\n        number: creditCard.number,\n        month: creditCard.month,\n        year: creditCard.year,\n        verification_code: creditCard.verificationCode,\n        issue_month: creditCard.issueMonth,\n        issue_year: creditCard.issueYear,\n        issue_number: creditCard.issueNumber,\n        track_data: creditCard.trackData,\n        is_manual_entry: creditCard.isManualEntry,\n        icc_data: creditCard.iccData,\n        fallback_reason: creditCard.fallbackReason,\n        is_contactless: creditCard.isContactless,\n        encrypted_pin_cryptogram: creditCard.encryptedPinCryptogram,\n        encrypted_pin_ksn: creditCard.encryptedPinKsn,\n        three_d_secure: threeDSecure,\n    });\n}\n","const DEFAULT_CONFIG = {\n    host: '',\n};\n\nexport default DEFAULT_CONFIG;\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 145);\n","module.exports = require(\"@bigcommerce/data-store\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"shallowequal\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport memoize from '../utility/memoize';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize as lodashMemoize } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { Omit } from '../types';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        maxSize,\n        isEqual,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport type RemoteCheckoutStateData =\n    { amazon?: AmazonPayRemoteCheckout } &\n    { afterpay?: AfterpayRemoteCheckout };\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertifcates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoize, memoizeOne } from '../common/utility';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { Address } from '../address';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getGrandTotal,\n        getGrandTotal => (useStoreCredit: boolean = false) => {\n            const grandTotal = getGrandTotal(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../../common/selector';\nimport { memoizeOne } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getGrandTotal(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getGrandTotal = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getGrandTotal: getGrandTotal(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return () => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport InternalCheckoutSelectors from '../checkout/internal-checkout-selectors';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new StandardError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new StandardError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new StandardError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new StandardError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new StandardError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new StandardError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new StandardError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n        const useStoreCredit = !!payload.useStoreCredit;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(payment.methodId, { useStoreCredit })\n            ))\n            .then(()  => {\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options))\n                    .then(state => {\n                        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                        }\n                    })\n                    .then(() => new Promise<string | undefined>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                                    return this._prepareForReferredRegistration(payment.methodId, checkoutId)\n                                        .then(() => resolve());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                if (state === ZipModalEvent.CheckoutDeclined) {\n                                    return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce => {\n                        if (nonce !== undefined) {\n                            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                methodId: payment.methodId,\n                                paymentData: { nonce },\n                            }));\n                        }\n\n                        return this._store.getState();\n                    }\n                    ));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone, memoizeOne } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}