{"version":3,"sources":["webpack://checkout/../../../../src/store/v2/mappers/index.js","webpack://checkout/../../src/client/default-config.js","webpack://checkout/../src/index.ts","webpack://checkout/../src/timeout.ts","webpack://checkout/../../../src/common/utils/is-nil.js","webpack://checkout/../../../src/common/utils/omit-property.js","webpack://checkout/../../../src/payment/payment-method-mappers/payment-method-id-mapper.js","webpack://checkout/../../src/payment/url-helper.js","webpack://checkout/../../../src/common/http-request/request-sender.js","webpack://checkout/../../../src/common/http-request/method-types.js","webpack://checkout/../src/request-sender.ts","webpack://checkout/../../../src/common/utils/index.js","webpack://checkout/../src/data-store.ts","webpack://checkout/../src/deep-freeze.ts","webpack://checkout/../src/combine-reducers.ts","webpack://checkout/../src/create-action.ts","webpack://checkout/../src/script-loader.ts","webpack://checkout/../src/create-script-loader.ts","webpack://checkout/../src/form-poster.ts","webpack://checkout/../../src/payment/payment-types.js","webpack://checkout/../../../src/common/utils/is-object.js","webpack://checkout/../../../src/common/http-request/content-types.js","webpack://checkout/webpack://checkoutKit/webpack/bootstrap","webpack://checkout/webpack://checkoutKit/external \"tslib\"","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkout/webpack://checkoutKit/external \"lodash\"","webpack://checkout/webpack://checkoutKit/external \"rxjs\"","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-actions.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/missing-data-error.ts","webpack://checkout/webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-actions.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/order-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-actions.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-actions.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-actions.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout-events.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/standard-error.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/set-prototype-of.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/request-error.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-actions.ts","webpack://checkout/webpack://checkoutKit/src/config/config-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-plain-object.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-actions.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkout/webpack://checkoutKit/src/payment/payment-status-types.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkout/webpack://checkoutKit/src/common/http-request/content-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/invalid-argument-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-types.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/is-iframe-event.ts","webpack://checkout/webpack://checkoutKit/external \"shallowequal\"","webpack://checkout/webpack://checkoutKit/src/common/utility/is-equal.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkout/webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkout/webpack://checkoutKit/external \"reselect\"","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-poster.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-initialized-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/with-memoized-combiner.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-listener.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-default-includes.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-items.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/internal-api-headers.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/error/throw-error-action.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/amount-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/url/parse-url.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cache-action.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/is-action-options.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cachable-action-decorator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/bind-decorator.ts","webpack://checkout/webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkout/webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-deep.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkout/webpack://checkoutKit/src/shipping/map-to-internal-shipping-option.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-private.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unrecoverable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-internal-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-payment-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/clear-error-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-set.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-state.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/array-replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-merge.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-state.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-reducer.ts","webpack://checkout/webpack://checkoutKit/src/config/config-state.ts","webpack://checkout/webpack://checkoutKit/src/config/config-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-state.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/order/order-state.ts","webpack://checkout/webpack://checkoutKit/src/order/order-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/merge-or-push.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-reducer.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/create-freeze-proxy.ts","webpack://checkout/webpack://checkoutKit/src/address/is-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-internal-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-selector.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-selector.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-selector.ts","webpack://checkout/webpack://checkoutKit/src/config/config-selector.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-selector.ts","webpack://checkout/webpack://checkoutKit/src/form/form-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/order/order-selector.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-action-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/create-request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/errors/checkout-not-available-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-coupon.ts","webpack://checkout/webpack://checkoutKit/src/address/map-to-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/billing/is-billing-address-like.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/selector-decorator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/is-element-id.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/set-unique-element-id.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/storage/browser-storage.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/loading-indicator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embed-checkout.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-maps.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-resolver.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkout/webpack://checkoutKit/external \"messageformat\"","webpack://checkout/webpack://checkoutKit/src/common/error/errors/timeout-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/join-includes.ts","webpack://checkout/webpack://checkoutKit/src/config/config-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/config/config-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/registry/registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkout/webpack://checkoutKit/src/customer/map-to-internal-customer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-gift-certificate.ts","webpack://checkout/webpack://checkoutKit/src/order/map-to-internal-order.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/iframe/iframe-resizer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/get-environment.ts","webpack://checkout/webpack://checkoutKit/src/common/log/create-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/console-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/noop-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/get-default-logger.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-implemented-error.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/default/default-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/square/square-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/mutation-observer.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-not-loaded-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/order/errors/order-finalization-not-required-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-comparator.ts","webpack://checkout/webpack://checkoutKit/src/cart/errors/cart-changed-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-validator.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-vaulted-instrument.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-argument-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/order/order-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-cancelled-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirmJs.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/address/is-internal-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-private.ts","webpack://checkout/webpack://checkoutKit/src/address/map-from-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/overlay/overlay.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cancellable-promise.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-credit-card-like.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-form.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unsupported-browser-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-declined-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/create-data-store-projection.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/is-future.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/add-minutes.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-response-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/clone-result.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-shallow-equal-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-message-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/to-single-line.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service-error-transformer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/create-spam-protection.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-client.ts","webpack://checkout/webpack://checkoutKit/src/customer/create-customer-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/shipping/create-shipping-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/custom-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/locale/language-service.ts","webpack://checkout/webpack://checkoutKit/src/locale/create-language-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-formatter.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/create-currency-service.ts","webpack://checkout/webpack://checkoutKit/src/index.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-cart.ts","webpack://checkout/webpack://checkoutKit/src/promotion/map-to-discount-notifications.ts","webpack://checkout/webpack://checkoutKit/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-action-creator.ts","webpack://checkout/../src/create-request-sender.ts","webpack://checkout/../src/payload-transformer.ts","webpack://checkout/../src/to-form-url-encoded.ts","webpack://checkout/../src/request-factory.ts","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/query-string/index.js","webpack://checkout/../src/is-promise.ts","webpack://checkout/../src/create-timeout.ts","webpack://checkout/../src/is-observable-action-like.ts","webpack://checkout/../src/noop-action-transformer.ts","webpack://checkout/../src/noop-state-transformer.ts","webpack://checkout/../src/compose-reducers.ts","webpack://checkout/../src/create-data-store.ts","webpack://checkout/../src/create-error-action.ts","webpack://checkout/../src/memoize.ts","webpack://checkout/../src/cache-key-resolver.ts","webpack://checkout/../src/cache-key-maps.ts","webpack://checkout/../src/get-script-loader.ts","webpack://checkout/../src/create-form-poster.ts","webpack://checkout/../src/form-builder.ts","webpack://checkout/../src/url-utils.ts","webpack://checkout/../src/index.js","webpack://checkout/../../src/client/client.js","webpack://checkout/../../src/payment/offsite-payment-initializer.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/payload-mapper.js","webpack://checkout/../../../src/common/utils/includes.js","webpack://checkout/../../../src/common/utils/omit-emptystring-and-nil.js","webpack://checkout/../../../src/common/utils/is-emptystring-or-nil.js","webpack://checkout/../../../src/common/utils/is-empty-string.js","webpack://checkout/../../../src/common/utils/omit-nil.js","webpack://checkout/../../../src/common/utils/to-number.js","webpack://checkout/../../../src/common/utils/to-snake-case.js","webpack://checkout/../../../src/common/utils/to-string.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/address-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/customer-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/meta-mapper.js","webpack://checkout/../../src/payment/payment-method-types.js","webpack://checkout/../../src/payment/payment-method-ids.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/store-mapper.js","webpack://checkout/../../src/payment/payment-submitter.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payload-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/customer-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/order-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payment-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/store-mapper.js","webpack://checkout/../../../src/common/http-request/default-options.js","webpack://checkout/../../../src/common/http-request/payload-transformer.js","webpack://checkout/../../../src/common/http-request/request-factory.js","webpack://checkout/../../src/payment/client-token-generator.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/client-token-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/cart-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/gateway-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/quote-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/store-mapper.js","webpack://checkout/../../src/store/store-request-sender.js","webpack://checkout/../../src/store/url-helper.js"],"names":["mapToInstrumentPayload","data","providerName","default_instrument","defaultInstrument","provider","omitNil","name","credit_card","creditCard","threeDSecure","cardholder_name","cardholderName","number","month","year","verification_code","verificationCode","issue_month","issueMonth","issue_year","issueYear","issue_number","issueNumber","track_data","trackData","is_manual_entry","isManualEntry","icc_data","iccData","fallback_reason","fallbackReason","is_contactless","isContactless","encrypted_pin_cryptogram","encryptedPinCryptogram","encrypted_pin_ksn","encryptedPinKsn","three_d_secure","billing_address","mapToAddress","billingAddress","mapToTrustedShippingAddressPayload","shipping_address","shippingAddress","mapToHeaders","Authorization","authToken","code","address","state","provinceCode","province","address_line_1","addressLine1","address_line_2","addressLine2","city","company","country_code","countryCode","email","first_name","firstName","last_name","lastName","phone","postal_code","postCode","host","default","_delay","this","_resolve","_promise","Promise","resolve","onComplete","callback","then","complete","_timeoutToken","window","clearTimeout","start","setTimeout","value","object","predicateFn","Object","keys","reduce","result","key","PaymentMethodIdMapper","paymentMethod","id","method","MULTI_OPTION","gateway","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISACHECKOUT","BRAINTREE_GOOGLEPAY","isBraintreePaymentMethod","BRAINTREE","UrlHelper","config","RequestSender","requestFactory","payloadTransformer","RequestFactory","create","PayloadTransformer","url","options","mergedOptions","DEFAULT_OPTIONS","xhr","createRequest","error","response","fromResponse","isSuccessfulRequest","payload","toRequest","headers","send","POST","sendRequest","status","GET","DELETE","_requestFactory","_payloadTransformer","_cookie","_options","requestOptions","_mergeDefaultOptions","request","_prependHost","reject","requestHandler","toResponse","onload","onerror","onabort","ontimeout","timeout","abort","toRequestBody","get","post","put","patch","delete","defaultOptions","credentials","Accept","csrfToken","body","test","replace","reducer","initialState","_reducer","actionTransformer","equalityCheck","shallowEqual","shouldWarnMutation","stateTransformer","_state$","BehaviorSubject","_notification$","Subject","_dispatchers","_dispatchQueue$","_errors","pipe","mergeMap","dispatcher$","concatMap","action$","filter","action","type","scan","states","_transformStates","transformedState","getValue","distinctUntilChanged","stateA","stateB","map","subscribe","dispatch","_dispatchObservableAction","_dispatchThunkAction","_dispatchAction","getState","notifyState","next","subscriber","args","undefined","filters","state$","length","every","filterFn","initial","skip","subscriptions","forEach","subscription","unsubscribe","newState","previousValue","_getDispatchError","meta","queueId","throwError","of","error$","transformedAction$","from","merge","_getDispatcher","index","first","catchError","Error","tap","thunkAction","defer","isFrozen","Array","isArray","isPlainObject","freeze","deepFreeze","getOwnPropertyNames","hasOwnProperty","TypeError","reducers","currentState","assign","omitBy","_scripts","loadScript","src","script","document","createElement","event","onreadystatechange","async","appendChild","_formBuilder","postForm","form","build","addEventListener","handleUnload","removeEventListener","submit","removeChild","isAbsoluteUrl","joinPaths","API","HOSTED","OFFLINE","APPLICATION_JSON","installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","getter","o","defineProperty","enumerable","r","Symbol","toStringTag","t","mode","__esModule","ns","bind","n","property","prototype","p","s","require","ConsignmentActionType","e","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","CustomerStrategyActionType","SignInFailed","SignInRequested","SignInSucceeded","SignOutFailed","SignOutRequested","SignOutSucceeded","InitializeFailed","InitializeRequested","InitializeSucceeded","DeinitializeFailed","DeinitializeRequested","DeinitializeSucceeded","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","PaymentStrategyActionType","ExecuteFailed","ExecuteRequested","ExecuteSucceeded","FinalizeFailed","FinalizeRequested","FinalizeSucceeded","ShippingStrategyActionType","UpdateAddressFailed","UpdateAddressRequested","UpdateAddressSucceeded","SelectOptionFailed","SelectOptionRequested","SelectOptionSucceeded","MissingDataErrorType","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingPaymentToken","MissingShippingAddress","MissingSpamProtectionToken","subtype","CheckoutActionType","LoadCheckoutRequested","LoadCheckoutSucceeded","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","CouponActionType","ApplyCouponRequested","ApplyCouponSucceeded","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponSucceeded","RemoveCouponFailed","BillingAddressActionType","UpdateBillingAddressRequested","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestSucceeded","ContinueAsGuestFailed","OrderActionType","LoadOrderRequested","LoadOrderSucceeded","LoadOrderFailed","LoadOrderPaymentsRequested","LoadOrderPaymentsSucceeded","LoadOrderPaymentsFailed","SubmitOrderRequested","SubmitOrderSucceeded","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderSucceeded","FinalizeOrderFailed","PaymentMethodActionType","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","LoadPaymentMethodsRequested","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","CheckoutButtonActionType","InitializeButtonFailed","InitializeButtonRequested","InitializeButtonSucceeded","DeinitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","GiftCertificateActionType","ApplyGiftCertificateRequested","ApplyGiftCertificateSucceeded","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateSucceeded","RemoveGiftCertificateFailed","InstrumentActionType","LoadInstrumentsRequested","LoadInstrumentsSucceeded","LoadInstrumentsFailed","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","EmbeddedCheckoutEventType","CheckoutComplete","CheckoutError","CheckoutLoaded","FrameError","FrameLoaded","SignedOut","message","setPrototypeOf","__proto__","captureStackTrace","stack","RemoteCheckoutActionType","InitializeRemoteBillingRequested","InitializeRemoteBillingSucceeded","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingSucceeded","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsSucceeded","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","UpdateRemoteCheckout","DEFAULT_RESPONSE","errors","StoreCreditActionType","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","ConfigActionType","LoadConfigRequested","LoadConfigSucceeded","LoadConfigFailed","CountryActionType","LoadCountriesRequested","LoadCountriesSucceeded","LoadCountriesFailed","ShippingCountryActionType","LoadShippingCountriesRequested","LoadShippingCountriesSucceeded","LoadShippingCountriesFailed","ACKNOWLEDGE","FINALIZE","ContentType","Json","JsonV1","PaymentActionType","SubmitPaymentRequested","SubmitPaymentSucceeded","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","isIframeEvent","isEqual","objectA","objectB","Date","getTime","RegExp","toString","keyFilter","keysA","keysB","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","CustomerActionType","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","SpamProtectionActionType","Completed","SubmitFailed","NotInitializedErrorType","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","withMemoizedCombiner","creator","combiner","pop","combinerArgs","memoize","ErrorActionType","ClearError","_requestSender","loadPaymentMethods","Observable","observer","createAction","deviceSessionId","sessionHash","catch","createErrorAction","loadPaymentMethod","methodId","EmbeddedContentEventType","StyleConfigured","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","mapToInternalLineItems","itemMap","decimalPlaces","idKey","item","amountTransformer","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","INTERNAL_USE_ONLY","CheckoutIncludes","AvailableShippingOptions","PhysicalItemsCategoryNames","DigitalItemsCategoryNames","_scriptLoader","_window","loadClient","braintree","client","load3DS","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_client","authorization","getPaypal","_paypal","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","throwErrorAction","concat","_decimalPlaces","Math","round","pow","parseUrl","anchor","href","port","hostname","hash","protocol","pathname","search","cacheAction","fn","shareReplay","store","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","set","bindDecorator","target","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","boundMethod","omitDeep","predicate","transform","_checkoutRequestSender","_configActionCreator","loadCheckout","loadConfig","loadDefaultCheckout","context","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","params","include","updateAddress","_getConsignmentRequestBody","createConsignments","consignmentId","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","DEFAULT_PARAMS","join","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","joinErrors","_factoryMethods","register","detail","title","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","combineReducers","dataReducer","composeReducers","errorsReducer","statusesReducer","O","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","containerId","configReducer","couponReducer","coupons","giftCertificateReducer","giftCertificates","customerReducer","customer","customerStrategyReducer","isInitialized","initializeError","initializeMethodId","deinitializeError","deinitializeMethodId","signInError","signInMethodId","signOutError","signOutMethodId","widgetInteractionError","widgetInteractionMethodId","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","orderReducer","metaReducer","omit","callbackUrl","order","orderToken","token","payment","paymentReducer","paymentMethodReducer","array","defaultPredicate","pick","findIndex","pickBy","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","executeError","executeMethodId","finalizeError","finalizeMethodId","isExecuting","isFinalizing","instrumentReducer","vaultedInstruments","instrument","bigpayToken","instrumentId","deleteError","failedInstrument","isDeleting","deletingInstrument","remoteCheckoutReducer","billing","shipping","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","shippingCountryReducer","shippingStrategyReducer","updateAddressError","updateAddressMethodId","selectOptionError","selectOptionMethodId","isUpdatingAddress","isSelectingOption","storeCreditReducer","checkoutReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","charAt","normalize","address1","address2","stateOrProvince","postalCode","customFields","identity","createInternalCheckoutSelectorsFactory","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","loadError","memoizeOne","createCartSelector","createCheckoutButtonSelector","some","values","createConfigSelector","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","createCountrySelector","getCountries","countries","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","getDeleteError","createFormSelector","getShippingAddressFields","selectedCountry","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","createConsignmentSelectorFactory","createCheckoutSelector","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","createOrderSelector","getOrder","getOrderMeta","isSpamProtectionExecuting","createPaymentSelector","payments","providerId","providerType","internalPayment","step","redirectUrl","nonce","createStoreCreditSelector","applyError","checkoutButton","customerStrategies","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","createCheckoutStore","requestErrorFactory","factory","createInternalCheckoutSelectors","createDataStore","couponTypes","mapToInternalCoupon","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","stateOrProvinceCode","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","slice","container","u","uniqueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","empty","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","MASTERPASS","PAYPALEXPRESS","C","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","payment_type","device_data","JSON","stringify","_mapToLegacyShippingAddress","_mapToLegacyBillingAddress","details","recipientName","phone_number","line1","line2","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","getElementById","googlePayButton","createButton","_handleWalletButtonClick","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","requestSender","createRequestSender","formPoster","createFormPoster","registry","scriptLoader","getScriptLoader","checkoutActionCreator","NotEmbeddableErrorType","_namespace","getItem","rawValue","withNamespace","parse","removeItem","getItemOnce","setItem","MissingContainer","MissingContent","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onLoad","onFrameLoad","onSignOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","detach","iFrameResizer","close","contentWindow","styles","now","encodeURIComponent","visibility","lastAttempt","Number","EmbeddedCheckout","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","STORAGE_PREFIX","embedCheckout","loadingIndicator","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","noop","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","joinIncludes","includes","uniq","_configRequestSender","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","paymentMethodTokenizationParameters","shippingAddressParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripeVersion","stripePublishableKey","mapToInternalCustomer","customerId","isGuest","fullName","customerGroupName","customerGroup","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","keyBy","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","iframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","isEnabled","_console","log","_logToConsole","messages","info","warn","debug","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","signOut","widgetInteraction","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","_toVisaCheckoutAddress","phoneNumber","streetAddress","extendedAddress","locality","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","B","PaymentStrategyType","V","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","_customerRequestSender","signInCustomer","switchMap","signOutCustomer","_remoteCheckoutActionCreator","amazonOptions","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","spamProtectionToken","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","executeSpamProtection","execute","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","_recaptcha","element","retryWhen","delay","_watchRecaptchaChallengeWindow","iframeContainer","parentElement","observe","attributeFilter","_loadPromise","_loadScript","grecaptcha","_googleRecaptcha","recaptchaSitekey","checkoutSettings","googleRecaptchaSitekey","take","ADYENV2","AFFIRM","AFTERPAY","AMAZON","CREDIT_CARD","CYBERSOURCE","KLARNA","LEGACY","OFFSITE","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","STRIPEV3","NO_PAYMENT_DATA_REQUIRED","BRAINTREE_VISA_CHECKOUT","BRAINTREE_GOOGLE_PAY","CHASE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","_orderActionCreator","strategy","getByMethod","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","a","_paymentRequestSender","_paymentRequestTransformer","submitPayment","initializeOffsitePayment","_transformResponse","statusText","isVaultedInstrument","ThreeDS2ComponentType","ResultCode","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","vaultAccessToken","quoteMeta","geoCountryCode","source","paymentMethodSelector","_getToken","_hasFactoryForMethod","_isLegacyMethod","clientSidePaymentProviders","invalidFields","ThreeDS2DeviceFingerprint","ThreeDS2Challenge","AuthenticationFinished","Authorised","Cancelled","ChallengeShopper","IdentifyShopper","Pending","Received","RedirectShopper","Refused","OrderIncludes","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenComponent","onChange","_updateStateContainer","mount","_adyenComponent","shouldSaveInstrument","paymentPayload","_getStateContainer","three_ds_result","result_code","_handle3DS2Fingerprint","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_stateContainer","_getThreeDS2ChallengeWidgetSize","widgetSize","resultObject","paymentMethodId","threeDS2Component","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","fingerprintToken","fingerprintData","fingerprintPaymentPayload","isValid","_stylesheets","_loadStylesheet","AdyenCheckout","stylesheet","rel","DigitalItemsCategories","PhysicalItemsCategories","_affirmScriptLoader","publicKey","affirm","_affirm","_getCheckoutInformation","open","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","promise","cancellable","cancel","race","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","appendSessionId","processedPayment","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","endpoint","isCreditCardLike","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","tokenizedCard","_credit","braintreeOptions","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","Init","Complete","Confirm","SetupCompleted","Validated","Success","NoAction","Failure","CCA","Paypal","VisaCheckout","ApplePay","DiscoverWallet","BinProcess","Yes","No","ChasePayEventType","_sdk","_getClientSDK","off","ActionCode","ErrorNumber","ErrorDescription","setup","jwt","binNumber","Status","threeDSecureData","orderData","Payment","ExtendedData","SignatureVerification","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","StartCheckout","CompleteCheckout","CancelCheckout","CardBrand","DigitalWalletType","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","onCancel","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","_threeDSecureFlow","_googlePayOptions","statusCode","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","orderPayload","_shouldSubmitFullPayload","_isPaymentAcknowledged","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","americanExpress","discover","discoverDiners","JCB","masterCard","unionPay","unknown","visa","squareGift","applePay","none","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","orderActionCreator","paymentActionCreator","payloadWithToken","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","onCheckout","openModal","externalId","Zip","ProjectionActionType","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","vaultAccessExpiry","newDate","setMinutes","getMinutes","getVaultAccessToken","storeId","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","selectOption","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","Synchronize","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","createSelectorCreator","defaultMemoize","b","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","isSubmittingOrder","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","isLoadingCheckout","isUpdatingCheckout","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","trim","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","_selectorsFactory","_storeProjection","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","CheckoutService","createCheckoutService","paymentClient","setHost","paymentSettings","bigpayBaseUrl","orderRequestSender","checkoutRequestSender","configActionCreator","spamProtection","createScriptLoader","MutationObserverFactory","spamProtectionActionCreator","paymentMethodActionCreator","remoteCheckoutRequestSender","remoteCheckoutActionCreator","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","overlay","checkoutValidator","storeCreditActionCreator","paymentStrategyActionCreator","createPaymentStrategyRegistry","consignmentRequestSender","consignmentActionCreator","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","_logger","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","compile","_transformData","_transformConfig","output","defaultTranslations","_flattenObject","union","parentKey","resultKey","isObject","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","decimalAmount","parsedIntegerAmount","_toFixed","precision","_storeConfig","_customerFormatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","ButtonType","ButtonColor","Long","Short","Default","Black","White","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","mapToInternalCart","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","certificate","isShippingRequired","taxSubtotal","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","cookie","JSON_CONTENT_TYPE_REGEXP","FORM_URLENCODED_CONTENT_TYPE_REGEXP","contentType","_getHeader","_parseResponseHeaders","getAllResponseHeaders","_parseResponseBody","responseText","rawHeaders","parts","shift","XMLHttpRequest","_configureRequest","_formatUrl","_configureRequestHeaders","withCredentials","setRequestHeader","queryString","strictUriEncode","objectAssign","decodeComponent","encode","opts","strict","extract","str","queryStart","formatter","arrayFormat","accumulator","exec","parserForArrayFormat","ret","val","keysSorter","obj","encoderForArrayFormat","val2","x","query","flowRight","curryRight","Map","memoized","isRootCacheKeyMap","instance","formBuilder","_createInput","pathA","pathB","path","removeLeadingSlash","createClient","Client","paymentSubmitter","offsitePaymentInitializer","clientTokenGenerator","storeRequestSender","clientConfig","DEFAULT_CONFIG","OffsitePaymentInitializer","PaymentSubmitter","ClientTokenGenerator","StoreRequestSender","generateClientToken","postShopperInstrument","urlHelper","payloadMapper","PayloadMapper","mapToPayload","getOffsitePaymentUrl","addressMapper","customerMapper","metaMapper","paymentMethodIdMapper","storeMapper","AddressMapper","CustomerMapper","MetaMapper","StoreMapper","bc_auth_token","mapToId","notify_url","page_title","payment_method_id","reference_id","return_url","mapToBillingAddress","mapToCustomer","mapToMeta","mapToShippingAddress","mapToStore","isEmptyStringOrNil","isNil","parseFloat","string","isNaN","addressKey","formattedAddressKey","toSnakeCase","customer_browser_info","navigator","userAgent","customer_email","customer_first_name","customer_geo_ip_country_code","customer_last_name","customer_locale","customer_name","customer_phone","customer_reference","meta_referrer","referrer","meta_source","meta_user_agent","store_hash","storeHash","store_id","getPaymentUrl","postRequest","orderMapper","paymentMapper","OrderMapper","PaymentMapper","mapToOrder","mapToPayment","customer_group","geo_ip_country_code","session_token","mapToCoupons","mapToItems","mapToShipping","totals","mapToOrderTotals","omitEmptyStringAndNil","state_code","street_1","street_2","itemData","variant_id","grand_total","tax","device_info","device","deviceFingerprint","fingerprint_id","vault_payment_instrument","mapToBigPayToken","credit_card_token","credit_card_cryptogram","mapToCryptogram","mapToCreditCard","account_name","toNumber","verification_value","customer_code","ccCustomerCode","credit_card_number_confirmation","payment_cryptogram","xid","account_mask","parseResponseHeaders","getResponseHeader","setOptions","setHeaders","clientTokenMapper","ClientTokenMapper","getGenerateClientTokenUrl","mapToClientToken","cartMapper","gatewayMapper","quoteMapper","CartMapper","GatewayMapper","QuoteMapper","mapToCart","mapToGateway","quote","mapToQuote","currency_code","integerTax","mapToType","discount_total","shipping_total","surcharge_total","tax_total","ItemPhysicalEntity","ItemDigitalEntity","ItemGiftCertificateEntity","mapToLocale","store_identity","mapToIdentity","urls","mapToUrls","language_code","cartLink","confirmation","orderConfirmationLink","home","shopPath","getInstrumentsUrl","getTrustedShippingAddressUrl","getInstrumentByIdUrl"],"mappings":"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qBtmC,OAIjCD,EAASvb,SAAS,GAAoBu1B,QAAOA,WACzC,WAAI,GACA76B,EACA27C,EACAqL,EACAH,EACA,IAAI,EAAsB/lC,OAIlCD,EAASvb,SAAS,GAAoBw1B,aAAYA,WAC9C,WAAI,GACA96B,EACA27C,EACAC,MAIR/6B,EAASvb,SAAS,GAAoBy1B,aAAYA,WAC9C,WAAI,GACA/6B,EACA27C,EACAC,EACA,IAAI,GACA57C,EACA47C,EACA+K,EACA,IAAI,GAAe,IAAI,GAAqB7lC,SAKxDD,EAASvb,SAAS,GAAoB01B,QAAOA,WACzC,WAAI,GACAh7B,EACA27C,EACAgL,EACAE,EACA,IAAI,GAAmB/lC,OAI/BD,EAASvb,SAAS,GAAoB21B,QAAOA,WACzC,WAAI,GACAj7B,EACA27C,MAIR96B,EAASvb,SAAS,GAAoBld,SAAQA,WAC1C,WAAI,GACA4X,EACA27C,MAIR96B,EAASvb,SAAS,GAAoB41B,SAAQA,WAC1C,WAAI,GACAl7B,EACA27C,EACAC,MAIR/6B,EAASvb,SAAS,GAAoB61B,QAAOA,WACzC,WAAI,GACAn7B,EACA27C,EACAC,EACA,IAAI,GACA57C,EACA47C,EACA+K,EACA,IAAI,GAAe,IAAI,GAAqB7lC,SAKxDD,EAASvb,SAAS,GAAoB81B,gBAAeA,WACjD,WAAI,GACAp7B,EACA27C,EACA,IAAI,KAAmB76B,OAI/BD,EAASvb,SAAS,GAAoB+1B,uBAAsBA,WACxD,WAAI,GACAr7B,EACA27C,EACA,IAAI,KAAmB76B,OAI/BD,EAASvb,SAAS,GAAoBg2B,UAASA,WAC3C,WAAI,GACAt7B,EACA27C,EACAC,EACAj7B,MAIRE,EAASvb,SAAS,GAAoBi2B,QAAOA,WACzC,WAAI,GACAv7B,EACAghB,EACA26B,EACAC,EACA+K,EACAU,EACA5mC,EACA,IAAI,GAAmBK,OAI/BD,EAASvb,SAAS,GAAoBm2B,0BAAyBA,WAC3D,WAAI,GACAz7B,EACA27C,MAIR96B,EAASvb,SAAS,GAAoBznB,WAAUA,WAC5C,WAAI,GACAmiB,EACA27C,EACAC,EACA+K,EACAM,MAIRpmC,EAASvb,SAAS,GAAoB9nB,kBAAiBA,WACnD,WAAI,GACAwiB,EACA27C,EACAC,EACA+K,EACAM,MAIRpmC,EAASvb,SAAS,GAAoB7nB,yBAAwBA,WAC1D,WAAI,GACAuiB,EACA27C,EACAC,EACA+K,EACAM,SAKRpmC,EAASvb,SAAS,GAAoBo2B,yBAAwBA,WAC1D,WAAI,GACA17B,EACAghB,EACA2lC,EACAU,EACAzL,EACAD,EACAxoB,EAA4CrS,EAAcL,GAC1D,IAAI,EAAyBK,OAIrCD,EAASvb,SAAS,GAAoBs2B,WAAUA,WAC5C,WAAI,GACA57B,EACAghB,EACA26B,EACAC,EACA+K,EACAU,EACA5mC,EACA,IAAI,EAAqBK,GACzB,IAAI,GAAgBA,OAI5BD,EAASvb,SAAS,GAAoBq2B,sBAAqBA,WACvD,WAAI,GACA37B,EACAghB,EACA2lC,EACAU,EACAzL,EACAD,EACA,YACI37C,EACA,IAAI,IACA,IAAI,IACA,IAAI,IAAsB8gB,UAO9CD,EAASvb,SAAS,GAAoBu2B,QAAOA,WACzC,WAAI,GACA77B,EACA27C,EACAC,EACA,IAAI,GAAgB96B,OAI5BD,EAASvb,SAAS,GAAoBiV,YAAWA,WAC7C,WAAI,GACAva,EACA27C,EACAC,EACA,IAAI,IAAuB96B,OAInCD,EAASvb,SAAS,GAAoBw2B,mBAAkBA,WACpD,WAAI,GACA97B,EACAghB,EACA2lC,EACAU,EACAzL,EACAD,EACA,YACI37C,EACA,IAAI,SAKhB6gB,EAASvb,SAAS,GAAoBy2B,KAAIA,WACtC,WAAI,GACA/7B,EACA27C,EACAC,EACA+K,EACAS,EACA,IAAI,GAAgBtmC,GACpBL,MAIRI,EAASvb,SAAS,GAAoB02B,UAASA,WAC3C,WAAI,GACAh8B,EACA27C,EACAC,EACAj7B,MAIRE,EAASvb,SAAS,GAAoBk2B,UAASA,WAC3C,WAAI,GACAx7B,EACA2mD,EACA/K,EACAD,EACA,IAAI,GAAmB76B,OAIxBD,EJ3SCymC,CAA8BtnD,EAAOgmD,EAAevlC,EAAe8lC,EAAgBv0B,GACnF2pB,GAEJ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","file":"transients~checkout-74bd1d31.js","sourcesContent":["import { omitNil } from '../../../common/utils';\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.billingAddress\n * @param {CreditCard} data.creditCard\n * @param {boolean} data.defaultInstrument\n * @param {string} data.providerName\n * @return {Object}\n */\nexport function mapToInstrumentPayload(data = {}) {\n    const {\n        providerName,\n        defaultInstrument: default_instrument,\n    } = data;\n\n    const provider = omitNil({ name: providerName });\n\n    return omitNil({\n        provider,\n        credit_card: mapToCreditCard(data),\n        billing_address: mapToAddress(data.billingAddress),\n        default_instrument,\n    });\n}\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.shippingAddress\n * @return {Object}\n */\nexport function mapToTrustedShippingAddressPayload(data = {}) {\n    return omitNil({\n        shipping_address: mapToAddress(data.shippingAddress),\n    });\n}\n\n/**\n * @param {Object} data\n * @param {string} data.authToken\n * @return {Object}\n */\nexport function mapToHeaders({ authToken: Authorization } = {}) {\n    return omitNil({\n        Authorization,\n    });\n}\n\n/**\n * @param {AddressData} address\n * @return {Object}\n */\nfunction mapToAddress(address = {}) {\n    const state = mapToState(address.provinceCode, address.province);\n\n    return omitNil({\n        address_line_1: address.addressLine1,\n        address_line_2: address.addressLine2,\n        city: address.city,\n        company: address.company,\n        country_code: address.countryCode,\n        email: address.email,\n        first_name: address.firstName,\n        last_name: address.lastName,\n        phone: address.phone,\n        postal_code: address.postCode,\n        state,\n    });\n}\n\n/**\n * @param {string} code\n * @param {string} name\n * @return {Object}\n */\nfunction mapToState(code, name) {\n    return omitNil({\n        code,\n        name,\n    });\n}\n\n/**\n * @param {Object} data\n * @param {CreditCard} data.creditCard\n * @return {Object}\n */\nfunction mapToCreditCard({ creditCard = {} }) {\n    const threeDSecure = omitNil(creditCard.threeDSecure);\n\n    return omitNil({\n        cardholder_name: creditCard.cardholderName,\n        number: creditCard.number,\n        month: creditCard.month,\n        year: creditCard.year,\n        verification_code: creditCard.verificationCode,\n        issue_month: creditCard.issueMonth,\n        issue_year: creditCard.issueYear,\n        issue_number: creditCard.issueNumber,\n        track_data: creditCard.trackData,\n        is_manual_entry: creditCard.isManualEntry,\n        icc_data: creditCard.iccData,\n        fallback_reason: creditCard.fallbackReason,\n        is_contactless: creditCard.isContactless,\n        encrypted_pin_cryptogram: creditCard.encryptedPinCryptogram,\n        encrypted_pin_ksn: creditCard.encryptedPinKsn,\n        three_d_secure: threeDSecure,\n    });\n}\n","const DEFAULT_CONFIG = {\n    host: '',\n};\n\nexport default DEFAULT_CONFIG;\n","export { default as ScriptLoader } from './script-loader';\nexport { default as createScriptLoader } from './create-script-loader';\nexport { default as getScriptLoader } from './get-script-loader';\n","export default class Timeout {\n    private _promise: Promise<any>;\n    private _resolve: () => void;\n    private _timeoutToken?: number;\n\n    constructor(\n        private _delay?: number\n    ) {\n        // tslint:disable-next-line:no-empty\n        this._resolve = () => {};\n\n        this._promise = new Promise(resolve => {\n            this._resolve = resolve;\n        });\n    }\n\n    onComplete(callback: () => void): void {\n        this._promise.then(callback);\n    }\n\n    complete(): void {\n        this._resolve();\n\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    }\n\n    start(): void {\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(() => this.complete(), this._delay);\n        }\n    }\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isNil(value) {\n    if (value === null || value === undefined) {\n        return true;\n    }\n\n    return false;\n}\n","import isObject from './is-object';\n\n/**\n * @param {Object} object\n * @param {Function} predicateFn\n * @returns {Object}\n */\nexport default function omitProperty(object, predicateFn) {\n    if (!isObject(object)) {\n        return object;\n    }\n\n    const keys = Object.keys(object);\n\n    return keys.reduce((result, key) => {\n        const value = object[key];\n\n        if (!predicateFn(value)) {\n            result[key] = value;\n        }\n\n        return result;\n    }, {});\n}\n","import { MULTI_OPTION } from '../payment-method-types';\nimport {\n    BRAINTREE,\n    BRAINTREE_GOOGLEPAY,\n    BRAINTREE_PAYPAL,\n    BRAINTREE_PAYPAL_CREDIT,\n    BRAINTREE_VISACHECKOUT,\n} from '../payment-method-ids';\n\n/**\n * @param {string} id\n * @return {Boolean}\n */\nfunction isBraintreePaymentMethod(id) {\n    switch (id) {\n    case BRAINTREE_PAYPAL:\n    case BRAINTREE_PAYPAL_CREDIT:\n    case BRAINTREE_VISACHECKOUT:\n    case BRAINTREE_GOOGLEPAY:\n        return true;\n    default:\n        return false;\n    }\n}\n\nexport default class PaymentMethodIdMapper {\n    /**\n     * @returns {PaymentMethodIdMapper}\n     */\n    static create() {\n        return new PaymentMethodIdMapper();\n    }\n\n    /**\n     * @param {PaymentMethod} paymentMethod\n     * @returns {string}\n     */\n    mapToId(paymentMethod) {\n        let { id } = paymentMethod;\n\n        if (paymentMethod.method === MULTI_OPTION) {\n            id = paymentMethod.gateway;\n        }\n\n        if (isBraintreePaymentMethod(id)) {\n            return BRAINTREE;\n        }\n\n        return id;\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    get host() {\n        return this.config.host;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getOffsitePaymentUrl() {\n        return `${this.host}/pay/initialize`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getPaymentUrl() {\n        return `${this.host}/api/public/v1/orders/payments`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getGenerateClientTokenUrl() {\n        return `${this.host}/api/v2/public/payments/client_tokens`;\n    }\n}\n","import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n","export const GET = 'GET';\nexport const POST = 'POST';\nexport const DELETE = 'DELETE';\n","import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash/merge';\n\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options?: RequestSenderOptions\n    ) {}\n\n    sendRequest<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(options);\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n}\n","export { default as includes } from './includes';\nexport { default as isNil } from './is-nil';\nexport { default as isObject } from './is-object';\nexport { default as omitEmptyStringAndNil } from './omit-emptystring-and-nil';\nexport { default as omitNil } from './omit-nil';\nexport { default as omitProperty } from './omit-property';\nexport { default as toNumber } from './to-number';\nexport { default as toSnakeCase } from './to-snake-case';\nexport { default as toString } from './to-string';\n","import { merge } from 'lodash';\nimport {\n    defer,\n    from,\n    of,\n    throwError,\n    BehaviorSubject,\n    Observable,\n    Subject,\n    Subscribable,\n    SubscribableOrPromise\n} from 'rxjs';\nimport {\n    catchError,\n    concatMap,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    mergeMap,\n    scan,\n    skip,\n    tap,\n} from 'rxjs/operators';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport deepFreeze from './deep-freeze';\nimport DispatchableDataStore, { DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nimport isObservableActionLike from './is-observable-action-like';\nimport noopActionTransformer from './noop-action-transformer';\nimport noopStateTransformer from './noop-state-transformer';\nimport ReadableDataStore, { Filter, Subscriber, SubscribeOptions, Unsubscriber } from './readable-data-store';\nimport Reducer from './reducer';\nimport ThunkAction from './thunk-action';\n\nexport default class DataStore<TState, TAction extends Action = Action, TTransformedState = TState> implements\n    ReadableDataStore<TTransformedState>, DispatchableDataStore<TTransformedState, TAction> {\n    private _reducer: Reducer<TState, TAction>;\n    private _options: DataStoreOptions<TState, TAction, TTransformedState>;\n    private _notification$: Subject<TTransformedState>;\n    private _dispatchers: { [key: string]: Dispatcher<TAction> };\n    private _dispatchQueue$: Subject<Dispatcher<TAction>>;\n    private _state$: BehaviorSubject<TTransformedState>;\n    private _errors: { [key: string]: Subject<Error> };\n\n    constructor(\n        reducer: Reducer<TState, TAction>,\n        initialState: Partial<TState> = {},\n        options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n    ) {\n        this._reducer = reducer;\n        this._options = {\n            actionTransformer: noopActionTransformer,\n            equalityCheck: shallowEqual,\n            shouldWarnMutation: true,\n            stateTransformer: noopStateTransformer,\n            ...options,\n        };\n        this._state$ = new BehaviorSubject(this._options.stateTransformer(initialState as TState));\n        this._notification$ = new Subject();\n        this._dispatchers = {};\n        this._dispatchQueue$ = new Subject();\n        this._errors = {};\n\n        this._dispatchQueue$\n            .pipe(\n                mergeMap(dispatcher$ => dispatcher$.pipe(concatMap(action$ => action$))),\n                filter(action => !!action.type),\n                scan(\n                    (states: StateTuple<TState, TTransformedState>, action: TAction) =>\n                        this._transformStates(states, action),\n                    {\n                        state: initialState as TState,\n                        transformedState: this._state$.getValue(),\n                    }\n                ),\n                distinctUntilChanged(({ state: stateA }, { state: stateB }) =>\n                    this._options.equalityCheck(stateA, stateB)\n                ),\n                map(({ transformedState }) => transformedState)\n            )\n            .subscribe(this._state$);\n\n        this.dispatch({ type: 'INIT' } as TAction);\n    }\n\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState> {\n        if (isObservableActionLike(action)) {\n            return this._dispatchObservableAction(action, options);\n        }\n\n        if (typeof action === 'function') {\n            return this._dispatchThunkAction(action, options);\n        }\n\n        return this._dispatchAction(action);\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    notifyState(): void {\n        this._notification$.next(this.getState());\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n\n        let state$: Observable<TTransformedState> = this._state$;\n\n        if (filters.length > 0) {\n            state$ = state$.pipe(\n                distinctUntilChanged((stateA, stateB) =>\n                    filters.every(filterFn =>\n                        this._options.equalityCheck(filterFn(stateA), filterFn(stateB))\n                    )\n                )\n            );\n        }\n\n        if (options && options.initial === false) {\n            state$ = state$.pipe(skip(1));\n        }\n\n        const subscriptions = [\n            state$.subscribe(subscriber),\n            this._notification$.subscribe(subscriber),\n        ];\n\n        return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private _transformStates(\n        states: StateTuple<TState, TTransformedState>,\n        action: TAction\n    ): StateTuple<TState, TTransformedState> {\n        try {\n            const newState = this._options.shouldWarnMutation === false ?\n                this._reducer(states.state, action) :\n                deepFreeze(this._reducer(states.state, action), {\n                    equalityCheck: this._options.equalityCheck,\n                    previousValue: states.state,\n                });\n            const transformedState = this._options.stateTransformer(newState);\n\n            return { state: newState, transformedState };\n        } catch (error) {\n            this._getDispatchError(action.meta && action.meta.queueId).next(error);\n\n            return { state: states.state, transformedState: states.transformedState };\n        }\n    }\n\n    private _dispatchAction<TDispatchAction extends TAction>(\n        action: TDispatchAction\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(\n            action.error ? throwError(action) : of(action)\n        );\n    }\n\n    private _dispatchObservableAction<TDispatchAction extends TAction>(\n        action$: SubscribableOrPromise<TDispatchAction>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return new Promise((resolve, reject) => {\n            const error$ = this._getDispatchError(options.queueId);\n            const transformedAction$ = this._options.actionTransformer(\n                from(action$).pipe(\n                    map(action =>\n                        options.queueId ?\n                            merge({}, action, { meta: { queueId: options.queueId } }) :\n                            action\n                    )\n                ) as Subscribable<TDispatchAction>\n            );\n\n            this._getDispatcher(options.queueId).next(\n                from(transformedAction$)\n                    .pipe(\n                        map((action, index) => {\n                            if (index === 0) {\n                                error$.pipe(first()).subscribe(reject);\n                            }\n\n                            if (action.error) {\n                                reject(action.payload);\n                            }\n\n                            return action;\n                        }),\n                        catchError(action => {\n                            reject(action instanceof Error ? action : action.payload);\n\n                            return of(action);\n                        }),\n                        tap({\n                            complete: () => {\n                                resolve(this.getState());\n                            },\n                        })\n                    )\n            );\n        });\n    }\n\n    private _dispatchThunkAction<TDispatchAction extends TAction>(\n        thunkAction: ThunkAction<TDispatchAction, TTransformedState>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(defer(() => thunkAction(this)), options);\n    }\n\n    private _getDispatcher(queueId: string = 'default'): Dispatcher<TAction> {\n        if (!this._dispatchers[queueId]) {\n            this._dispatchers[queueId] = new Subject();\n\n            this._dispatchQueue$.next(this._dispatchers[queueId]);\n        }\n\n        return this._dispatchers[queueId];\n    }\n\n    private _getDispatchError(queueId: string = 'default'): Subject<Error> {\n        if (!this._errors[queueId]) {\n            this._errors[queueId] = new Subject();\n        }\n\n        return this._errors[queueId];\n    }\n}\n\nexport interface DataStoreOptions<TState, TAction, TTransformedState> {\n    shouldWarnMutation: boolean;\n    actionTransformer(action: Subscribable<TAction>): Subscribable<TAction>;\n    equalityCheck(valueA: any, valueB: any): boolean;\n    stateTransformer(state: TState): TTransformedState;\n}\n\ninterface StateTuple<TState, TTransformedState> {\n    state: TState;\n    transformedState: TTransformedState;\n}\n\ntype Dispatcher<TAction> = Subject<Subscribable<TAction>>;\n","import { isPlainObject } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nexport interface DeepFreezeOptions<T> {\n    previousValue?: T;\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n\nexport default function deepFreeze<T>(object: T[], options?: DeepFreezeOptions<T>): ReadonlyArray<T>;\nexport default function deepFreeze<T extends object>(object: T, options?: DeepFreezeOptions<T>): Readonly<T>;\nexport default function deepFreeze<T>(object: T, options?: DeepFreezeOptions<T>): T;\nexport default function deepFreeze<T>(\n    object: T[] | T,\n    options?: DeepFreezeOptions<T>\n): ReadonlyArray<T> | Readonly<T> | T {\n    try {\n        const { equalityCheck = shallowEqual, previousValue = null } = options || {};\n\n        if (equalityCheck(object, previousValue) && Object.isFrozen(previousValue)) {\n            return previousValue as T;\n        }\n\n        if (Object.isFrozen(object) || (!Array.isArray(object) && !isPlainObject(object))) {\n            return object;\n        }\n\n        if (Array.isArray(object)) {\n            return Object.freeze(object.map((value, index) =>\n                deepFreeze(value, {\n                    equalityCheck,\n                    previousValue: Array.isArray(previousValue) ? previousValue[index] : undefined,\n                })\n            ));\n        }\n\n        return Object.freeze(Object.getOwnPropertyNames(object).reduce((result, key) => {\n            result[key as keyof T] = deepFreeze(object[key as keyof T], {\n                equalityCheck,\n                previousValue: previousValue && previousValue.hasOwnProperty(key) ?\n                    (previousValue as any)[key] :\n                    undefined,\n            });\n\n            return result;\n        }, {} as T));\n    } catch (error) {\n        // Browsers that only support ES5 will throw `TypeError` when checking\n        // if a primitive value is frozen or trying to freeze a primitive value.\n        if (error instanceof TypeError) {\n            return object;\n        }\n\n        throw error;\n    }\n}\n","import { assign } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>,\n    options?: CombineReducersOptions\n): Reducer<TState, TAction> {\n    const { equalityCheck = shallowEqual } = options || {};\n\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (equalityCheck(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n\nexport interface CombineReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import { omitBy } from 'lodash';\n\nimport Action from './action';\n\nexport default function createAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    if (typeof type !== 'string' || type === '') {\n        throw new Error('`type` must be a string');\n    }\n\n    return { type, ...omitBy({ payload, meta }, value => value === undefined) };\n}\n","export default class ScriptLoader {\n    private _scripts: { [key: string]: Promise<Event> } = {};\n\n    loadScript(src: string): Promise<Event> {\n        if (!this._scripts[src]) {\n            this._scripts[src] = new Promise((resolve, reject) => {\n                const script = document.createElement('script') as LegacyHTMLScriptElement;\n\n                script.onload = event => resolve(event);\n                script.onreadystatechange = event => resolve(event);\n                script.onerror = event => {\n                    delete this._scripts[src];\n                    reject(event);\n                };\n                script.async = true;\n                script.src = src;\n\n                document.body.appendChild(script);\n            });\n        }\n\n        return this._scripts[src];\n    }\n}\n\ninterface LegacyHTMLScriptElement extends HTMLScriptElement {\n    // `onreadystatechange` is needed to support legacy IE\n    onreadystatechange(this: HTMLElement, event: Event): any;\n}\n","import ScriptLoader from './script-loader';\n\nexport default function createScriptLoader(): ScriptLoader {\n    return new ScriptLoader();\n}\n","import FormBuilder from './form-builder';\nimport FormPosterOptions from './form-poster-options';\nimport { isAbsoluteUrl, joinPaths } from './url-utils';\n\nexport default class FormPoster {\n    /**\n     * @internal\n     */\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _options?: FormPosterOptions\n    ) {}\n\n    postForm(url: string, data: { [key: string]: any }, callback?: () => void): void {\n        const form = this._formBuilder.build(this._prependHost(url), data);\n\n        window.addEventListener('unload', function handleUnload() {\n            window.removeEventListener('unload', handleUnload);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n        // In order to submit the form, the form must be attached to DOM.\n        document.body.appendChild(form);\n        form.submit();\n        document.body.removeChild(form);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || isAbsoluteUrl(url)) {\n            return url;\n        }\n\n        return joinPaths(this._options.host, url);\n    }\n}\n","export const API = 'PAYMENT_TYPE_API';\nexport const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n","export const APPLICATION_JSON = 'application/json';\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 150);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSpamProtectionExecuting?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction | SpamProtectionAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isSpamProtectionExecuting', true);\n\n    case SpamProtectionActionType.Completed:\n    case SpamProtectionActionType.SubmitFailed:\n        return objectSet(statuses, 'isSpamProtectionExecuting', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit/store-credit-actions';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit/store-credit-selector';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n    isSpamProtectionExecuting(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    const isSpamProtectionExecuting = createSelector(\n        (state: OrderState) => !!state.statuses.isSpamProtectionExecuting,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n            isSpamProtectionExecuting: isSpamProtectionExecuting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport const ALLOW_COOKIE_ATTEMPT_INTERVAL = 10 * 60 * 1000;\nexport const IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\nexport const LAST_ALLOW_COOKIE_ATTEMPT_KEY = 'lastAllowCookieAttempt';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            return Promise.resolve();\n        }\n\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        // It could be possible that the flag is set to true but the browser has\n        // already removed the permission to store third-party cookies. In that\n        // case, we should try to redirect the user again. But we only want to\n        // do it once within a fixed interval. This is to avoid getting into a\n        // redirect loop if the shopper actually doesn't have a valid card\n        // session.\n        this._storage.setItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY, Date.now());\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const lastAttempt = Number(this._storage.getItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY));\n        const canRetry = (\n            (!lastAttempt || Date.now() - lastAttempt > ALLOW_COOKIE_ATTEMPT_INTERVAL) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(LAST_ALLOW_COOKIE_ATTEMPT_KEY);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if spam protection is not loaded when trying to\n * complete the required spam protection verification.\n */\nexport default class SpamProtectionNotLoadedError extends StandardError {\n    constructor() {\n        super('Spam protection is not loaded. Please try again.');\n\n        this.name = 'SpamProtectionNotLoadedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { defer, of, throwError, Observable, Subject } from 'rxjs';\nimport { catchError, delay, retryWhen, switchMap } from 'rxjs/operators';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport {\n    SpamProtectionFailedError,\n    SpamProtectionNotCompletedError,\n    SpamProtectionNotLoadedError,\n} from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        const event$ = this._event$;\n        const recaptcha = this._recaptcha;\n\n        if (!event$ || !recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        const timeout = 7000;\n        const retryInterval = 250;\n        const maxRetries = timeout / retryInterval;\n\n        return defer(() => {\n            const element = document.querySelector('iframe[src*=\"bframe\"]');\n\n            return element ?\n                of(element) :\n                throwError(new SpamProtectionNotLoadedError());\n        })\n            .pipe(\n                retryWhen(errors => errors.pipe(\n                    delay(retryInterval),\n                    switchMap((error, index) =>\n                        index < maxRetries ? of(error) : throwError(error)\n                    )\n                )),\n                switchMap(element => {\n                    this._watchRecaptchaChallengeWindow(event$, element);\n                    recaptcha.execute();\n\n                    return event$;\n                }),\n                catchError(error => of({ error }))\n            );\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>, element: Element) {\n        const iframeContainer = element.parentElement;\n\n        if (!iframeContainer) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new SpamProtectionNotLoadedError();\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export interface AdyenComponentCallbacks {\n    onChange?(state: AdyenCardState): void;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface AdyenThreeDS2Options {\n    /**\n     * Specify Three3DS2Challenge Widget Size\n     */\n    widgetSize?: string;\n\n    /**\n     * A callback that gets called when adyen component is mounted\n     */\n    onLoad(cancel: () => void): void;\n\n    /**\n     * A callback that gets called when adyen component verification\n     * is completed\n     */\n    onComplete(): void;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    result_code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumnber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: AdyenCreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions): AdyenComponent;\n}\n\nexport interface AdyenCreditCardComponentOptions {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        result_code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport NotInitializedError from '../../../common/error/errors/not-initialized-error';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    AdyenCardState,\n    AdyenCheckout,\n    AdyenComponent,\n    AdyenConfiguration,\n    AdyenError,\n    ResultCode,\n    ThreeDS2ComponentType,\n    ThreeDS2OnComplete,\n    ThreeDS2Result,\n} from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _stateContainer?: string;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenComponent?: AdyenComponent;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenComponent = this._adyenCheckout.create(\n                    paymentMethod.method,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateStateContainer(state);\n                        },\n                    }\n                );\n\n                adyenComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenComponent = adyenComponent;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        nonce: this._getStateContainer(),\n                        shouldSaveInstrument,\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            })))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                            ...payment,\n                                            paymentData: {\n                                                ...payment.paymentData,\n                                                shouldSaveInstrument,\n                                            },\n                                        }))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                ...payment,\n                                paymentData: {\n                                    ...payment.paymentData,\n                                    shouldSaveInstrument,\n                                },\n                            }))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenComponent) {\n            this._adyenComponent.unmount();\n            this._adyenComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError('\"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getStateContainer(): string {\n        if (!this._stateContainer) {\n            return '{}';\n        }\n\n        return this._stateContainer;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { widgetSize } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n        if (!widgetSize) {\n            return '01';\n        }\n\n        return widgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                threeDS2Component.unmount();\n                reject();\n            });\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const { onComplete, onLoad } = this._getAdyenV2PaymentInitializeOptions().threeDS2Options;\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        onComplete();\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            onLoad(() => {\n                threeDS2Component.unmount();\n                reject();\n            });\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateStateContainer(newState: AdyenCardState) {\n        if (newState.isValid) {\n            const state = {\n                ...newState.data.paymentMethod,\n                origin: window.location.origin,\n            };\n\n            this._stateContainer = JSON.stringify(state);\n        }\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    AdyenCheckout,\n    AdyenConfiguration,\n    AdyenHostWindow\n} from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    private _stylesheets: { [key: string]: Promise<Event> } = {};\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n    }\n\n    private _loadStylesheet(src: string): Promise<Event> {\n        if (!this._stylesheets[src]) {\n            this._stylesheets[src] = new Promise((resolve, reject) => {\n                const stylesheet = document.createElement('link');\n\n                stylesheet.onload = event => {\n                    resolve(event);\n                };\n                stylesheet.onerror = event => {\n                    delete this._stylesheets[src];\n                    reject(event);\n                };\n                stylesheet.type = 'text/css';\n                stylesheet.rel = 'stylesheet';\n                stylesheet.href = src;\n\n                document.head.appendChild(stylesheet);\n            });\n        }\n\n        return this._stylesheets[src];\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isSubmittingOrder = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ order }: InternalCheckoutSelectors) => order.isSpamProtectionExecuting,\n        (isExecuting, isSpamProtectionExecuting) => (methodId?: string) => {\n            return (\n                isExecuting(methodId) ||\n                isSpamProtectionExecuting()\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: isSubmittingOrder(state),\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\nimport StoreCreditActionCreator from '../store-credit/store-credit-action-creator';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                if (message.type !== key) {\n                    return;\n                }\n\n                const handler = this._messageHandlers[key];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import * as cookie from 'js-cookie';\n\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestSender from './request-sender';\nimport RequestSenderOptions from './request-sender-options';\n\nexport default function createRequestSender(options?: RequestSenderOptions): RequestSender {\n    return new RequestSender(\n        new RequestFactory(),\n        new PayloadTransformer(),\n        cookie,\n        options\n    );\n}\n","import Headers from './headers';\nimport RequestOptions from './request-options';\nimport Response from './response';\nimport toFormUrlEncoded from './to-form-url-encoded';\n\nconst JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nconst FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\n\nexport default class PayloadTransformer {\n    toRequestBody(options: RequestOptions): any {\n        const contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return toFormUrlEncoded(options.body);\n            }\n        }\n\n        return options.body;\n    }\n\n    toResponse(xhr: XMLHttpRequest): Response {\n        const headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n\n        // Using `responseText` to support legacy IE\n        const body = this._parseResponseBody(\n            'response' in xhr ? xhr.response : (xhr as any).responseText,\n            headers\n        );\n\n        return {\n            body,\n            headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private _parseResponseBody(body: string, headers: Headers): any {\n        const contentType = this._getHeader(headers, 'Content-Type');\n\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n\n        return body;\n    }\n\n    private _parseResponseHeaders(rawHeaders: string): Headers {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return {\n                ...headers,\n                [key.toLowerCase()]: parts.join(':').trim(),\n            };\n        }, {});\n    }\n\n    private _getHeader(headers: Headers, key: string): string {\n        if (!headers || !key) {\n            return '';\n        }\n\n        return headers[key] || headers[key.toLowerCase()] || '';\n    }\n}\n","export default function toFormUrlEncoded(data: any): string {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params)}`;\n    }\n}\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","export default function isPromise(promise: any): promise is PromiseLike<any> {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\n","import Timeout from './timeout';\n\nexport default function createTimeout(delay?: number): Timeout {\n    return new Timeout(delay);\n}\n","import { Subscribable, SubscribableOrPromise } from 'rxjs';\n\nimport Action from './action';\nimport { DispatchableAction } from './dispatchable-data-store';\n\nexport default function isObservableActionLike<TAction extends Action = Action>(\n    action: DispatchableAction<TAction>\n): action is SubscribableOrPromise<TAction> {\n    return (\n        typeof (action as Subscribable<TAction>).subscribe === 'function' ||\n        typeof (action as PromiseLike<TAction>).then === 'function'\n    );\n}\n","import { Subscribable } from 'rxjs';\n\nimport Action from './action';\n\nexport default function noopActionTransformer<TAction extends Action, TTransformedAction extends Action = TAction>(\n    action: Subscribable<TAction>\n): Subscribable<TTransformedAction> {\n    return action as any as Subscribable<TTransformedAction>;\n}\n","export default function noopStateTransformer<TState, TTransformedState = TState>(\n    state: TState\n): TTransformedState {\n    return state as any as TTransformedState;\n}\n","import { curryRight, flowRight } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TStateA, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TState, action: TAction) => TStateA,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TState, action: TAction) => TStateB,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TState, action: TAction) => TStateC,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TStateD, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TStateD, action: TAction) => TStateC,\n    reducerE: (state: TState, action: TAction) => TStateD,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...args: any[]\n): Reducer<TState, TAction> {\n    let reducers: Array<Reducer<TState, TAction>> = args;\n    let options: ComposeReducersOptions = {};\n\n    if (typeof args[args.length - 1] === 'object') {\n        reducers = args.slice(0, -1);\n        options = { ...options, ...args[args.length - 1] };\n    }\n\n    const { equalityCheck = shallowEqual } = options;\n\n    return (state, action) => {\n        const newState = flowRight(\n            reducers\n                .filter(reducer => reducer.length === 2)\n                .map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return equalityCheck(state, newState) ? state : newState;\n    };\n}\n\nexport interface ComposeReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import Action from './action';\nimport combineReducers, { ReducerMap } from './combine-reducers';\nimport DataStore, { DataStoreOptions } from './data-store';\nimport Reducer from './reducer';\n\nexport default function createDataStore<TState, TAction extends Action = Action, TTransformedState = TState>(\n    reducer: Reducer<TState, TAction> | ReducerMap<TState, TAction>,\n    initialState?: Partial<TState>,\n    options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n): DataStore<TState, TAction, TTransformedState> {\n    if (typeof reducer === 'function') {\n        return new DataStore(reducer, initialState, options);\n    }\n\n    return new DataStore(\n        combineReducers(reducer, { equalityCheck: options && options.equalityCheck }),\n        initialState,\n        options\n    );\n}\n","import Action from './action';\nimport createAction from './create-action';\n\nexport default function createErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    return {\n        ...createAction(type, payload, meta),\n        error: true,\n    };\n}\n","import lodashMemoize from 'lodash.memoize'; // tslint:disable-line:match-default-export-name\nimport shallowEqual from 'shallowequal';\n\nimport CacheKeyResolver from './cache-key-resolver';\nimport { Omit } from './types';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        isEqual,\n        maxSize,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            isEqual: shallowEqual,\n            maxSize: 0,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import createScriptLoader from './create-script-loader';\nimport ScriptLoader from './script-loader';\n\nlet instance: ScriptLoader;\n\nexport default function getScriptLoader(): ScriptLoader {\n    if (!instance) {\n        instance = createScriptLoader();\n    }\n\n    return instance;\n}\n","import FormBuilder from './form-builder';\nimport FormPoster from './form-poster';\nimport FormPosterOptions from './form-poster-options';\n\nexport default function createFormPoster(options?: FormPosterOptions): FormPoster {\n    const formBuilder = new FormBuilder();\n    const formPoster = new FormPoster(formBuilder, options);\n\n    return formPoster;\n}\n","export default class FormBuilder {\n    build(url: string, data: { [key: string]: any }): HTMLFormElement {\n        const form = document.createElement('form');\n\n        form.style.display = 'none';\n\n        form.setAttribute('action', url);\n        form.setAttribute('method', 'POST');\n        form.setAttribute('target', '_top');\n\n        Object.keys(data)\n            .forEach(key => {\n                const value = data[key];\n\n                form.appendChild(this._createInput(value, key));\n            });\n\n        return form;\n    }\n\n    private _createInput(value: any, key: string): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.setAttribute('name', key);\n        input.setAttribute('type', 'hidden');\n        input.setAttribute('value', value);\n\n        return input;\n    }\n}\n","export function isAbsoluteUrl(url: string): boolean {\n    return /^https?:\\/\\//.test(url);\n}\n\nexport function joinPaths(pathA: string, pathB: string): string {\n    return `${removeTrailingSlash(pathA)}/${removeLeadingSlash(pathB)}`;\n}\n\nfunction removeTrailingSlash(path: string): string {\n    return path.replace(/\\/$/, '');\n}\n\nfunction removeLeadingSlash(path: string): string {\n    return path.replace(/^\\//, '');\n}\n","import Client from './client/client';\n\n/**\n * @param {Object} [config]\n * @returns {Client}\n */\nexport function createClient(config) {\n    return Client.create(config);\n}\n","import objectAssign from 'object-assign';\nimport OffsitePaymentInitializer from '../payment/offsite-payment-initializer';\nimport PaymentSubmitter from '../payment/payment-submitter';\nimport ClientTokenGenerator from '../payment/client-token-generator';\nimport StoreRequestSender from '../store/store-request-sender';\nimport DEFAULT_CONFIG from './default-config';\n\nexport default class Client {\n    /**\n     * @param {Object} config\n     * @returns {Client}\n     */\n    static create(config) {\n        const clientConfig = objectAssign({}, DEFAULT_CONFIG, config);\n        const offsitePaymentInitializer = OffsitePaymentInitializer.create(clientConfig);\n        const paymentSubmitter = PaymentSubmitter.create(clientConfig);\n        const clientTokenGenerator = ClientTokenGenerator.create(clientConfig);\n        const storeRequestSender = StoreRequestSender.create(clientConfig);\n\n        return new Client(\n            clientConfig,\n            paymentSubmitter,\n            offsitePaymentInitializer,\n            clientTokenGenerator,\n            storeRequestSender\n        );\n    }\n\n    /**\n     * @param {Object} config\n     * @param {PaymentSubmitter} paymentSubmitter\n     * @param {OffsitePaymentInitializer} offsitePaymentInitializer\n     * @param {ClientTokenGenerator} clientTokenGenerator\n     * @param {StoreRequestSender} storeRequestSender\n     */\n    constructor(\n        config,\n        paymentSubmitter,\n        offsitePaymentInitializer,\n        clientTokenGenerator,\n        storeRequestSender\n    ) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n\n        /**\n         * @private\n         * @type {PaymentSubmitter}\n         */\n        this.paymentSubmitter = paymentSubmitter;\n\n        /**\n         * @private\n         * @type {OffsitePaymentInitializer}\n         */\n        this.offsitePaymentInitializer = offsitePaymentInitializer;\n\n        /**\n         * @private\n         * @type {ClientTokenGenerator}\n         */\n        this.clientTokenGenerator = clientTokenGenerator;\n\n        /**\n         * @private\n         * @type {StoreRequestSender}\n         */\n        this.storeRequestSender = storeRequestSender;\n    }\n\n    /**\n     * @param {string} host\n     * @returns {void}\n     */\n    setHost(host) {\n        this.config.host = host;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    initializeOffsitePayment(data, callback) {\n        this.offsitePaymentInitializer.initializeOffsitePayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    submitPayment(data, callback) {\n        this.paymentSubmitter.submitPayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        this.clientTokenGenerator.generateClientToken(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        this.storeRequestSender.loadInstruments(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {AddressData} data.shippingAddress\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        this.storeRequestSender.loadInstrumentsWithAddress(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {CreditCard} data.creditCard\n     * @param {AddressData} data.billingAddress\n     * @param {boolean} data.defaultInstrument\n     * @param {string} data.providerName\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        this.storeRequestSender.postShopperInstrument(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.instrumentId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        this.storeRequestSender.deleteShopperInstrument(data, callback);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { HOSTED } from './payment-types';\nimport PayloadMapper from './offsite-payment-mappers/payload-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class OffsitePaymentInitializer {\n    /**\n     * @param {Object} config\n     * @returns {OffsitePaymentInitializer}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const formPoster = createFormPoster();\n        const payloadMapper = PayloadMapper.create();\n\n        return new OffsitePaymentInitializer(urlHelper, formPoster, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {FormPoster} formPoster\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, formPoster, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {FormPoster}\n         */\n        this.formPoster = formPoster;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    initializeOffsitePayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== HOSTED) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getOffsitePaymentUrl();\n\n        this.formPoster.postForm(url, payload, callback);\n    }\n}\n","import objectAssign from 'object-assign';\nimport { omitNil, toString } from '../../common/utils';\nimport AddressMapper from './address-mapper';\nimport CustomerMapper from './customer-mapper';\nimport MetaMapper from './meta-mapper';\nimport PaymentMethodIdMapper from '../payment-method-mappers/payment-method-id-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const addressMapper = AddressMapper.create();\n        const customerMapper = CustomerMapper.create();\n        const metaMapper = MetaMapper.create();\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper);\n    }\n\n    /**\n     * @param {AddressMapper} addressMapper\n     * @param {CustomerMapper} customerMapper\n     * @param {MetaMapper} metaMapper\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @param {StoreMapper} storeMapper\n     * @returns {Object}\n     */\n    constructor(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper) {\n        /**\n         * @private\n         * @type {AddressMapper}\n         */\n        this.addressMapper = addressMapper;\n\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {MetaMapper}\n         */\n        this.metaMapper = metaMapper;\n\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { authToken, order = {}, paymentMethod = {} } = data;\n\n        const payload = objectAssign(\n            {\n                amount: order.grandTotal ? order.grandTotal.integerAmount : null,\n                bc_auth_token: authToken,\n                currency: order.currency,\n                gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n                notify_url: order.callbackUrl,\n                order_id: order.orderId ? toString(order.orderId) : null,\n                page_title: document.title ? document.title : null,\n                payment_method_id: paymentMethod.id,\n                reference_id: order.orderId ? toString(order.orderId) : null,\n                return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            },\n            this.addressMapper.mapToBillingAddress(data),\n            this.customerMapper.mapToCustomer(data),\n            this.metaMapper.mapToMeta(data),\n            this.addressMapper.mapToShippingAddress(data),\n            this.storeMapper.mapToStore(data)\n        );\n\n        return omitNil(payload);\n    }\n}\n","/**\n * @param {array|string} items\n * @param {array|string} item\n * @returns {boolean}\n */\nexport default function includes(items, item) {\n    if (!Array.isArray(items) && typeof items !== 'string') {\n        return false;\n    }\n\n    return items.indexOf(item) !== -1;\n}\n","import isEmptyStringOrNil from './is-emptystring-or-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitEmptyStringAndNil(object) {\n    return omitProperty(object, isEmptyStringOrNil);\n}\n","import isEmptyString from './is-empty-string';\nimport isNil from './is-nil';\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyStringOrNil(value) {\n    return isEmptyString(value) || isNil(value);\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyString(value) {\n    return value === '';\n}\n","import isNil from './is-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitNil(object) {\n    return omitProperty(object, isNil);\n}\n","/**\n * @param {*} value\n * @returns {number}\n */\nexport default function toNumber(value) {\n    return parseFloat(value) || 0;\n}\n","/**\n * @param {string} string\n * @returns {string}\n */\nexport default function toSnakeCase(string) {\n    if (typeof string !== 'string') {\n        return string;\n    }\n\n    return string.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2')\n        .replace(/[-\\s]+/g, '_')\n        .toLowerCase();\n}\n","/**\n * @param {*} value\n * @returns {string}\n */\nexport default function toString(value) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'number' && !isNaN(value)) {\n        return value.toString();\n    }\n\n    return '';\n}\n","import { omitNil, toSnakeCase } from '../../common/utils';\n\nexport default class AddressMapper {\n    /**\n     * @returns {AddressMapper}\n     */\n    static create() {\n        return new AddressMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        return this.mapToAddress(data, 'billingAddress');\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n        const formattedAddressKey = toSnakeCase(addressKey);\n\n        return omitNil({\n            [`${formattedAddressKey}_city`]: address.city,\n            [`${formattedAddressKey}_company`]: address.company,\n            [`${formattedAddressKey}_country_code`]: address.countryCode,\n            [`${formattedAddressKey}_country`]: address.country,\n            [`${formattedAddressKey}_first_name`]: address.firstName,\n            [`${formattedAddressKey}_last_name`]: address.lastName,\n            [`${formattedAddressKey}_phone`]: address.phone,\n            [`${formattedAddressKey}_state_code`]: address.provinceCode,\n            [`${formattedAddressKey}_state`]: address.province,\n            [`${formattedAddressKey}_street_1`]: address.addressLine1,\n            [`${formattedAddressKey}_street_2`]: address.addressLine2,\n            [`${formattedAddressKey}_zip`]: address.postCode,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {}, store = {} } = data;\n\n        return omitNil({\n            customer_browser_info: navigator.userAgent,\n            customer_email: customer.email,\n            customer_first_name: customer.firstName,\n            customer_geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            customer_last_name: customer.lastName,\n            customer_locale: store.storeLanguage,\n            customer_name: customer.name,\n            customer_phone: customer.phoneNumber,\n            customer_reference: customer.email,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class MetaMapper {\n    /**\n     * @returns {MetaMapper}\n     */\n    static create() {\n        return new MetaMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToMeta(data) {\n        const { source } = data;\n\n        return omitNil({\n            meta_referrer: document.referrer,\n            meta_source: source,\n            meta_user_agent: navigator.userAgent,\n        });\n    }\n}\n","export const CREDIT_CARD = 'credit-card';\nexport const MULTI_OPTION = 'multi-option';\n","export const BRAINTREE = 'braintree';\nexport const BRAINTREE_PAYPAL = 'braintreepaypal';\nexport const BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit';\nexport const BRAINTREE_VISACHECKOUT = 'braintreevisacheckout';\nexport const BRAINTREE_GOOGLEPAY = 'googlepaybraintree';\n","import { omitNil, toString } from '../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            store_hash: store.storeHash,\n            store_id: store.storeId ? toString(store.storeId) : null,\n        });\n    }\n}\n","import { API } from './payment-types';\nimport PayloadMapper from './v1/payment-mappers/payload-mapper';\nimport RequestSender from '../common/http-request/request-sender';\nimport UrlHelper from './url-helper';\n\nexport default class PaymentSubmitter {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const payloadMapper = PayloadMapper.create();\n\n        return new PaymentSubmitter(urlHelper, requestSender, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    submitPayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== API) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getPaymentUrl();\n        const options = {\n            headers: this.payloadMapper.mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CustomerMapper from './customer-mapper';\nimport OrderMapper from './order-mapper';\nimport PaymentMapper from './payment-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const customerMapper = CustomerMapper.create();\n        const orderMapper = OrderMapper.create();\n        const paymentMapper = PaymentMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(customerMapper, orderMapper, paymentMapper, storeMapper);\n    }\n\n    /**\n     * @param {CustomerMapper} customerMapper\n     * @param {OrderMapper} orderMapper\n     * @param {PaymentMapper} paymentMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(customerMapper, orderMapper, paymentMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {OrderMapper}\n         */\n        this.orderMapper = orderMapper;\n\n        /**\n         * @private\n         * @type {PaymentMapper}\n         */\n        this.paymentMapper = paymentMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            customer: this.customerMapper.mapToCustomer(data),\n            notify_url: order.callbackUrl,\n            order: this.orderMapper.mapToOrder(data),\n            payment: this.paymentMapper.mapToPayment(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToHeaders(data) {\n        const { authToken } = data;\n\n        return omitNil({\n            Authorization: authToken,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {} } = data;\n\n        return omitNil({\n            customer_group: customer.customerGroupName ? { name: customer.customerGroupName } : null,\n            geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            id: customer.customerId ? toString(customer.customerId) : null,\n            session_token: quoteMeta.request ? quoteMeta.request.sessionHash : null,\n        });\n    }\n}\n","import { omitEmptyStringAndNil, omitNil, toString } from '../../../common/utils';\n\nexport default class OrderMapper {\n    /**\n     * @returns {OrderMapper}\n     */\n    static create() {\n        return new OrderMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrder(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            billing_address: this.mapToBillingAddress(data),\n            coupons: this.mapToCoupons(data),\n            currency: order.currency,\n            id: order.orderId ? toString(order.orderId) : null,\n            items: this.mapToItems(data),\n            shipping: this.mapToShipping(data),\n            shipping_address: this.mapToShippingAddress(data),\n            token: order.token,\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        const { customer = {} } = data;\n        const address = this.mapToAddress(data, 'billingAddress');\n\n        if (customer.email) {\n            address.email = customer.email;\n        }\n\n        return address;\n    }\n\n    /**\n     * @private\n     * @param  {PaymentRequestData} data\n     * @return {Shipping[]}\n     */\n    mapToShipping(data) {\n        const { description } = data.shippingOption || {};\n\n        if (description) {\n            return [{\n                method: description,\n            }];\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Coupon[]}\n     */\n    mapToCoupons({ order = {} }) {\n        if (order.coupon && order.coupon.coupons) {\n            return order.coupon.coupons.map(({ code }) => ({ code }));\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n\n        return omitEmptyStringAndNil({\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            country: address.country,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            state_code: address.provinceCode,\n            state: address.province,\n            street_1: address.addressLine1,\n            street_2: address.addressLine2,\n            zip: address.postCode,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            code: itemData.id,\n            variant_id: itemData.variantId,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            grand_total: order.grandTotal ? order.grandTotal.integerAmount : null,\n            handling: order.handling ? order.handling.integerAmount : null,\n            shipping: order.shipping ? order.shipping.integerAmount : null,\n            subtotal: order.subtotal ? order.subtotal.integerAmount : null,\n            tax: order.taxTotal ? order.taxTotal.integerAmount : null,\n        });\n    }\n}\n","import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n        };\n\n        const method = paymentMethod.method;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            hash: store.storeHash,\n            id: store.storeId ? toString(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n}\n","import { APPLICATION_JSON } from './content-types';\nimport { GET } from './method-types';\n\nconst DEFAULT_OPTIONS = {\n    headers: {\n        Accept: APPLICATION_JSON,\n        'Content-Type': APPLICATION_JSON,\n    },\n    method: GET,\n};\n\nexport default DEFAULT_OPTIONS;\n","import objectAssign from 'object-assign';\nimport { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return { data, headers, status, statusText };\n    }\n\n    /**\n     * @private\n     * @param {string} rawHeaders\n     * @returns {Object}\n     */\n    parseResponseHeaders(rawHeaders) {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return objectAssign({}, headers, {\n                [key.toLowerCase()]: parts.join(':').trim(),\n            });\n        }, {});\n    }\n}\n","export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport ClientTokenMapper from './v2/payment-mappers/client-token-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class ClientTokenGenerator {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const clientTokenMapper = ClientTokenMapper.create();\n\n        return new ClientTokenGenerator(urlHelper, requestSender, clientTokenMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {ClientTokenMapper} clientTokenMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, clientTokenMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {ClientTokenMapper}\n         */\n        this.clientTokenMapper = clientTokenMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        const url = this.urlHelper.getGenerateClientTokenUrl();\n        const payload = this.clientTokenMapper.mapToClientToken(data);\n\n        this.requestSender.postRequest(url, payload, {}, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CartMapper from './cart-mapper';\nimport GatewayMapper from './gateway-mapper';\nimport QuoteMapper from './quote-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class ClientTokenMapper {\n    /**\n     * @returns {ClientTokenMapper}\n     */\n    static create() {\n        const cartMapper = CartMapper.create();\n        const gatewayMapper = GatewayMapper.create();\n        const quoteMapper = QuoteMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new ClientTokenMapper(cartMapper, gatewayMapper, quoteMapper, storeMapper);\n    }\n\n    /**\n     * @param {CartMapper} cartMapper\n     * @param {GatewayMapper} gatewayMapper\n     * @param {QuoteMapper} quoteMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(cartMapper, gatewayMapper, quoteMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CartMapper}\n         */\n        this.cartMapper = cartMapper;\n\n        /**\n         * @private\n         * @type {GatewayMapper}\n         */\n        this.gatewayMapper = gatewayMapper;\n\n        /**\n         * @private\n         * @type {QuoteMapper}\n         */\n        this.quoteMapper = quoteMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToClientToken(data) {\n        return omitNil({\n            cart: this.cartMapper.mapToCart(data),\n            gateway: this.gatewayMapper.mapToGateway(data),\n            quote: this.quoteMapper.mapToQuote(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class CartMapper {\n    /**\n     * @returns {CartMapper}\n     */\n    static create() {\n        return new CartMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCart(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            currency_code: cart.currency,\n            items: this.mapToItems(data),\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object[]}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            discount_amount: itemData.integerDiscount,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n            tax_amount: itemData.integerTax,\n            amount: itemData.integerAmountAfterDiscount,\n            type: this.mapToType(itemData),\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            discount_total: cart.discount ? cart.discount.integerAmount : null,\n            grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,\n            shipping_total: cart.shipping ? cart.shipping.integerAmount : null,\n            subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,\n            surcharge_total: cart.handling ? cart.handling.integerAmount : null,\n            tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null,\n        });\n    }\n\n    /**\n     * @private\n     * @param {Object} itemData\n     * @returns {Object}\n     */\n    mapToType(itemData) {\n        const types = {\n            ItemPhysicalEntity: 'physical',\n            ItemDigitalEntity: 'digital',\n            ItemGiftCertificateEntity: 'gift_card',\n        };\n\n        return types[itemData.type];\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class GatewayMapper {\n    /**\n     * @returns {GatewayMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new GatewayMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToGateway(data) {\n        const { paymentMethod = {} } = data;\n\n        return omitNil({\n            name: this.paymentMethodIdMapper.mapToId(paymentMethod),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class QuoteMapper {\n    /**\n     * @returns {QuoteMapper}\n     */\n    static create() {\n        return new QuoteMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToQuote(data) {\n        return omitNil({\n            billing_address: this.mapToAddress(data, 'billingAddress'),\n            shipping_address: this.mapToAddress(data, 'shippingAddress'),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const { customer = {} } = data;\n        const address = data[addressKey] || {};\n\n        return omitNil({\n            address_line_1: address.addressLine1,\n            address_line_2: address.addressLine2,\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            email: customer.email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            postal_code: address.postCode,\n            state: address.province,\n        });\n    }\n}\n","import { omitNil, toNumber } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        return omitNil({\n            locale: this.mapToLocale(data),\n            store_identity: this.mapToIdentity(data),\n            urls: this.mapToUrls(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToLocale(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            country_code: store.countryCode,\n            currency_code: store.currencyCode,\n            language_code: store.storeLanguage,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToIdentity(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            id: store.storeId ? toNumber(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToUrls(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            cart: store.cartLink,\n            checkout: store.checkoutLink,\n            confirmation: store.orderConfirmationLink,\n            home: store.shopPath,\n        });\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport { DELETE, POST } from '../common/http-request/method-types';\nimport UrlHelper from './url-helper';\nimport {\n    mapToHeaders,\n    mapToInstrumentPayload,\n    mapToTrustedShippingAddressPayload,\n} from './v2/mappers';\n\nexport default class StoreRequestSender {\n    /**\n     * @param {Object} config\n     * @returns {StoreRequestSender}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n\n        return new StoreRequestSender(urlHelper, requestSender);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        const url = this.urlHelper.getTrustedShippingAddressUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToTrustedShippingAddressPayload(data);\n        const options = {\n            method: POST,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToInstrumentPayload(data);\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentByIdUrl(\n            data.storeId,\n            data.customerId,\n            data.instrumentId\n        );\n        const options = {\n            method: DELETE,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     * @throws {Error}\n     */\n    get host() {\n        if (!this.config || !this.config.host) {\n            throw new Error('Host URL unavailable or not supplied.');\n        }\n\n        return this.config.host;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    getInstrumentsUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @return {string}\n     */\n    getTrustedShippingAddressUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/trusted_shipping_address?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {number} instrumentId\n     * @returns {string}\n     */\n    getInstrumentByIdUrl(storeId, customerId, instrumentId) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/${instrumentId}`;\n    }\n}\n"],"sourceRoot":""}